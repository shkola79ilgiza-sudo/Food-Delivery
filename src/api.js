import { safeSetClientOrders } from './utils/safeStorage';

const API_BASE_URL = ""; // process.env.REACT_APP_API_BASE_URL || "";

function getAuthToken() {
  // Adjust to your auth storage. Placeholder: token in localStorage
  return localStorage.getItem("authToken") || "";
}

async function apiRequest(path, options = {}) {
  const headers = new Headers(options.headers || {});
  headers.set("Content-Type", "application/json");
  const token = getAuthToken();
  if (token) headers.set("Authorization", `Bearer ${token}`);

  const resp = await fetch(`${API_BASE_URL}${path}`, {
    ...options,
    headers,
  });

  if (!resp.ok) {
    let errBody = null;
    try { errBody = await resp.json(); } catch {}
    const error = new Error(errBody?.error?.message || resp.statusText);
    error.status = resp.status;
    error.body = errBody;
    throw error;
  }

  if (resp.status === 204) return null;
  try { return await resp.json(); } catch { return null; }
}

// ===== DEMO storage helpers (fallback when API_BASE_URL is empty) =====
function demoKey(chefId) {
  return `demo_menu_${chefId}`;
}

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä–æ–≤ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
const demoChefs = [
  {
    id: 'chef1@demo.com',
    email: 'chef1@demo.com',
    name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
    role: 'chef',
    avatar: '/images/chef1.jpg',
    rating: 4.8,
    reviewsCount: 24,
    verification: {
      phoneVerified: true,
      idVerified: true,
      sanitaryVerified: true,
      kitchenVerified: true,
      businessVerified: false,
      topChef: true
    },
    tier: 'pro',
    acceptanceRate: 95,
    responseTime: 5
  },
  {
    id: 'chef2@demo.com',
    email: 'chef2@demo.com',
    name: '–ú—É—Ö–∞–º–º–∞–¥ –ê–ª–∏–µ–≤',
    role: 'chef',
    avatar: '/images/chef2.jpg',
    rating: 4.9,
    reviewsCount: 18,
    verification: {
      phoneVerified: true,
      idVerified: true,
      sanitaryVerified: true,
      kitchenVerified: false,
      businessVerified: true,
      topChef: true
    },
    tier: 'business',
    acceptanceRate: 88,
    responseTime: 3
  },
  {
    id: 'chef3@demo.com',
    email: 'chef3@demo.com',
    name: '–ì—É–ª—å–Ω–∞—Ä–∞ –•–∞–∫–∏–º–æ–≤–∞',
    role: 'chef',
    avatar: '/images/chef3.jpg',
    rating: 4.7,
    reviewsCount: 35,
    verification: {
      phoneVerified: true,
      idVerified: false,
      sanitaryVerified: false,
      kitchenVerified: false,
      businessVerified: false,
      topChef: false
    },
    tier: 'free',
    acceptanceRate: 72,
    responseTime: 8
  }
];

function demoRead(chefId) {
  try {
    const raw = localStorage.getItem(demoKey(chefId));
    const parsed = raw ? JSON.parse(raw) : [];
    return Array.isArray(parsed) ? parsed : [];
  } catch {
    return [];
  }
}

function demoWrite(chefId, dishes) {
  try {
    localStorage.setItem(demoKey(chefId), JSON.stringify(dishes || []));
  } catch {}
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä–∞
export function getChefData(chefId) {
  return new Promise((resolve) => {
    setTimeout(() => {
      const chef = demoChefs.find(c => c.id === chefId);
      if (chef) {
        resolve(chef);
      } else {
        // –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤–∞—Ä–∞
        const newChef = {
          id: chefId,
          email: chefId,
          name: chefId.split('@')[0],
          role: 'chef',
          avatar: '/images/default-chef.jpg',
          rating: 0,
          reviewsCount: 0,
          verification: {
            phoneVerified: false,
            idVerified: false,
            sanitaryVerified: false,
            kitchenVerified: false,
            businessVerified: false,
            topChef: false
          },
          tier: 'free',
          acceptanceRate: 0,
          responseTime: 0
        };
        resolve(newChef);
      }
    }, 500);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≤–∞—Ä—É
function createChefNotification(order) {
  try {
    const notifications = JSON.parse(localStorage.getItem('chefNotifications') || '[]');
    
    // –ù–∞—Ö–æ–¥–∏–º chefId –∏–∑ –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ)
    let chefId = 'demo-chef-1';
    if (order.items && order.items.length > 0) {
      chefId = order.items[0].chefId || order.items[0].chefEmail || 'demo-chef-1';
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ chefId –≤ —Ç–æ–≤–∞—Ä–∞—Ö, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–∞–º–æ–º –∑–∞–∫–∞–∑–µ
    if (chefId === 'demo-chef-1' && order.chefId) {
      chefId = order.chefId;
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
    const itemsList = order.items ? order.items.map(item => 
      `‚Ä¢ ${item.name} (${item.quantity} —à—Ç.) - ${item.price}‚ÇΩ`
    ).join('\n') : '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π';
    
    const clientInfo = order.customer?.name ? `–ö–ª–∏–µ–Ω—Ç: ${order.customer.name}` : '–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω';
    const deliveryInfo = order.customer?.address ? `–ê–¥—Ä–µ—Å: ${order.customer.address}` : '–°–∞–º–æ–≤—ã–≤–æ–∑';
    const deliveryTimeInfo = order.delivery ? 
      `–î–æ—Å—Ç–∞–≤–∫–∞: ${order.delivery.date} –≤ ${order.delivery.time}` : 
      '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const notification = {
      id: `notification-${Date.now()}`,
      type: 'newOrder',
      title: 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!',
      message: `–ó–∞–∫–∞–∑ #${order.id}\n${clientInfo}\n${deliveryInfo}\n${deliveryTimeInfo}\n\n–ë–ª—é–¥–∞:\n${itemsList}\n\n–û–±—â–∞—è —Å—É–º–º–∞: ${order.total}‚ÇΩ`,
      time: new Date(),
      read: false,
      icon: 'üÜï',
      orderId: order.id,
      chefId: chefId,
      orderDetails: {
        clientName: order.customer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        clientPhone: order.customer?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        deliveryAddress: order.customer?.address || '–°–∞–º–æ–≤—ã–≤–æ–∑',
        deliveryDate: order.delivery?.date || null,
        deliveryTime: order.delivery?.time || null,
        paymentMethod: order.payment?.method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        paymentStatus: order.payment?.status || 'pending',
        comment: order.comment || null,
        specialInstructions: order.specialInstructions || null,
        items: order.items || [],
        total: order.total || 0,
        status: order.status || 'pending_confirmation'
      }
    };
    
    notifications.unshift(notification); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
    const limitedNotifications = notifications.slice(0, 50);
    
    localStorage.setItem('chefNotifications', JSON.stringify(limitedNotifications));
    
    console.log('Created chef notification:', notification);
  } catch (error) {
    console.error('Error creating chef notification:', error);
  }
}

export async function getChefMenu(chefId, categoryId) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞
  if (!API_BASE_URL || API_BASE_URL === "") {
    const all = demoRead(chefId);
    const filtered = categoryId ? all.filter(d => d.category_id === categoryId) : all;
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          categories: Categories,
          dishes: filtered,
        });
      }, 200);
    });
  }
  
  const qs = new URLSearchParams();
  if (categoryId) qs.set("category_id", categoryId);
  const path = `/api/chefs/${encodeURIComponent(chefId)}/menu${qs.toString() ? `?${qs.toString()}` : ""}`;
  return apiRequest(path, { method: "GET" });
}

export async function createDish(chefId, dish) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞
  if (!API_BASE_URL || API_BASE_URL === "") {
    return new Promise((resolve) => {
      setTimeout(() => {
        const id = `dish-${Date.now()}`;
        const now = new Date().toISOString();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FormData –µ—Å–ª–∏ —ç—Ç–æ FormData
        let dishData = dish;
        if (dish instanceof FormData) {
          dishData = {};
          for (let [key, value] of dish.entries()) {
            if (key === 'photo' && value instanceof File) {
              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              dishData.photo = URL.createObjectURL(value);
            } else {
              dishData[key] = value;
            }
          }
        }
        
        const newDish = { 
          id, 
          category: dishData.category_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º category –≤–º–µ—Å—Ç–æ category_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          category_id: dishData.category_id, 
          name: dishData.name, 
          description: dishData.description, 
          price: dishData.price,
          photo: dishData.photo || null,
          image: dishData.photo || null, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          ingredients: dishData.ingredients || null,
          calories: dishData.calories || null,
          protein: dishData.protein || null,
          carbs: dishData.carbs || null,
          fat: dishData.fat || null,
          // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
          sugar: dishData.sugar || null,
          glycemicIndex: dishData.glycemicIndex || null,
          sugarSubstitutes: dishData.sugarSubstitutes || false,
          diabeticFriendly: dishData.diabeticFriendly || false,
          before_photo: dishData.before_photo || null,
          after_photo: dishData.after_photo || null,
          is_client_products: dishData.is_client_products || false,
          chef: '–ü–æ–≤–∞—Ä', // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤–∞—Ä–µ
          chefId: chefId, // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–≤–∞—Ä–∞
          chefName: localStorage.getItem('chefName') || localStorage.getItem('chefEmail') || '–ü–æ–≤–∞—Ä', // –ò–º—è –ø–æ–≤–∞—Ä–∞
          chefSpecialization: localStorage.getItem('chefSpecialization') || 'general', // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
          chefExperience: localStorage.getItem('chefExperience') || '0', // –û–ø—ã—Ç
          chefEmail: localStorage.getItem('chefEmail') || chefId, // Email –ø–æ–≤–∞—Ä–∞
          chefAvatar: localStorage.getItem('chefAvatar') || null, // –ê–≤–∞—Ç–∞—Ä –ø–æ–≤–∞—Ä–∞
          createdAt: now, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
          updatedAt: now, // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          rating: 0, // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
          orders: 0 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        };
        const current = demoRead(chefId);
        demoWrite(chefId, [...current, newDish]);
        resolve({ id, category_id: dishData.category_id });
      }, 500);
    });
  }
  
  const path = `/api/chefs/${encodeURIComponent(chefId)}/dishes`;
  return apiRequest(path, { method: "POST", body: dish instanceof FormData ? dish : JSON.stringify(dish) });
}

export async function deleteDish(chefId, dishId) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞
  if (!API_BASE_URL || API_BASE_URL === "") {
    return new Promise((resolve) => {
      setTimeout(() => {
        const current = demoRead(chefId);
        demoWrite(chefId, current.filter(d => d.id !== dishId));
        resolve({ success: true });
      }, 200);
    });
  }
  
  const path = `/api/chefs/${encodeURIComponent(chefId)}/dishes/${encodeURIComponent(dishId)}`;
  return apiRequest(path, { method: "DELETE" });
}

export async function updateDish(chefId, dishId, updates) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞
  if (!API_BASE_URL || API_BASE_URL === "") {
    return new Promise((resolve) => {
      setTimeout(() => {
        const current = demoRead(chefId);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FormData –µ—Å–ª–∏ —ç—Ç–æ FormData
        let updateData = updates;
        if (updates instanceof FormData) {
          updateData = {};
          for (let [key, value] of updates.entries()) {
            if (key === 'photo' && value instanceof File) {
              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              updateData.photo = URL.createObjectURL(value);
            } else {
              updateData[key] = value;
            }
          }
        }
        
        const next = current.map(d => d.id === dishId ? { ...d, ...updateData } : d);
        demoWrite(chefId, next);
        resolve({ id: dishId, ...updateData });
      }, 200);
    });
  }
  
  const path = `/api/chefs/${encodeURIComponent(chefId)}/dishes/${encodeURIComponent(dishId)}`;
  return apiRequest(path, { method: "PUT", body: updates instanceof FormData ? updates : JSON.stringify(updates) });
}

export const Categories = [
  { id: "halal", name: "–•–∞–ª—è–ª—å –º–µ–Ω—é" },
  { id: "main", name: "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞" },
  { id: "semi-finished", name: "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã" },
  { id: "bakery", name: "–í—ã–ø–µ—á–∫–∞" },
  { id: "tatar", name: "–¢–∞—Ç–∞—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è" },
  { id: "soups", name: "–°—É–ø—ã" },
  { id: "salads", name: "–°–∞–ª–∞—Ç—ã" },
  { id: "desserts", name: "–î–µ—Å–µ—Ä—Ç—ã" },
  { id: "beverages", name: "–ù–∞–ø–∏—Ç–∫–∏ –∏ —á–∞–π" },
  { id: "diet", name: "–î–∏–µ—Ç –º–µ–Ω—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º" },
  { id: "client_cook", name: "–ì–æ—Ç–æ–≤–∫–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞" },
  { id: "master_class", name: "–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å" },
  { id: "help_guest", name: "–ü–æ–º–æ—â—å –≤ –≥–æ—Ç–æ–≤–∫–µ –¥–æ –ø—Ä–∏–µ–∑–¥–∞ –≥–æ—Å—Ç–µ–π" },
  { id: "preparations", name: "–ó–∞–≥–æ—Ç–æ–≤–∫–∏" },
  { id: "brand-products", name: "–ë—Ä–µ–Ω–¥-—Ç–æ–≤–∞—Ä—ã" },
];

// Auth APIs (assumed)
// –í–∞–ª–∏–¥–∞—Ü–∏—è email
const validateEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export async function login(email, password, role = 'chef') {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!email || !password) {
    throw new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }
  
  if (!validateEmail(email)) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
  }
  
  if (!API_BASE_URL || API_BASE_URL === "") {
    // Demo login for testing
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (role === 'client') {
          // Demo client login
          const savedClientData = localStorage.getItem('clientData');
          if (savedClientData) {
            const clientData = JSON.parse(savedClientData);
            if (clientData.email === email) {
              resolve({ 
                success: true, 
                token: `demo-client-token-${Date.now()}`,
                clientId: email,
                role: 'client'
              });
            } else {
              reject(new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"));
            }
          } else {
            reject(new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞."));
          }
        } else {
          // Demo chef login
          // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–≤–∞—Ä–æ–≤
          const testChefs = [
            { email: 'chef@test.com', password: 'password123' },
            { email: 'chef1@demo.com', password: 'password123' },
            { email: 'chef2@demo.com', password: 'password123' },
            { email: 'chef3@demo.com', password: 'password123' },
          ];
          
          const testChef = testChefs.find(chef => chef.email === email && chef.password === password);
          
          if (testChef) {
            // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
            localStorage.setItem("chefEmail", email);
            localStorage.setItem("chefPassword", password);
            const result = { 
              success: true, 
              token: `demo-chef-token-${Date.now()}`,
              chefId: email,
              role: 'chef'
            };
            resolve(result);
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const savedEmail = localStorage.getItem("chefEmail");
            const savedPassword = localStorage.getItem("chefPassword");
            if (email === savedEmail && password === savedPassword) {
              const result = { 
                success: true, 
                token: `demo-chef-token-${Date.now()}`,
                chefId: email,
                role: 'chef'
              };
              resolve(result);
            } else {
              reject(new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"));
            }
          }
        }
      }, 500);
    });
  }
  
  return apiRequest(`/api/auth/login`, {
    method: "POST",
    body: JSON.stringify({ email, password, role })
  });
}

export async function register(userData) {
  if (!API_BASE_URL || API_BASE_URL === "") {
    // Demo registration
    console.log("DEMO: Register", userData);
    return new Promise((resolve) => {
      setTimeout(() => {
        if (userData.role === 'client') {
          // Save client data
          localStorage.setItem('clientData', JSON.stringify({
            name: userData.name,
            email: userData.email,
            phone: userData.phone,
            address: userData.address
          }));
        } else {
          // Save chef data
          localStorage.setItem("chefEmail", userData.email);
          localStorage.setItem("chefPassword", userData.password);
          if (userData.avatar) {
            localStorage.setItem("chefAvatar", userData.avatar);
          }
        }
        resolve({ success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" });
      }, 500);
    });
  }
  
  return apiRequest(`/api/auth/register`, {
    method: "POST",
    body: JSON.stringify(userData)
  });
}

export async function getProfile() {
  if (!API_BASE_URL || API_BASE_URL === "") {
    console.log("DEMO: Get Profile");
    return new Promise((resolve) => {
      setTimeout(() => {
        const role = localStorage.getItem("role");
        if (role === 'client') {
          const clientData = JSON.parse(localStorage.getItem('clientData') || '{}');
          resolve({
            id: localStorage.getItem("clientId") || "demo-client",
            email: clientData.email || "demo@client.com",
            role: "client",
            name: clientData.name || "Demo Client"
          });
        } else {
          resolve({
            id: localStorage.getItem("chefId") || "demo-chef",
            email: localStorage.getItem("chefEmail") || "demo@chef.com",
            role: localStorage.getItem("role") || "Chef",
          });
        }
      }, 300);
    });
  }
  return apiRequest(`/api/me`, { method: "GET" });
}

// Client APIs
export async function getAvailableDishes(category = null) {
  if (!API_BASE_URL || API_BASE_URL === "") {
    console.log("DEMO: Get Available Dishes", category ? `for category: ${category}` : '');
    return new Promise((resolve) => {
      setTimeout(() => {
        // Get all dishes from all chefs
        const allDishes = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && key.startsWith('demo_menu_')) {
            try {
              const chefDishes = JSON.parse(localStorage.getItem(key));
              // Extract chefId from key (demo_menu_chefId)
              const chefId = key.replace('demo_menu_', '');
              // Add chefId to each dish if it doesn't have one
              const dishesWithChefId = chefDishes.map(dish => ({
                ...dish,
                chefId: dish.chefId || chefId
              }));
              allDishes.push(...dishesWithChefId);
            } catch (e) {
              console.error('Error parsing dishes for key:', key);
            }
          }
        }
        
        // Add some demo dishes if none exist
        if (allDishes.length === 0) {
          const demoDishes = [
            {
              id: 'demo-dish-1',
              name: '–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
              description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–º–µ—Ç–∞–Ω–æ–π',
              price: 350,
              category: 'russian',
              category_id: 'russian',
              cookingTime: 90,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.5,
              // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
              allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'],
              weight: '400–≥',
              portionSize: '1 –ø–æ—Ä—Ü–∏—è',
              shelfLife: '24 —á–∞—Å–∞',
              ingredients: ['–≥–æ–≤—è–¥–∏–Ω–∞', '—Å–≤–µ–∫–ª–∞', '–∫–∞–ø—É—Å—Ç–∞', '–º–æ—Ä–∫–æ–≤—å', '–ª—É–∫', '—Å–º–µ—Ç–∞–Ω–∞'],
              nutritionalValue: {
                calories: 280,
                protein: 18,
                fat: 12,
                carbs: 25
              }
            },
            {
              id: 'demo-dish-2',
              name: '–ü–ª–æ–≤ —É–∑–±–µ–∫—Å–∫–∏–π',
              description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–æ–≤ —Å –±–∞—Ä–∞–Ω–∏–Ω–æ–π –∏ –º–æ—Ä–∫–æ–≤—å—é',
              price: 450,
              category: 'tatar',
              category_id: 'tatar',
              cookingTime: 120,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
              allergens: ['–≥–ª—é—Ç–µ–Ω'],
              weight: '500–≥',
              portionSize: '1 –ø–æ—Ä—Ü–∏—è',
              shelfLife: '48 —á–∞—Å–æ–≤',
              ingredients: ['–±–∞—Ä–∞–Ω–∏–Ω–∞', '—Ä–∏—Å', '–º–æ—Ä–∫–æ–≤—å', '–ª—É–∫', '—á–µ—Å–Ω–æ–∫', '—Å–ø–µ—Ü–∏–∏'],
              nutritionalValue: {
                calories: 420,
                protein: 25,
                fat: 18,
                carbs: 35
              }
            },
            {
              id: 'demo-dish-3',
              name: '–≠—á–ø–æ—á–º–∞–∫',
              description: '–¢–∞—Ç–∞—Ä—Å–∫–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏ —Å –º—è—Å–æ–º –∏ –∫–∞—Ä—Ç–æ—à–∫–æ–π',
              price: 180,
              category: 'tatar',
              category_id: 'tatar',
              cookingTime: 45,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
              allergens: ['–≥–ª—é—Ç–µ–Ω'],
              weight: '150–≥',
              portionSize: '3 —à—Ç—É–∫–∏',
              shelfLife: '12 —á–∞—Å–æ–≤',
              ingredients: ['–º—É–∫–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–ª—É–∫', '—Å–ø–µ—Ü–∏–∏'],
              nutritionalValue: {
                calories: 320,
                protein: 15,
                fat: 12,
                carbs: 35
              }
            },
            {
              id: 'demo-dish-4',
              name: '–ë–µ—à–±–∞—Ä–º–∞–∫',
              description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ç–∞—Ç–∞—Ä—Å–∫–æ–µ –±–ª—é–¥–æ —Å –ª–∞–ø—à–æ–π –∏ –º—è—Å–æ–º',
              price: 520,
              category: 'tatar',
              category_id: 'tatar',
              cookingTime: 150,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
              allergens: ['–≥–ª—é—Ç–µ–Ω'],
              weight: '600–≥',
              portionSize: '1 –ø–æ—Ä—Ü–∏—è',
              shelfLife: '24 —á–∞—Å–∞',
              ingredients: ['–ª–∞–ø—à–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '–ª—É–∫', '—Å–ø–µ—Ü–∏–∏'],
              nutritionalValue: {
                calories: 480,
                protein: 28,
                fat: 20,
                carbs: 45
              }
            },
            {
              id: 'demo-dish-5',
              name: '–ß–∞–∫-—á–∞–∫',
              description: '–°–ª–∞–¥–∫–æ–µ —Ç–∞—Ç–∞—Ä—Å–∫–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–µ–¥–æ–º',
              price: 200,
              category: 'tatar',
              category_id: 'tatar',
              cookingTime: 60,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
              allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–µ–¥'],
              weight: '200–≥',
              portionSize: '1 –ø–æ—Ä—Ü–∏—è',
              shelfLife: '7 –¥–Ω–µ–π',
              ingredients: ['–º—É–∫–∞', '–º–µ–¥', '—Å–∞—Ö–∞—Ä', '–º–∞—Å–ª–æ'],
              nutritionalValue: {
                calories: 380,
                protein: 8,
                fat: 15,
                carbs: 55
              }
            },
            {
              id: 'demo-dish-6',
              name: '–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π',
              description: '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π, —Å—É—Ö–∞—Ä–∏–∫–∞–º–∏ –∏ —Å–æ—É—Å–æ–º —Ü–µ–∑–∞—Ä—å',
              price: 280,
              category: 'european',
              category_id: 'european',
              cookingTime: 15,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.2
            },
            {
              id: 'demo-dish-7',
              name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
              description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π',
              price: 420,
              category: 'european',
              category_id: 'european',
              cookingTime: 25,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.7
            },
            {
              id: 'demo-dish-8',
              name: '–©–∏ —Ä—É—Å—Å–∫–∏–µ',
              description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —â–∏ —Å –∫–∞–ø—É—Å—Ç–æ–π',
              price: 320,
              category: 'russian',
              category_id: 'russian',
              cookingTime: 75,
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.7
            },
            // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª—é–¥–∞
            {
              id: 'demo-diabetic-1',
              name: '–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π',
              description: '–°–≤–µ–∂–∏–µ –ø–æ–º–∏–¥–æ—Ä—ã, –æ–≥—É—Ä—Ü—ã, –∑–µ–ª–µ–Ω—å —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º',
              price: 180,
              category: 'salads',
              category_id: 'salads',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
              carbs: 8,
              sugar: 6,
              glycemicIndex: 15,
              sugarSubstitutes: false,
              diabeticFriendly: true,
              calories: 45,
              protein: 2,
              fat: 3
            },
            {
              id: 'demo-diabetic-2',
              name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –Ω–∞ –ø–∞—Ä—É',
              description: '–ù–µ–∂–Ω–∞—è –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ç—Ä–∞–≤–∞–º–∏, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –ø–∞—Ä—É',
              price: 320,
              category: 'main',
              category_id: 'main',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.6,
              // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
              carbs: 0,
              sugar: 0,
              glycemicIndex: 0,
              sugarSubstitutes: false,
              diabeticFriendly: true,
              calories: 165,
              protein: 31,
              fat: 3.6
            },
            {
              id: 'demo-diabetic-3',
              name: '–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞',
              description: '–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –∑–∞–º–µ–Ω–∏—Ç–µ–ª–µ–º —Å–∞—Ö–∞—Ä–∞ –∏ —è–≥–æ–¥–∞–º–∏',
              price: 250,
              category: 'desserts',
              category_id: 'desserts',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.4,
              // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
              carbs: 12,
              sugar: 3,
              glycemicIndex: 25,
              sugarSubstitutes: true,
              diabeticFriendly: true,
              calories: 120,
              protein: 15,
              fat: 2
            },
            {
              id: 'demo-diabetic-4',
              name: '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å –æ–≤–æ—â–∞–º–∏',
              description: '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å —Ç—É—à–µ–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏ –∏ –∑–µ–ª–µ–Ω—å—é',
              price: 200,
              category: 'main',
              category_id: 'main',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.3,
              // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
              carbs: 35,
              sugar: 8,
              glycemicIndex: 50,
              sugarSubstitutes: false,
              diabeticFriendly: true,
              calories: 180,
              protein: 6,
              fat: 4
            },
            // –ì–æ—Ç–æ–≤–∫–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            {
              id: 'demo-client-cook-1',
              name: '–ì–æ—Ç–æ–≤–∫–∞ —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏',
              description: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é –±–ª—é–¥–æ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –±–ª—é–¥–æ.',
              price: 0, // –¶–µ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
              category: 'client_cook',
              category_id: 'client_cook',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
              clientCooking: true,
              customPrice: true,
              requiresProducts: true,
              estimatedTime: '2-4 —á–∞—Å–∞',
              minOrderValue: 500
            },
            {
              id: 'demo-client-cook-2',
              name: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≥–æ—Ç–æ–≤–∫–∏',
              description: '–ù–∞—É—á—É –≥–æ—Ç–æ–≤–∏—Ç—å —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –≥–æ—Ç–æ–≤–∏–º –≤–º–µ—Å—Ç–µ!',
              price: 0,
              category: 'client_cook',
              category_id: 'client_cook',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              clientCooking: true,
              customPrice: true,
              requiresProducts: true,
              estimatedTime: '3-5 —á–∞—Å–æ–≤',
              minOrderValue: 800,
              isMasterClass: true
            },
            {
              id: 'demo-client-cook-3',
              name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≥–æ—Ç–æ–≤–∫–µ',
              description: '–ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.',
              price: 0,
              category: 'client_cook',
              category_id: 'client_cook',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.7,
              clientCooking: true,
              customPrice: true,
              requiresProducts: true,
              estimatedTime: '1-2 —á–∞—Å–∞',
              minOrderValue: 300,
              isConsultation: true
            }
          ];
          allDishes.push(...demoDishes);
        }
        
        // Always add client_cook demo dishes if requesting that category
        if (category === 'client_cook') {
          const clientCookDishes = [
            {
              id: 'demo-client-cook-1',
              name: '–ì–æ—Ç–æ–≤–∫–∞ —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏',
              description: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é –±–ª—é–¥–æ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –±–ª—é–¥–æ.',
              price: 0,
              category: 'client_cook',
              category_id: 'client_cook',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              clientCooking: true,
              customPrice: true,
              requiresProducts: true,
              estimatedTime: '2-4 —á–∞—Å–∞',
              minOrderValue: 500
            },
            {
              id: 'demo-client-cook-2',
              name: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≥–æ—Ç–æ–≤–∫–∏',
              description: '–ù–∞—É—á—É –≥–æ—Ç–æ–≤–∏—Ç—å —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –≥–æ—Ç–æ–≤–∏–º –≤–º–µ—Å—Ç–µ!',
              price: 0,
              category: 'client_cook',
              category_id: 'client_cook',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              clientCooking: true,
              customPrice: true,
              requiresProducts: true,
              estimatedTime: '3-5 —á–∞—Å–æ–≤',
              minOrderValue: 800,
              isMasterClass: true
            },
            {
              id: 'demo-client-cook-3',
              name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≥–æ—Ç–æ–≤–∫–µ',
              description: '–ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.',
              price: 0,
              category: 'client_cook',
              category_id: 'client_cook',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.7,
              clientCooking: true,
              customPrice: true,
              requiresProducts: true,
              estimatedTime: '1-2 —á–∞—Å–∞',
              minOrderValue: 300,
              isConsultation: true
            }
          ];
          allDishes.push(...clientCookDishes);
        }
        
        // Always add help_guest demo dishes if requesting that category
        if (category === 'help_guest') {
          const helpGuestDishes = [
            {
              id: 'demo-help-guest-1',
              name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–µ–º—É –≥–æ—Å—Ç–µ–π',
              description: '–ü–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞ –∫ –ø—Ä–∏–µ–∑–¥—É –≥–æ—Å—Ç–µ–π. –†–∞—Å—Å—á–∏—Ç–∞—é –≤—Ä–µ–º—è, —Å–æ—Å—Ç–∞–≤–ª—é –ø–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏, –ø–æ–º–æ–≥—É —Å —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–æ–π.',
              price: 0,
              category: 'help_guest',
              category_id: 'help_guest',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              helpGuest: true,
              customPrice: true,
              estimatedTime: '2-6 —á–∞—Å–æ–≤',
              minOrderValue: 1000,
              maxGuests: 20,
              includesPlanning: true,
              includesServing: true
            },
            {
              id: 'demo-help-guest-2',
              name: '–≠–∫—Å–ø—Ä–µ—Å—Å-–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
              description: '–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø—Ä–∏–µ–º—É. –ë—ã—Å—Ç—Ä–æ –Ω–∞–∫—Ä–æ–µ–º —Å—Ç–æ–ª –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞.',
              price: 0,
              category: 'help_guest',
              category_id: 'help_guest',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.6,
              helpGuest: true,
              customPrice: true,
              estimatedTime: '1-3 —á–∞—Å–∞',
              minOrderValue: 800,
              maxGuests: 10,
              isExpress: true,
              includesPlanning: false,
              includesServing: true
            },
            {
              id: 'demo-help-guest-3',
              name: '–ü–æ–ª–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–æ—Å—Ç–µ–π',
              description: '–ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –º–µ–Ω—é, –∑–∞–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≥–æ—Ç–æ–≤–∫–∞, —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–∞, —É–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –≥–æ—Å—Ç–µ–π.',
              price: 0,
              category: 'help_guest',
              category_id: 'help_guest',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              helpGuest: true,
              customPrice: true,
              estimatedTime: '4-8 —á–∞—Å–æ–≤',
              minOrderValue: 2000,
              maxGuests: 30,
              isFullService: true,
              includesPlanning: true,
              includesServing: true,
              includesCleanup: true
            }
          ];
          allDishes.push(...helpGuestDishes);
        }
        
        // Always add master_class demo dishes if requesting that category
        if (category === 'master_class') {
          const masterClassDishes = [
            {
              id: 'demo-master-class-1',
              name: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –∫—É—Ö–Ω–µ',
              description: '–ù–∞—É—á–∏–º –≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞—Ç–∞—Ä—Å–∫–∏–µ –±–ª—é–¥–∞: —ç—á–ø–æ—á–º–∞–∫, –∫—ã—Å—Ç—ã–±—ã–π, —á–∞–∫-—á–∞–∫. –ò–∑—É—á–∏–º —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫—É—Ö–Ω–∏.',
              price: 0,
              category: 'master_class',
              category_id: 'master_class',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              masterClass: true,
              customPrice: true,
              estimatedTime: '3-4 —á–∞—Å–∞',
              minOrderValue: 1500,
              maxParticipants: 8,
              difficulty: '–°—Ä–µ–¥–Ω–∏–π',
              cuisine: '–¢–∞—Ç–∞—Ä—Å–∫–∞—è',
              includesIngredients: true,
              includesRecipe: true,
              includesCertificate: true
            },
            {
              id: 'demo-master-class-2',
              name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ –≤—ã–ø–µ—á–∫–∏',
              description: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —Ö–ª–µ–±–∞, –ø–∏—Ä–æ–≥–æ–≤ –∏ –¥–µ—Å–µ—Ä—Ç–æ–≤. –ò–∑—É—á–∏–º —Ä–∞–±–æ—Ç—É —Å –¥—Ä–æ–∂–∂–µ–≤—ã–º —Ç–µ—Å—Ç–æ–º –∏ –±–µ–∑–¥—Ä–æ–∂–∂–µ–≤–æ–π –≤—ã–ø–µ—á–∫–æ–π.',
              price: 0,
              category: 'master_class',
              category_id: 'master_class',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.8,
              masterClass: true,
              customPrice: true,
              estimatedTime: '4-5 —á–∞—Å–æ–≤',
              minOrderValue: 2000,
              maxParticipants: 6,
              difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
              cuisine: '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è',
              includesIngredients: true,
              includesRecipe: true,
              includesCertificate: true,
              isBaking: true
            },
            {
              id: 'demo-master-class-3',
              name: '–û—Å–Ω–æ–≤—ã –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
              description: '–ë–∞–∑–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å. –ù–∞—É—á–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ—Ö–Ω–∏–∫–∞–º, —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–∂–æ–º, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —Å–æ—É—Å–æ–≤.',
              price: 0,
              category: 'master_class',
              category_id: 'master_class',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.7,
              masterClass: true,
              customPrice: true,
              estimatedTime: '2-3 —á–∞—Å–∞',
              minOrderValue: 1000,
              maxParticipants: 10,
              difficulty: '–ù–∞—á–∞–ª—å–Ω—ã–π',
              cuisine: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
              includesIngredients: true,
              includesRecipe: true,
              includesCertificate: true,
              isBasic: true
            },
            {
              id: 'demo-master-class-4',
              name: '–°–µ–∫—Ä–µ—Ç—ã –≤–æ—Å—Ç–æ—á–Ω–æ–π –∫—É—Ö–Ω–∏',
              description: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –±–ª—é–¥ –≤–æ—Å—Ç–æ—á–Ω–æ–π –∫—É—Ö–Ω–∏: –ø–ª–æ–≤, –º–∞–Ω—Ç—ã, —Å–∞–º—Å–∞. –ò–∑—É—á–∏–º —Å–ø–µ—Ü–∏–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏.',
              price: 0,
              category: 'master_class',
              category_id: 'master_class',
              image: null,
              chef: '–î–µ–º–æ –ø–æ–≤–∞—Ä',
              chefId: 'demo-chef-1',
              rating: 4.9,
              masterClass: true,
              customPrice: true,
              estimatedTime: '3-4 —á–∞—Å–∞',
              minOrderValue: 1800,
              maxParticipants: 8,
              difficulty: '–°—Ä–µ–¥–Ω–∏–π',
              cuisine: '–í–æ—Å—Ç–æ—á–Ω–∞—è',
              includesIngredients: true,
              includesRecipe: true,
              includesCertificate: true,
              isEastern: true
            }
          ];
          allDishes.push(...masterClassDishes);
        }
        
        // Filter by category if specified
        let filteredDishes = allDishes;
        if (category) {
          console.log('=== FILTERING DISHES ===');
          console.log('Category to filter:', category);
          console.log('All dishes before filter:', allDishes.length);
          console.log('Sample dishes:', allDishes.slice(0, 3).map(d => ({ id: d.id, name: d.name, category: d.category, category_id: d.category_id })));
          
          filteredDishes = allDishes.filter(dish => {
            const matches = dish.category === category || dish.category_id === category;
            if (category === 'client_cook' && matches) {
              console.log('Found client_cook dish:', dish.name);
            }
            return matches;
          });
          
          console.log('Filtered dishes count:', filteredDishes.length);
          console.log('Filtered dishes:', filteredDishes.map(d => ({ id: d.id, name: d.name, category: d.category, category_id: d.category_id })));
        }
        
        resolve({
          success: true,
          dishes: filteredDishes
        });
      }, 500);
    });
  }
  
  return apiRequest(`/api/dishes${category ? `?category=${category}` : ''}`, { method: "GET" });
}

export async function placeOrder(orderData) {
  if (!API_BASE_URL || API_BASE_URL === "") {
    console.log("DEMO: Place Order", orderData);
    return new Promise((resolve) => {
      setTimeout(() => {
        const orderId = `order-${Date.now()}`;
        // –ü–æ–ª—É—á–∞–µ–º chefId –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π chefId
        let chefId = 'demo-chef-1';
        if (orderData.items && orderData.items.length > 0) {
          chefId = orderData.items[0].chefId || orderData.items[0].chefEmail || 'demo-chef-1';
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ chefId –≤ —Ç–æ–≤–∞—Ä–∞—Ö, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–∞–º–æ–º –∑–∞–∫–∞–∑–µ
        if (chefId === 'demo-chef-1' && orderData.chefId) {
          chefId = orderData.chefId;
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ demo-chef-1, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π chefId –∏–∑ localStorage
        if (chefId === 'demo-chef-1') {
          const currentChefId = localStorage.getItem('chefId');
          if (currentChefId) {
            chefId = currentChefId;
          }
        }

        const order = {
          id: orderId,
          ...orderData,
          chefId: chefId, // –î–æ–±–∞–≤–ª—è–µ–º chefId –≤ –∑–∞–∫–∞–∑
          status: orderData.status || 'pending_confirmation',
          createdAt: new Date().toISOString(),
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—É–º–º
          itemsTotal: orderData.subtotal || 0,
          deliveryFee: orderData.deliveryCost || 0,
          discount: orderData.discount || 0,
          total: orderData.payment.total || 0,
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          transaction: {
            totalAmount: orderData.payment.total,
            commission: orderData.payment.commission || 0,
            chefAmount: orderData.payment.chefAmount || orderData.payment.total,
            status: 'reserved', // –î–µ–Ω—å–≥–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã
            paymentMethod: orderData.payment.method
          }
        };
        
        // Save order to localStorage with size limit
        const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
        orders.push(order);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
        safeSetClientOrders(orders);
        
        // Create notification for chef
        createChefNotification(order);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (window.socket && window.socket.connected) {
          window.socket.emit('newOrder', {
            orderId: order.id,
            chefId: chefId,
            clientId: order.customer?.id || 'unknown',
            status: order.status,
            timestamp: new Date().toISOString()
          });
        }
        
        resolve({
          success: true,
          order: order,
          message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω'
        });
      }, 1000);
    });
  }
  
  return apiRequest(`/api/orders`, {
    method: "POST",
    body: JSON.stringify(orderData)
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
export const getFarmersMarketProducts = async (category = null) => {
  console.log('DEMO: Get Farmers Market Products for category:', category);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä–∞–º–∏
  const chefProducts = [];
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ localStorage, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chef_products_'
    const allKeys = Object.keys(localStorage);
    const chefProductKeys = allKeys.filter(key => key.startsWith('chef_products_'));
    
    for (const key of chefProductKeys) {
      const products = JSON.parse(localStorage.getItem(key) || '[]');
      chefProducts.push(...products);
    }
    
    console.log('Loaded chef products:', chefProducts);
  } catch (error) {
    console.error('Error loading chef products:', error);
  }
  
  // –î–µ–º–æ –ø—Ä–æ–¥—É–∫—Ç—ã —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
  const demoProducts = [
    {
      id: 'prod-1',
      name: '–°–≤–µ–∂–∏–µ –ø–æ–º–∏–¥–æ—Ä—ã',
      description: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–º–∏–¥–æ—Ä—ã —Å –º–µ—Å—Ç–Ω–æ–π —Ñ–µ—Ä–º—ã',
      price: 120,
      unit: '–∫–≥',
      category: 'vegetables',
      farmer: '–§–µ—Ä–º–∞ "–ó–µ–ª–µ–Ω—ã–π —Å–∞–¥"',
      origin: '–ö–∞–∑–∞–Ω—å, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      available: true,
      seasonal: true,
      organic: true,
      rating: 4.8,
      reviews: 15,
      image: null,
      type: 'product'
    },
    {
      id: 'prod-2',
      name: '–î–æ–º–∞—à–Ω–∏–π —Ç–≤–æ—Ä–æ–≥',
      description: '–°–≤–µ–∂–∏–π —Ç–≤–æ—Ä–æ–≥ –∏–∑ –∫–æ—Ä–æ–≤—å–µ–≥–æ –º–æ–ª–æ–∫–∞',
      price: 180,
      unit: '–∫–≥',
      category: 'dairy',
      farmer: '–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞ "–ë—É—Ä–µ–Ω–∫–∞"',
      origin: '–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      available: true,
      seasonal: false,
      organic: true,
      rating: 4.9,
      reviews: 23,
      image: null,
      type: 'product'
    },
    {
      id: 'prod-3',
      name: '–ú–µ–¥ –ª–∏–ø–æ–≤—ã–π',
      description: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–∏–ø–æ–≤—ã–π –º–µ–¥',
      price: 450,
      unit: '–ª',
      category: 'honey',
      farmer: '–ü–∞—Å–µ–∫–∞ "–ú–µ–¥–æ–≤—ã–π –∫—Ä–∞–π"',
      origin: '–ê—Ä—Å–∫, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      available: true,
      seasonal: true,
      organic: true,
      rating: 5.0,
      reviews: 8,
      image: null,
      type: 'product'
    },
    {
      id: 'prod-4',
      name: '–ú–æ—Ä–∫–æ–≤—å —Å–≤–µ–∂–∞—è',
      description: '–°–≤–µ–∂–∞—è –º–æ—Ä–∫–æ–≤—å —Å –≥—Ä—è–¥–∫–∏',
      price: 80,
      unit: '–∫–≥',
      category: 'vegetables',
      farmer: '–§–µ—Ä–º–∞ "–û–≤–æ—â–Ω–æ–π —Ä–∞–π"',
      origin: '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      available: true,
      seasonal: false,
      organic: false,
      rating: 4.5,
      reviews: 12,
      image: null,
      type: 'product'
    },
    {
      id: 'prod-5',
      name: '–Ø–±–ª–æ–∫–∏ –∞–Ω—Ç–æ–Ω–æ–≤–∫–∞',
      description: '–°–æ—á–Ω—ã–µ —è–±–ª–æ–∫–∏ —Å–æ—Ä—Ç–∞ –∞–Ω—Ç–æ–Ω–æ–≤–∫–∞',
      price: 100,
      unit: '–∫–≥',
      category: 'fruits',
      farmer: '–°–∞–¥ "–Ø–±–ª–æ—á–Ω—ã–π –∫—Ä–∞–π"',
      origin: '–ï–ª–∞–±—É–≥–∞, –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
      available: true,
      seasonal: true,
      organic: true,
      rating: 4.7,
      reviews: 18,
      image: null,
      type: 'product'
    }
  ];
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–µ–º–æ-–ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ø–æ–≤–∞—Ä–æ–≤
  const allProducts = [...demoProducts, ...chefProducts];
  
  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
  if (category) {
    const filteredProducts = allProducts.filter(product => product.category === category);
    console.log('Filtered products for category', category, ':', filteredProducts);
    return filteredProducts;
  }
  
  return allProducts;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
export const createCookingRequest = async (requestData) => {
  console.log('DEMO: Create Cooking Request:', requestData);
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
  const requestId = `cooking-request-${Date.now()}`;
  
  const cookingRequest = {
    id: requestId,
    ...requestData,
    status: 'pending',
    createdAt: new Date().toISOString(),
    estimatedPrice: requestData.cookingPrice || 0
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ localStorage
  const existingRequests = JSON.parse(localStorage.getItem('cookingRequests') || '[]');
  existingRequests.push(cookingRequest);
  localStorage.setItem('cookingRequests', JSON.stringify(existingRequests));
  
  return cookingRequest;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export async function updateOrderStatus(orderId, newStatus, chefId = null) {
  if (!API_BASE_URL || API_BASE_URL === "") {
    console.log("DEMO: Update Order Status", { orderId, newStatus, chefId });
    return new Promise((resolve) => {
      setTimeout(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ localStorage
        const clientOrders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
        const updatedOrders = clientOrders.map(order => 
          order.id === orderId 
            ? { ...order, status: newStatus, updatedAt: new Date().toISOString() }
            : order
        );
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
        safeSetClientOrders(updatedOrders);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const clientNotifications = JSON.parse(localStorage.getItem('clientNotifications') || '[]');
        const notification = {
          id: `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          type: 'orderUpdate',
          title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
          message: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${getStatusText(newStatus)}`,
          orderId: orderId,
          status: newStatus,
          timestamp: new Date().toISOString(),
          read: false
        };
        
        const updatedNotifications = [notification, ...clientNotifications].slice(0, 50);
        localStorage.setItem('clientNotifications', JSON.stringify(updatedNotifications));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
        if (window.socket && window.socket.connected) {
          window.socket.emit('statusUpdate', {
            orderId,
            status: newStatus,
            timestamp: new Date().toISOString(),
            type: 'client'
          });
        }

        resolve({ success: true, orderId, newStatus });
      }, 500);
    });
  }

  // –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
  try {
    const response = await fetch(`${API_BASE_URL}/orders/${orderId}/status`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify({ status: newStatus, chefId })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Error updating order status:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
function getStatusText(status) {
  const statusMap = {
    'pending_confirmation': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ì–æ—Ç–æ–≤',
    'out_for_delivery': '–í –ø—É—Ç–∏',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω'
  };
  return statusMap[status] || status;
}



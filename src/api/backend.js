/**
 * API Client –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Backend
 * Backend: http://localhost:3001/api
 */

const API_BASE_URL = 'http://localhost:3001/api';

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
const getToken = () => {
  return localStorage.getItem('auth_token');
};

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ localStorage
const setToken = (token) => {
  localStorage.setItem('auth_token', token);
};

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
const removeToken = () => {
  localStorage.removeItem('auth_token');
};

// –ë–∞–∑–æ–≤—ã–π fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const fetchAPI = async (endpoint, options = {}) => {
  const token = getToken();
  
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  try {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      ...options,
      headers,
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    return data;
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
};

// ============================================
// AUTH API
// ============================================

export const authAPI = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  register: async (userData) => {
    // –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const headers = {
      'Content-Type': 'application/json',
    };

    console.log('üîç Register request data:', userData);
    console.log('üîç Register URL:', `${API_BASE_URL}/auth/register`);

    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers,
        body: JSON.stringify(userData),
      });

      console.log('üîç Register response status:', response.status);
      console.log('üîç Register response headers:', response.headers);

      const data = await response.json();

      if (!response.ok) {
        console.error('üîç Register error response:', data);
        throw new Error(data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      
      if (data.token) {
        setToken(data.token);
      }
      
      return data;
    } catch (error) {
      console.error('Register API Error:', error);
      throw error;
    }
  },

  // –õ–æ–≥–∏–Ω
  login: async (email, password) => {
    const data = await fetchAPI('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });
    
    if (data.token) {
      setToken(data.token);
    }
    
    return data;
  },

  // –õ–æ–≥–∞—É—Ç
  logout: () => {
    removeToken();
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getMe: async () => {
    return await fetchAPI('/users/me');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  updateProfile: async (profileData) => {
    return await fetchAPI('/users/me', {
      method: 'PUT',
      body: JSON.stringify(profileData),
    });
  },
};

// ============================================
// DISHES API
// ============================================

export const dishesAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞
  getAll: async (params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return await fetchAPI(`/dishes${queryString ? '?' + queryString : ''}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–æ –ø–æ ID
  getById: async (id) => {
    return await fetchAPI(`/dishes/${id}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞
  getPopular: async () => {
    return await fetchAPI('/dishes/popular');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –±–ª—é–¥–∞
  getNew: async () => {
    return await fetchAPI('/dishes/new');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞ –ø–æ–≤–∞—Ä–∞
  getByChef: async (chefId) => {
    return await fetchAPI(`/dishes/chef/${chefId}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –±–ª—é–¥–∞ (–¥–ª—è –ø–æ–≤–∞—Ä–∞)
  getMyDishes: async () => {
    return await fetchAPI('/dishes/my/dishes');
  },

  // –°–æ–∑–¥–∞—Ç—å –±–ª—é–¥–æ (–¥–ª—è –ø–æ–≤–∞—Ä–∞)
  create: async (dishData) => {
    return await fetchAPI('/dishes', {
      method: 'POST',
      body: JSON.stringify(dishData),
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ (–¥–ª—è –ø–æ–≤–∞—Ä–∞)
  update: async (id, dishData) => {
    return await fetchAPI(`/dishes/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(dishData),
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ (–¥–ª—è –ø–æ–≤–∞—Ä–∞)
  delete: async (id) => {
    return await fetchAPI(`/dishes/${id}`, {
      method: 'DELETE',
    });
  },
};

// ============================================
// ORDERS API
// ============================================

export const ordersAPI = {
  // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
  create: async (orderData) => {
    return await fetchAPI('/orders', {
      method: 'POST',
      body: JSON.stringify(orderData),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
  getMyOrders: async () => {
    return await fetchAPI('/orders/my/orders');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–≤–∞—Ä–∞
  getChefOrders: async () => {
    return await fetchAPI('/orders/chef/orders');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  getById: async (id) => {
    return await fetchAPI(`/orders/${id}`);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–¥–ª—è –ø–æ–≤–∞—Ä–∞)
  updateStatus: async (id, status) => {
    return await fetchAPI(`/orders/${id}/status`, {
      method: 'PATCH',
      body: JSON.stringify({ status }),
    });
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
  cancel: async (id) => {
    return await fetchAPI(`/orders/${id}/cancel`, {
      method: 'PATCH',
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  getStats: async () => {
    return await fetchAPI('/orders/stats/overview');
  },
};

// ============================================
// REVIEWS API
// ============================================

export const reviewsAPI = {
  // –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤
  create: async (reviewData) => {
    return await fetchAPI('/reviews', {
      method: 'POST',
      body: JSON.stringify(reviewData),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã
  getAll: async (params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return await fetchAPI(`/reviews${queryString ? '?' + queryString : ''}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ ID
  getById: async (id) => {
    return await fetchAPI(`/reviews/${id}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –æ—Ç–∑—ã–≤—ã
  getMyReviews: async () => {
    return await fetchAPI('/reviews/my/reviews');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤
  update: async (id, reviewData) => {
    return await fetchAPI(`/reviews/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(reviewData),
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤
  delete: async (id) => {
    return await fetchAPI(`/reviews/${id}`, {
      method: 'DELETE',
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
  getStats: async (params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return await fetchAPI(`/reviews/stats/overview${queryString ? '?' + queryString : ''}`);
  },
};

// ============================================
// AI API
// ============================================

export const aiAPI = {
  // –ü—Ä–æ–≥–Ω–æ–∑ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞
  predictDemandElasticity: async (data) => {
    return await fetchAPI('/ai/demand-elasticity', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
  analyzeSocialTrends: async (data) => {
    return await fetchAPI('/ai/social-trends', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–æ–≤ –∏ –∑–∞–¥–µ—Ä–∂–µ–∫
  predictRisks: async (data) => {
    return await fetchAPI('/ai/risk-prediction', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–∞ (Sentiment Analysis)
  analyzeSentiment: async (text, reviewId) => {
    return await fetchAPI('/ai/sentiment-analysis', {
      method: 'POST',
      body: JSON.stringify({ text, reviewId }),
    });
  },

  // –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
  batchAnalyzeSentiment: async (params) => {
    return await fetchAPI('/ai/batch-sentiment-analysis', {
      method: 'POST',
      body: JSON.stringify(params),
    });
  },

  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  getRecommendations: async (limit = 5) => {
    return await fetchAPI(`/ai/recommendations?limit=${limit}`);
  },

  // –ü–æ—Ö–æ–∂–∏–µ –±–ª—é–¥–∞
  getSimilarDishes: async (dishId, limit = 5) => {
    return await fetchAPI(`/ai/similar-dishes?dishId=${dishId}&limit=${limit}`);
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω-—Ñ—É–Ω–∫—Ü–∏–π
export { getToken, setToken, removeToken };

// –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ URL
export { API_BASE_URL };


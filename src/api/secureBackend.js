import { navigateTo } from "../utils/navigation";

const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || "http://localhost:3001/api";

// ‚ùå –£–î–ê–õ–ï–ù–û: localStorage –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
// ‚úÖ –¢–û–ö–ï–ù–´ –¢–ï–ü–ï–†–¨ –í httpOnly cookies (—É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º)

// –ë–∞–∑–æ–≤—ã–π fetch —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π cookies
const fetchAPI = async (endpoint, options = {}) => {
  const headers = {
    "Content-Type": "application/json",
    ...options.headers,
  };

  try {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      ...options,
      headers,
      credentials: "include", // üîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç httpOnly cookies
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    const contentType = response.headers.get("content-type");
    const hasJsonContent =
      contentType && contentType.includes("application/json");

    const data = hasJsonContent ? await response.json() : {};

    if (!response.ok) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401 (Unauthorized)
      if (response.status === 401) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        const refreshed = await refreshAccessToken();
        if (refreshed) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          return fetchAPI(endpoint, options);
        } else {
          // –¢–æ–∫–µ–Ω –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
          navigateTo("/login");
          throw new Error("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞");
        }
      }

      throw new Error(data.message || `–û—à–∏–±–∫–∞ ${response.status}`);
    }

    return data;
  } catch (error) {
    console.error("API Error:", error);

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Sentry (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
    if (window.Sentry) {
      window.Sentry.captureException(error, {
        tags: { api_endpoint: endpoint },
      });
    }

    throw error;
  }
};

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ refresh token
const refreshAccessToken = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/auth/refresh`, {
      method: "POST",
      credentials: "include", // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç refresh token cookie
    });

    return response.ok;
  } catch (error) {
    console.error("Token refresh failed:", error);
    return false;
  }
};

// ============================================
// üîê AUTH API
// ============================================

export const authAPI = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  register: async (userData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(userData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }

      // ‚úÖ –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ cookies —Å–µ—Ä–≤–µ—Ä–æ–º
      return data;
    } catch (error) {
      console.error("Register API Error:", error);
      throw error;
    }
  },

  // –õ–æ–≥–∏–Ω
  login: async (email, password) => {
    const data = await fetchAPI("/auth/login", {
      method: "POST",
      body: JSON.stringify({ email, password }),
    });

    // ‚úÖ –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ cookies —Å–µ—Ä–≤–µ—Ä–æ–º
    return data;
  },

  // –õ–æ–≥–∞—É—Ç
  logout: async () => {
    try {
      await fetchAPI("/auth/logout", {
        method: "POST",
      });

      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      navigateTo("/");
    } catch (error) {
      console.error("Logout error:", error);
      // –†–µ–¥–∏—Ä–µ–∫—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      navigateTo("/");
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getMe: async () => {
    return await fetchAPI("/users/me");
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  updateProfile: async (profileData) => {
    return await fetchAPI("/users/me", {
      method: "PUT",
      body: JSON.stringify(profileData),
    });
  },

  // üîÑ –û–±–Ω–æ–≤–∏—Ç—å access token
  refreshToken: async () => {
    return await refreshAccessToken();
  },
};

// ============================================
// üçΩÔ∏è DISHES API
// ============================================

export const dishesAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞
  getAll: async (params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return await fetchAPI(`/dishes${queryString ? "?" + queryString : ""}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–æ –ø–æ ID
  getById: async (id) => {
    return await fetchAPI(`/dishes/${id}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞
  getPopular: async () => {
    return await fetchAPI("/dishes/popular");
  },

  // –°–æ–∑–¥–∞—Ç—å –±–ª—é–¥–æ
  create: async (dishData) => {
    return await fetchAPI("/dishes", {
      method: "POST",
      body: JSON.stringify(dishData),
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ
  update: async (id, dishData) => {
    return await fetchAPI(`/dishes/${id}`, {
      method: "PUT",
      body: JSON.stringify(dishData),
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ
  delete: async (id) => {
    return await fetchAPI(`/dishes/${id}`, {
      method: "DELETE",
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞ –ø–æ–≤–∞—Ä–∞
  getByChef: async (chefId) => {
    return await fetchAPI(`/chefs/${chefId}/dishes`);
  },
};

// ============================================
// üì¶ ORDERS API
// ============================================

export const ordersAPI = {
  // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
  create: async (orderData) => {
    return await fetchAPI("/orders", {
      method: "POST",
      body: JSON.stringify(orderData),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
  getClientOrders: async () => {
    return await fetchAPI("/orders/client");
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–≤–∞—Ä–∞
  getChefOrders: async () => {
    return await fetchAPI("/orders/chef");
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  getById: async (id) => {
    return await fetchAPI(`/orders/${id}`);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  updateStatus: async (id, status) => {
    return await fetchAPI(`/orders/${id}/status`, {
      method: "PATCH",
      body: JSON.stringify({ status }),
    });
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  cancel: async (id, reason) => {
    return await fetchAPI(`/orders/${id}/cancel`, {
      method: "POST",
      body: JSON.stringify({ reason }),
    });
  },
};

// ============================================
// üí≥ PAYMENTS API
// ============================================

export const paymentsAPI = {
  // –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
  create: async (paymentData) => {
    return await fetchAPI("/payments", {
      method: "POST",
      body: JSON.stringify(paymentData),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  getStatus: async (paymentId) => {
    return await fetchAPI(`/payments/${paymentId}`);
  },

  // –í–µ—Ä–Ω—É—Ç—å –ø–ª–∞—Ç–µ–∂
  refund: async (paymentId, amount, reason) => {
    return await fetchAPI(`/payments/${paymentId}/refund`, {
      method: "POST",
      body: JSON.stringify({ amount, reason }),
    });
  },
};

// ============================================
// üë®‚Äçüç≥ CHEFS API
// ============================================

export const chefsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–≤–∞—Ä–æ–≤
  getAll: async (params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return await fetchAPI(`/chefs${queryString ? "?" + queryString : ""}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≤–∞—Ä–∞ –ø–æ ID
  getById: async (id) => {
    return await fetchAPI(`/chefs/${id}`);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–≤–∞—Ä–∞
  updateProfile: async (chefData) => {
    return await fetchAPI("/chefs/profile", {
      method: "PUT",
      body: JSON.stringify(chefData),
    });
  },
};

// ============================================
// üí¨ REVIEWS API
// ============================================

export const reviewsAPI = {
  // –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤
  create: async (reviewData) => {
    return await fetchAPI("/reviews", {
      method: "POST",
      body: JSON.stringify(reviewData),
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –±–ª—é–¥–∞
  getByDish: async (dishId) => {
    return await fetchAPI(`/dishes/${dishId}/reviews`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–≤–∞—Ä–∞
  getByChef: async (chefId) => {
    return await fetchAPI(`/chefs/${chefId}/reviews`);
  },
};

// ============================================
// üìä ANALYTICS API
// ============================================

export const analyticsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤–∞—Ä–∞
  getChefStats: async () => {
    return await fetchAPI("/analytics/chef");
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞
  getPopularDishes: async (period = "7d") => {
    return await fetchAPI(`/analytics/popular-dishes?period=${period}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  getOrderStats: async (startDate, endDate) => {
    return await fetchAPI(
      `/analytics/orders?start=${startDate}&end=${endDate}`
    );
  },
};

// ============================================
// üîî NOTIFICATIONS API
// ============================================

export const notificationsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  getAll: async () => {
    return await fetchAPI("/notifications");
  },

  // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  markAsRead: async (notificationId) => {
    return await fetchAPI(`/notifications/${notificationId}/read`, {
      method: "PATCH",
    });
  },

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  markAllAsRead: async () => {
    return await fetchAPI("/notifications/read-all", {
      method: "PATCH",
    });
  },
};

// Export default –¥–ª—è backward compatibility
export default {
  auth: authAPI,
  dishes: dishesAPI,
  orders: ordersAPI,
  payments: paymentsAPI,
  chefs: chefsAPI,
  reviews: reviewsAPI,
  analytics: analyticsAPI,
  notifications: notificationsAPI,
};

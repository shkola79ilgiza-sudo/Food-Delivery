// AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API (Gemini, ChatGPT) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö

export class AIOrderAnalyzer {
  constructor() {
    this.apis = {
      gemini: {
        baseUrl: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
        apiKey: process.env.REACT_APP_GEMINI_API_KEY || 'demo_key',
        enabled: true
      },
      openai: {
        baseUrl: 'https://api.openai.com/v1/chat/completions',
        apiKey: process.env.REACT_APP_OPENAI_API_KEY || 'demo_key',
        enabled: true,
        model: 'gpt-3.5-turbo'
      }
    };
    
    this.cache = new Map();
    this.insights = [];
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤
  async analyzeOrderHistory(orders, userGoals = 'healthy') {
    try {
      console.log('üîç AI Order Analyzer: Starting analysis...');
      console.log('üìä Orders count:', orders.length);
      console.log('üéØ User goals:', userGoals);

      // 1. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
      const aggregatedData = this.aggregateOrderData(orders);
      console.log('üìà Aggregated data:', aggregatedData);

      // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è AI
      const aiPrompt = this.generateAIPrompt(aggregatedData, userGoals);
      console.log('ü§ñ AI Prompt generated');

      // 3. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç AI
      const aiAnalysis = await this.getAIAnalysis(aiPrompt);
      console.log('üß† AI Analysis received:', aiAnalysis);

      // 4. –ü–∞—Ä—Å–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const insights = this.parseAIResponse(aiAnalysis);
      console.log('üí° Insights parsed:', insights);

      // 5. –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const visualMetrics = this.generateVisualMetrics(aggregatedData);
      console.log('üìä Visual metrics generated');

      return {
        insights,
        visualMetrics,
        aggregatedData,
        recommendations: this.generateRecommendations(insights, userGoals),
        blindSpots: this.identifyBlindSpots(aggregatedData, userGoals)
      };

    } catch (error) {
      console.error('‚ùå AI Order Analyzer Error:', error);
      return this.getFallbackAnalysis(orders, userGoals);
    }
  }

  // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  aggregateOrderData(orders) {
    const stats = {
      totalOrders: orders.length,
      totalDishes: 0,
      totalCalories: 0,
      totalSpent: 0,
      averageOrderValue: 0,
      categories: {},
      ingredients: {},
      timePatterns: {},
      chefPreferences: {},
      nutritionTrends: {
        protein: 0,
        carbs: 0,
        fat: 0,
        fiber: 0
      },
      healthScore: 0,
      diabeticRisk: 0,
      seasonalPatterns: {}
    };

    orders.forEach(order => {
      if (!order.items || !Array.isArray(order.items)) return;

      stats.totalDishes += order.items.length;
      stats.totalSpent += order.total || 0;

      order.items.forEach(item => {
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (item.category) {
          stats.categories[item.category] = (stats.categories[item.category] || 0) + 1;
        }

        // –ö–∞–ª–æ—Ä–∏–∏
        if (item.calories) {
          stats.totalCalories += item.calories;
        }

        // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        if (item.ingredients) {
          const ingredients = Array.isArray(item.ingredients) 
            ? item.ingredients 
            : item.ingredients.split(',').map(i => i.trim());
          
          ingredients.forEach(ingredient => {
            stats.ingredients[ingredient] = (stats.ingredients[ingredient] || 0) + 1;
          });
        }

        // –ü–æ–≤–∞—Ä
        if (item.chef) {
          stats.chefPreferences[item.chef] = (stats.chefPreferences[item.chef] || 0) + 1;
        }

        // –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
        if (item.nutrition) {
          stats.nutritionTrends.protein += item.nutrition.protein || 0;
          stats.nutritionTrends.carbs += item.nutrition.carbs || 0;
          stats.nutritionTrends.fat += item.nutrition.fat || 0;
        }

        // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
        if (item.glycemicIndex) {
          stats.diabeticRisk += item.glycemicIndex > 70 ? 1 : 0;
        }
      });
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    stats.averageOrderValue = stats.totalOrders > 0 ? stats.totalSpent / stats.totalOrders : 0;
    stats.healthScore = this.calculateHealthScore(stats);
    stats.diabeticRisk = stats.diabeticRisk / stats.totalDishes * 100;

    return stats;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è AI
  generateAIPrompt(data, userGoals) {
    const prompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥ —Å 15-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${data.totalOrders}
- –í—Å–µ–≥–æ –±–ª—é–¥: ${data.totalDishes}
- –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${data.totalSpent}‚ÇΩ
- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${Math.round(data.averageOrderValue)}‚ÇΩ
- –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: ${data.totalCalories}

–ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
${Object.entries(data.categories).map(([cat, count]) => `- ${cat}: ${count} —Ä–∞–∑`).join('\n')}

–¢–û–ü –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´:
${Object.entries(data.ingredients).slice(0, 10).map(([ing, count]) => `- ${ing}: ${count} —Ä–∞–∑`).join('\n')}

–õ–Æ–ë–ò–ú–´–ï –ü–û–í–ê–†–ê:
${Object.entries(data.chefPreferences).slice(0, 5).map(([chef, count]) => `- ${chef}: ${count} —Ä–∞–∑`).join('\n')}

–¶–ï–õ–¨ –ö–õ–ò–ï–ù–¢–ê: ${userGoals}
–û–¶–ï–ù–ö–ê –ó–î–û–†–û–í–¨–Ø: ${data.healthScore}/100
–†–ò–°–ö –î–ò–ê–ë–ï–¢–ê: ${data.diabeticRisk}%

–ó–ê–î–ê–ß–ê:
1. –í—ã—è–≤–∏ 3-5 "—Å–ª–µ–ø—ã—Ö –∑–æ–Ω" –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
2. –î–∞–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ "${userGoals}"
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –±–ª—é–¥–∞–º –∫–ª–∏–µ–Ω—Ç–∞
4. –†–∞—Å—Å—á–∏—Ç–∞–π "–°—Ä–µ–¥–Ω–∏–π –ß–µ–∫ –ó–¥–æ—Ä–æ–≤—å—è" (—Å—Ä–∞–≤–Ω–∏ —Å –Ω–æ—Ä–º–æ–π)
5. –£–∫–∞–∂–∏ –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —Ä–∏—Å–∫–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{
  "blindSpots": [
    {
      "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–±–ª–µ–º—ã",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å",
      "severity": "high/medium/low"
    }
  ],
  "recommendations": [
    {
      "title": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
      "action": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
      "benefit": "–ü–æ–ª—å–∑–∞",
      "priority": "high/medium/low"
    }
  ],
  "alternatives": [
    {
      "current": "–¢–µ–∫—É—â–µ–µ –±–ª—é–¥–æ",
      "suggested": "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ",
      "reason": "–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã"
    }
  ],
  "healthMetrics": {
    "healthCheckScore": 75,
    "averageHealthyOrderValue": 450,
    "diabeticRiskLevel": "medium",
    "nutritionBalance": "needs_improvement"
  },
  "insights": [
    {
      "type": "warning/positive/neutral",
      "message": "–ö–ª—é—á–µ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
      "data": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"
    }
  ]
}
`;

    return prompt;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI
  async getAIAnalysis(prompt) {
    const cacheKey = `ai_analysis_${btoa(prompt).substring(0, 20)}`;
    const cached = this.cache.get(cacheKey);
    if (cached) {
      console.log('üìã Using cached AI analysis');
      return cached;
    }

    // –ü—Ä–æ–±—É–µ–º Gemini API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    if (this.apis.gemini.enabled) {
      try {
        const geminiResult = await this.callGeminiAPI(prompt);
        if (geminiResult) {
          this.cache.set(cacheKey, geminiResult);
          return geminiResult;
        }
      } catch (error) {
        console.warn('Gemini API error:', error);
      }
    }

    // Fallback –Ω–∞ OpenAI
    if (this.apis.openai.enabled) {
      try {
        const openaiResult = await this.callOpenAIAPI(prompt);
        if (openaiResult) {
          this.cache.set(cacheKey, openaiResult);
          return openaiResult;
        }
      } catch (error) {
        console.warn('OpenAI API error:', error);
      }
    }

    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    return this.generateLocalAnalysis(prompt);
  }

  // –í—ã–∑–æ–≤ Gemini API
  async callGeminiAPI(prompt) {
    const response = await fetch(`${this.apis.gemini.baseUrl}?key=${this.apis.gemini.apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      })
    });

    if (!response.ok) throw new Error('Gemini API error');

    const data = await response.json();
    return data.candidates?.[0]?.content?.parts?.[0]?.text || null;
  }

  // –í—ã–∑–æ–≤ OpenAI API
  async callOpenAIAPI(prompt) {
    const response = await fetch(this.apis.openai.baseUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apis.openai.apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: this.apis.openai.model,
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) throw new Error('OpenAI API error');

    const data = await response.json();
    return data.choices?.[0]?.message?.content || null;
  }

  // –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (fallback)
  generateLocalAnalysis(prompt) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
    return JSON.stringify({
      blindSpots: [
        {
          title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ–≤–æ—â–µ–π",
          description: "–í –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –º–∞–ª–æ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π –∏ —Å–∞–ª–∞—Ç–æ–≤",
          impact: "–°–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤",
          severity: "medium"
        }
      ],
      recommendations: [
        {
          title: "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–∞–ª–∞—Ç–æ–≤",
          action: "–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ 1 —Å–∞–ª–∞—Ç –∫ –∫–∞–∂–¥–æ–º—É –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–ª—é–¥—É",
          benefit: "–£–≤–µ–ª–∏—á–∏—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –Ω–∞ 40%",
          priority: "high"
        }
      ],
      alternatives: [
        {
          current: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏",
          suggested: "–ó–∞–ø–µ—á–µ–Ω–Ω—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
          reason: "–°–Ω–∏–∂–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 30%"
        }
      ],
      healthMetrics: {
        healthCheckScore: 65,
        averageHealthyOrderValue: 380,
        diabeticRiskLevel: "medium",
        nutritionBalance: "needs_improvement"
      },
      insights: [
        {
          type: "warning",
          message: "70% –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∂–∞—Ä–µ–Ω—ã–µ –±–ª—é–¥–∞",
          data: "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ '–ü–æ—Ö—É–¥–µ–Ω–∏–µ'"
        }
      ]
    });
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
  parseAIResponse(aiResponse) {
    try {
      // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
    } catch (error) {
      console.warn('Error parsing AI response:', error);
    }

    // Fallback
    return this.generateLocalAnalysis();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  generateVisualMetrics(data) {
    return {
      healthScoreChart: {
        value: data.healthScore,
        max: 100,
        color: data.healthScore > 70 ? '#4caf50' : data.healthScore > 50 ? '#ff9800' : '#f44336'
      },
      averageHealthyOrderValue: {
        value: Math.round(data.averageOrderValue),
        benchmark: 400,
        status: data.averageOrderValue > 400 ? 'above' : 'below'
      },
      diabeticRiskMeter: {
        value: data.diabeticRisk,
        level: data.diabeticRisk > 60 ? 'high' : data.diabeticRisk > 30 ? 'medium' : 'low'
      },
      categoryDistribution: Object.entries(data.categories).map(([name, value]) => ({
        name,
        value,
        percentage: Math.round((value / data.totalDishes) * 100)
      }))
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations(insights, userGoals) {
    const recommendations = [];

    if (insights.recommendations) {
      recommendations.push(...insights.recommendations);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–µ–π
    const goalRecommendations = this.getGoalSpecificRecommendations(userGoals, insights);
    recommendations.push(...goalRecommendations);

    return recommendations;
  }

  // –í—ã—è–≤–ª–µ–Ω–∏–µ —Å–ª–µ–ø—ã—Ö –∑–æ–Ω
  identifyBlindSpots(data, userGoals) {
    const blindSpots = [];

    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
    if (data.nutritionTrends.fiber < data.totalDishes * 5) {
      blindSpots.push({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–ª–µ—Ç—á–∞—Ç–∫–∏",
        description: "–ú–∞–ª–æ –æ–≤–æ—â–µ–π –∏ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        impact: "–ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º",
        severity: "medium"
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∏–∑–±—ã—Ç–∫–∞ –∂–∞—Ä–µ–Ω–æ–≥–æ
    const friedCount = data.categories.fried || 0;
    if (friedCount > data.totalDishes * 0.5) {
      blindSpots.push({
        title: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞—Ä–µ–Ω–æ–≥–æ",
        description: "–ë–æ–ª–µ–µ 50% –∑–∞–∫–∞–∑–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∂–∞—Ä–µ–Ω—ã–µ –±–ª—é–¥–∞",
        impact: "–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∂–∏—Ä–æ–≤",
        severity: "high"
      });
    }

    return blindSpots;
  }

  // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
  calculateHealthScore(data) {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤—ã–µ –≤—ã–±–æ—Ä—ã
    const friedCount = data.categories.fried || 0;
    const vegetableCount = data.categories.vegetables || 0;
    
    score -= (friedCount / data.totalDishes) * 30; // –®—Ç—Ä–∞—Ñ –∑–∞ –∂–∞—Ä–µ–Ω–æ–µ
    score += (vegetableCount / data.totalDishes) * 20; // –ë–æ–Ω—É—Å –∑–∞ –æ–≤–æ—â–∏
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫–∏–π –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
    score -= (data.diabeticRisk / 100) * 25;
    
    return Math.max(0, Math.min(100, Math.round(score)));
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π
  getGoalSpecificRecommendations(userGoals, insights) {
    const recommendations = {
      weight_loss: [
        {
          title: "–°–Ω–∏–∑—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å",
          action: "–í—ã–±–∏—Ä–∞–π—Ç–µ –±–ª—é–¥–∞ –¥–æ 400 –∫–∫–∞–ª",
          benefit: "–°–æ–∑–¥–∞—Å—Ç –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è",
          priority: "high"
        }
      ],
      muscle_gain: [
        {
          title: "–£–≤–µ–ª–∏—á—å—Ç–µ –±–µ–ª–æ–∫",
          action: "–î–æ–±–∞–≤—å—Ç–µ –±–µ–ª–∫–æ–≤—ã–µ –±–ª—é–¥–∞ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É",
          benefit: "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç —Ä–æ—Å—Ç –º—ã—à—Ü",
          priority: "high"
        }
      ],
      healthy: [
        {
          title: "–°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ",
          action: "–í–∫–ª—é—á–∞–π—Ç–µ –±–µ–ª–∫–∏, —É–≥–ª–µ–≤–æ–¥—ã –∏ –æ–≤–æ—â–∏ –≤ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑",
          benefit: "–û–±–µ—Å–ø–µ—á–∏—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
          priority: "medium"
        }
      ]
    };

    return recommendations[userGoals] || recommendations.healthy;
  }

  // Fallback –∞–Ω–∞–ª–∏–∑
  getFallbackAnalysis(orders, userGoals) {
    const data = this.aggregateOrderData(orders);
    
    return {
      insights: {
        blindSpots: [
          {
            title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
            description: "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤",
            impact: "–ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º",
            severity: "low"
          }
        ],
        recommendations: [
          {
            title: "–°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤",
            action: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞",
            benefit: "–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            priority: "medium"
          }
        ],
        alternatives: [],
        healthMetrics: {
          healthCheckScore: data.healthScore,
          averageHealthyOrderValue: Math.round(data.averageOrderValue),
          diabeticRiskLevel: "unknown",
          nutritionBalance: "insufficient_data"
        },
        insights: [
          {
            type: "neutral",
            message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            data: "–°–¥–µ–ª–∞–π—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
          }
        ]
      },
      visualMetrics: this.generateVisualMetrics(data),
      aggregatedData: data,
      recommendations: [],
      blindSpots: []
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  clearCache() {
    this.cache.clear();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  getUsageStats() {
    return {
      cacheSize: this.cache.size,
      apisEnabled: Object.values(this.apis).filter(api => api.enabled).length,
      lastAnalysis: new Date().toISOString()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const aiOrderAnalyzer = new AIOrderAnalyzer();

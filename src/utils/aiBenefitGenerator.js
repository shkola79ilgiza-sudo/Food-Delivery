/**
 * AI Benefit Generator - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ –ø–æ–ª—å–∑–µ –±–ª—é–¥
 * –°–æ–∑–¥–∞–µ—Ç —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –±–ª—é–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
 */

class AIBenefitGenerator {
  constructor() {
    this.nutritionBenefits = {
      protein: {
        high: {
          benefits: ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –º—ã—à—Ü', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π', '—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', '–¥–æ–ª–≥–æ–µ —á—É–≤—Å—Ç–≤–æ —Å—ã—Ç–æ—Å—Ç–∏'],
          keywords: ['–±–µ–ª–æ–∫', '–ø—Ä–æ—Ç–µ–∏–Ω', '–∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã'],
          emoji: 'üí™'
        },
        medium: {
          benefits: ['–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤'],
          keywords: ['–±–µ–ª–æ–∫', '–ø—Ä–æ—Ç–µ–∏–Ω'],
          emoji: 'üèÉ'
        }
      },
      fiber: {
        high: {
          benefits: ['—É–ª—É—á—à–µ–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è', '–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–∏—à–µ—á–Ω–∏–∫–∞', '–∫–æ–Ω—Ç—Ä–æ–ª—å —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞', '—Å–Ω–∏–∂–µ–Ω–∏–µ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞'],
          keywords: ['–∫–ª–µ—Ç—á–∞—Ç–∫–∞', '–ø–∏—â–µ–≤—ã–µ –≤–æ–ª–æ–∫–Ω–∞', '–æ–≤–æ—â–∏'],
          emoji: 'üåæ'
        },
        medium: {
          benefits: ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å—Ç—É–ª–∞'],
          keywords: ['–∫–ª–µ—Ç—á–∞—Ç–∫–∞', '–æ–≤–æ—â–∏'],
          emoji: 'ü•ó'
        }
      },
      vitamins: {
        A: {
          benefits: ['—É–ª—É—á—à–µ–Ω–∏–µ –∑—Ä–µ–Ω–∏—è', '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏', '—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞'],
          sources: ['–º–æ—Ä–∫–æ–≤—å', '—Ç—ã–∫–≤–∞', '—Å–ª–∞–¥–∫–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '—à–ø–∏–Ω–∞—Ç'],
          emoji: 'üëÅÔ∏è'
        },
        C: {
          benefits: ['—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', '–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞', '—Å–∏–Ω—Ç–µ–∑ –∫–æ–ª–ª–∞–≥–µ–Ω–∞'],
          sources: ['—Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ', '–±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü', '–±—Ä–æ–∫–∫–æ–ª–∏', '–∫–ª—É–±–Ω–∏–∫–∞'],
          emoji: 'üçä'
        },
        D: {
          benefits: ['–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π', '—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', '—É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'],
          sources: ['—Ä—ã–±–∞', '—è–π—Ü–∞', '–≥—Ä–∏–±—ã'],
          emoji: '‚òÄÔ∏è'
        },
        E: {
          benefits: ['–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞', '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏', '–∑–∞—â–∏—Ç–∞ –∫–ª–µ—Ç–æ–∫'],
          sources: ['–æ—Ä–µ—Ö–∏', '—Å–µ–º–µ–Ω–∞', '—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–ª–∞', '–∞–≤–æ–∫–∞–¥–æ'],
          emoji: 'ü•ë'
        },
        K: {
          benefits: ['—Å–≤–µ—Ä—Ç—ã–≤–∞–µ–º–æ—Å—Ç—å –∫—Ä–æ–≤–∏', '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π', '–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–ª—å—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏'],
          sources: ['–ª–∏—Å—Ç–æ–≤–∞—è –∑–µ–ª–µ–Ω—å', '–±—Ä–æ–∫–∫–æ–ª–∏', '–∫–∞–ø—É—Å—Ç–∞'],
          emoji: 'ü•¨'
        },
        B: {
          benefits: ['—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω', '–∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫—Ä–∞—Å–Ω—ã—Ö –∫—Ä–æ–≤—è–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫'],
          sources: ['–º—è—Å–æ', '—Ä—ã–±–∞', '—è–π—Ü–∞', '–±–æ–±–æ–≤—ã–µ', '—Ü–µ–ª—å–Ω—ã–µ –∑–µ—Ä–Ω–∞'],
          emoji: '‚ö°'
        }
      },
      minerals: {
        iron: {
          benefits: ['–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–Ω–µ–º–∏–∏', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–∏—Å–ª–æ—Ä–æ–¥–∞', '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏'],
          sources: ['–∫—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ', '—à–ø–∏–Ω–∞—Ç', '–±–æ–±–æ–≤—ã–µ', '—Ç–æ—Ñ—É'],
          emoji: 'ü©∏'
        },
        calcium: {
          benefits: ['–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π –∏ –∑—É–±–æ–≤', '–º—ã—à–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', '–Ω–µ—Ä–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞'],
          sources: ['–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ª–∏—Å—Ç–æ–≤–∞—è –∑–µ–ª–µ–Ω—å', '—Ç–æ—Ñ—É', '–º–∏–Ω–¥–∞–ª—å'],
          emoji: 'ü¶¥'
        },
        magnesium: {
          benefits: ['–∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞', '—Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞', '—É–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞', '–º—ã—à–µ—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'],
          sources: ['–æ—Ä–µ—Ö–∏', '—Å–µ–º–µ–Ω–∞', '—Ç–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥', '–±–∞–Ω–∞–Ω—ã'],
          emoji: '‚ù§Ô∏è'
        },
        potassium: {
          benefits: ['–∫–æ–Ω—Ç—Ä–æ–ª—å –¥–∞–≤–ª–µ–Ω–∏—è', '–∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞', '–º—ã—à–µ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è'],
          sources: ['–±–∞–Ω–∞–Ω—ã', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–∞–≤–æ–∫–∞–¥–æ', '—à–ø–∏–Ω–∞—Ç'],
          emoji: 'üíì'
        },
        zinc: {
          benefits: ['—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', '–∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω', '—Å–∏–Ω—Ç–µ–∑ –î–ù–ö'],
          sources: ['–º—è—Å–æ', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '—Å–µ–º–µ–Ω–∞', '–æ—Ä–µ—Ö–∏'],
          emoji: 'üõ°Ô∏è'
        }
      },
      omega3: {
        benefits: ['–∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞', '—É–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–∑–≥–∞', '—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–π', '—É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'],
        sources: ['–∂–∏—Ä–Ω–∞—è —Ä—ã–±–∞', '—Å–µ–º–µ–Ω–∞ –ª—å–Ω–∞', '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', '—á–∏–∞'],
        emoji: 'üêü'
      },
      antioxidants: {
        benefits: ['–∑–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç–∞—Ä–µ–Ω–∏—è', '—Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π', '—É–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–∑–≥–∞'],
        sources: ['—è–≥–æ–¥—ã', '—Ç–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥', '–∑–µ–ª–µ–Ω—ã–π —á–∞–π', '–æ—Ä–µ—Ö–∏'],
        emoji: 'üõ°Ô∏è'
      },
      lowGI: {
        benefits: ['—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏', '–∫–æ–Ω—Ç—Ä–æ–ª—å –∞–ø–ø–µ—Ç–∏—Ç–∞', '—Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –¥–∏–∞–±–µ—Ç–∞', '—É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏'],
        keywords: ['–Ω–∏–∑–∫–∏–π –ì–ò', '–º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã', '—Ü–µ–ª—å–Ω—ã–µ –∑–µ—Ä–Ω–∞'],
        emoji: 'üìä'
      }
    };

    this.mealTimeBenefits = {
      breakfast: {
        general: '–ò–¥–µ–∞–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è',
        emoji: 'üåÖ'
      },
      lunch: {
        general: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–µ–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        emoji: '‚òÄÔ∏è'
      },
      dinner: {
        general: '–õ–µ–≥–∫–∏–π –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π —É–∂–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
        emoji: 'üåô'
      },
      snack: {
        general: '–ó–¥–æ—Ä–æ–≤—ã–π –ø–µ—Ä–µ–∫—É—Å –¥–ª—è –ø–æ–¥–∑–∞—Ä—è–¥–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏',
        emoji: 'üçé'
      },
      'pre-workout': {
        general: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π',
        emoji: 'üèãÔ∏è'
      },
      'post-workout': {
        general: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–µ–µ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        emoji: 'üí™'
      }
    };

    this.goalBenefits = {
      weight_loss: {
        keywords: ['–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π', '—Å—ã—Ç–Ω—ã–π', '–±–æ–≥–∞—Ç—ã–π –±–µ–ª–∫–æ–º', '–Ω–∏–∑–∫–∏–π –ì–ò'],
        benefits: ['–∫–æ–Ω—Ç—Ä–æ–ª—å –∞–ø–ø–µ—Ç–∏—Ç–∞', '—É—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞', '—Å–∂–∏–≥–∞–Ω–∏–µ –∂–∏—Ä–∞'],
        emoji: 'üéØ'
      },
      muscle_gain: {
        keywords: ['–≤—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–π', '–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π', '—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π'],
        benefits: ['—Ä–æ—Å—Ç –º—ã—à—Ü', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã'],
        emoji: 'üí™'
      },
      healthy: {
        keywords: ['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π', '–ø–æ–ª–µ–∑–Ω—ã–π'],
        benefits: ['–æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ', '—ç–Ω–µ—Ä–≥–∏—è', '–¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ'],
        emoji: 'üå±'
      },
      energy: {
        keywords: ['—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π', '—Ç–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–π', '–±–æ–¥—Ä—è—â–∏–π'],
        benefits: ['–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏', '—É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏', '–±–æ—Ä—å–±–∞ —Å —É—Å—Ç–∞–ª–æ—Å—Ç—å—é'],
        emoji: '‚ö°'
      },
      immunity: {
        keywords: ['—É–∫—Ä–µ–ø–ª—è—é—â–∏–π', '–≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π', '–∏–º–º—É–Ω–æ—Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–π'],
        benefits: ['—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', '–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π', '–±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'],
        emoji: 'üõ°Ô∏è'
      }
    };

    this.seasonalBenefits = {
      spring: {
        keywords: ['—Å–≤–µ–∂–∏–π', '–≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π', '–ª–µ–≥–∫–∏–π'],
        benefits: ['–¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞', '–≤–∏—Ç–∞–º–∏–Ω–Ω–∞—è –ø–æ–¥–∑–∞—Ä—è–¥–∫–∞'],
        emoji: 'üå∏'
      },
      summer: {
        keywords: ['–æ—Å–≤–µ–∂–∞—é—â–∏–π', '–≥–∏–¥—Ä–∞—Ç–∏—Ä—É—é—â–∏–π', '–ª–µ–≥–∫–∏–π'],
        benefits: ['—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '—ç–Ω–µ—Ä–≥–∏—è'],
        emoji: '‚òÄÔ∏è'
      },
      autumn: {
        keywords: ['—Å–æ–≥—Ä–µ–≤–∞—é—â–∏–π', '—É–∫—Ä–µ–ø–ª—è—é—â–∏–π', '–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π'],
        benefits: ['—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∏–º–µ', '—Å–æ–≥—Ä–µ–≤–∞–Ω–∏–µ'],
        emoji: 'üçÇ'
      },
      winter: {
        keywords: ['—Å–æ–≥—Ä–µ–≤–∞—é—â–∏–π', '—Å—ã—Ç–Ω—ã–π', '–∏–º–º—É–Ω–æ—Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–π'],
        benefits: ['—Å–æ–≥—Ä–µ–≤–∞–Ω–∏–µ', '–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å—Ç—É–¥', '—ç–Ω–µ—Ä–≥–∏—è'],
        emoji: '‚ùÑÔ∏è'
      }
    };

    this.templates = {
      short: [
        '{emoji} {benefit1} –∏ {benefit2}',
        '–ë–æ–≥–∞—Ç {nutrient}, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç {benefit1}',
        '{emoji} –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è {goal}: {benefit1}'
      ],
      medium: [
        '{emoji} –≠—Ç–æ –±–ª—é–¥–æ –±–æ–≥–∞—Ç–æ {nutrient}, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç {benefit1} –∏ {benefit2}. {call_to_action}',
        '–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤—ã—Å–æ–∫–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é {nutrient}, —ç—Ç–æ –±–ª—é–¥–æ {benefit1}. {emoji} {additional_benefit}',
        '{emoji} –ò–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è {goal}! –°–æ–¥–µ—Ä–∂–∏—Ç {nutrient}, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è {benefit1} –∏ {benefit2}'
      ],
      long: [
        '{emoji} –ù–∞—à–µ –±–ª—é–¥–æ "{dish_name}" - —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∞–¥–µ–∑—å –ø–æ–ª—å–∑—ã! –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤—ã—Å–æ–∫–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é {nutrient1} –∏ {nutrient2}, –æ–Ω–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç {benefit1}, {benefit2} –∏ {benefit3}. {mealtime_benefit} {call_to_action}',
        'üåü "{dish_name}" - –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è {goal}! –≠—Ç–æ –±–ª—é–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {nutrient1}, –∫–æ—Ç–æ—Ä—ã–π {benefit1}, –∞ —Ç–∞–∫–∂–µ {nutrient2}, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è {benefit2}. {emoji} {seasonal_benefit} {call_to_action}'
      ]
    };

    this.callToActions = [
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è!',
      '–ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
      '–í–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º —Å–∫–∞–∂–µ—Ç "—Å–ø–∞—Å–∏–±–æ"!',
      '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ!',
      '–ü–æ–±–∞–ª—É–π—Ç–µ —Å–µ–±—è –ø–æ–ª—å–∑–æ–π!',
      '–ó–¥–æ—Ä–æ–≤—å–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞!',
      '–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–µ–≥–æ–¥–Ω—è!'
    ];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–µ –±–ª—é–¥–∞
   * @param {Object} dish - –ë–ª—é–¥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @param {String} format - –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ ('short', 'medium', 'long')
   * @param {String} goal - –¶–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {String} –ü—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
   */
  generateBenefit(dish, format = 'medium', goal = null) {
    console.log('üí° Generating benefit text...', { dish: dish.name, format, goal });

    try {
      const analysis = this.analyzeDishNutrition(dish);
      const benefits = this.extractKeyBenefits(analysis, goal);
      const text = this.composeBenefitText(dish, benefits, format, goal);

      console.log('‚úÖ Benefit text generated:', text);
      return text;
    } catch (error) {
      console.error('‚ùå Error generating benefit:', error);
      return this.generateFallbackBenefit(dish);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥–∞
   */
  analyzeDishNutrition(dish) {
    const analysis = {
      macronutrients: {},
      micronutrients: {},
      specialProperties: [],
      ingredients: this.parseIngredients(dish.ingredients || ''),
      dietaryTags: []
    };

    // –ê–Ω–∞–ª–∏–∑ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    if (dish.dishProtein && dish.dishProtein > 20) {
      analysis.macronutrients.protein = 'high';
    } else if (dish.dishProtein && dish.dishProtein > 10) {
      analysis.macronutrients.protein = 'medium';
    }

    if (dish.dishFiber && dish.dishFiber > 5) {
      analysis.macronutrients.fiber = 'high';
    } else if (dish.dishFiber && dish.dishFiber > 3) {
      analysis.macronutrients.fiber = 'medium';
    }

    if (dish.dishCalories && dish.dishCalories < 300) {
      analysis.specialProperties.push('low_calorie');
    }

    if (dish.dishFat && dish.dishFat < 10) {
      analysis.specialProperties.push('low_fat');
    }

    // –ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    analysis.micronutrients = this.identifyMicronutrients(analysis.ingredients);

    // –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
    if (dish.diabeticFriendly) {
      analysis.dietaryTags.push('low_gi');
    }

    if (dish.vegetarian) {
      analysis.dietaryTags.push('vegetarian');
    }

    if (dish.vegan) {
      analysis.dietaryTags.push('vegan');
    }

    return analysis;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
   */
  parseIngredients(ingredientsString) {
    if (!ingredientsString) return [];
    return ingredientsString.split(',').map(ing => ing.trim().toLowerCase());
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
   */
  identifyMicronutrients(ingredients) {
    const micronutrients = {
      vitamins: [],
      minerals: [],
      other: []
    };

    ingredients.forEach(ingredient => {
      // –í–∏—Ç–∞–º–∏–Ω—ã
      Object.entries(this.nutritionBenefits.vitamins).forEach(([vitamin, data]) => {
        if (data.sources.some(source => ingredient.includes(source))) {
          if (!micronutrients.vitamins.includes(vitamin)) {
            micronutrients.vitamins.push(vitamin);
          }
        }
      });

      // –ú–∏–Ω–µ—Ä–∞–ª—ã
      Object.entries(this.nutritionBenefits.minerals).forEach(([mineral, data]) => {
        if (data.sources.some(source => ingredient.includes(source))) {
          if (!micronutrients.minerals.includes(mineral)) {
            micronutrients.minerals.push(mineral);
          }
        }
      });

      // –û–º–µ–≥–∞-3
      if (this.nutritionBenefits.omega3.sources.some(source => ingredient.includes(source))) {
        micronutrients.other.push('omega3');
      }

      // –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã
      if (this.nutritionBenefits.antioxidants.sources.some(source => ingredient.includes(source))) {
        micronutrients.other.push('antioxidants');
      }
    });

    return micronutrients;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
   */
  extractKeyBenefits(analysis, goal) {
    const benefits = {
      primary: [],
      secondary: [],
      nutrients: [],
      emojis: []
    };

    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–∑ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    if (analysis.macronutrients.protein) {
      const proteinData = this.nutritionBenefits.protein[analysis.macronutrients.protein];
      benefits.primary.push(...proteinData.benefits.slice(0, 2));
      benefits.nutrients.push('–±–µ–ª–æ–∫');
      benefits.emojis.push(proteinData.emoji);
    }

    if (analysis.macronutrients.fiber) {
      const fiberData = this.nutritionBenefits.fiber[analysis.macronutrients.fiber];
      benefits.primary.push(...fiberData.benefits.slice(0, 2));
      benefits.nutrients.push('–∫–ª–µ—Ç—á–∞—Ç–∫–∞');
      benefits.emojis.push(fiberData.emoji);
    }

    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–∑ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    analysis.micronutrients.vitamins.slice(0, 2).forEach(vitamin => {
      const vitaminData = this.nutritionBenefits.vitamins[vitamin];
      benefits.secondary.push(...vitaminData.benefits.slice(0, 1));
      benefits.nutrients.push(`–≤–∏—Ç–∞–º–∏–Ω ${vitamin}`);
      benefits.emojis.push(vitaminData.emoji);
    });

    analysis.micronutrients.minerals.slice(0, 2).forEach(mineral => {
      const mineralData = this.nutritionBenefits.minerals[mineral];
      benefits.secondary.push(...mineralData.benefits.slice(0, 1));
      benefits.nutrients.push(mineral);
      benefits.emojis.push(mineralData.emoji);
    });

    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    if (analysis.specialProperties.includes('low_calorie')) {
      benefits.primary.push('–∫–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞');
    }

    if (analysis.dietaryTags.includes('low_gi')) {
      benefits.primary.push(...this.nutritionBenefits.lowGI.benefits.slice(0, 2));
      benefits.emojis.push(this.nutritionBenefits.lowGI.emoji);
    }

    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ü–µ–ª—å—é
    if (goal && this.goalBenefits[goal]) {
      const goalData = this.goalBenefits[goal];
      benefits.primary.push(...goalData.benefits.slice(0, 2));
      benefits.emojis.push(goalData.emoji);
    }

    return benefits;
  }

  /**
   * –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–µ
   */
  composeBenefitText(dish, benefits, format, goal) {
    const templates = this.templates[format] || this.templates.medium;
    const template = templates[Math.floor(Math.random() * templates.length)];

    const replacements = {
      '{emoji}': benefits.emojis[0] || 'üåü',
      '{dish_name}': dish.name,
      '{benefit1}': benefits.primary[0] || '—É–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è',
      '{benefit2}': benefits.primary[1] || '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
      '{benefit3}': benefits.secondary[0] || '–æ–±—â–µ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ',
      '{nutrient}': benefits.nutrients[0] || '–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞',
      '{nutrient1}': benefits.nutrients[0] || '–±–µ–ª–æ–∫',
      '{nutrient2}': benefits.nutrients[1] || '–≤–∏—Ç–∞–º–∏–Ω—ã',
      '{goal}': goal ? this.goalBenefits[goal]?.keywords[0] || '–∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è' : '–∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è',
      '{call_to_action}': this.callToActions[Math.floor(Math.random() * this.callToActions.length)],
      '{mealtime_benefit}': this.getMealTimeBenefit(dish),
      '{seasonal_benefit}': this.getSeasonalBenefit(),
      '{additional_benefit}': benefits.secondary[0] || '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è!'
    };

    let text = template;
    Object.entries(replacements).forEach(([key, value]) => {
      text = text.replace(new RegExp(key, 'g'), value);
    });

    return text;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  getMealTimeBenefit(dish) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    const name = dish.name.toLowerCase();
    
    if (name.includes('–∫–∞—à–∞') || name.includes('–æ–º–ª–µ—Ç') || name.includes('—Ç–≤–æ—Ä–æ–≥')) {
      return this.mealTimeBenefits.breakfast.general;
    } else if (name.includes('—Å—É–ø') || name.includes('—Å–∞–ª–∞—Ç')) {
      return this.mealTimeBenefits.lunch.general;
    } else if (name.includes('–º—è—Å–æ') || name.includes('—Ä—ã–±–∞')) {
      return this.mealTimeBenefits.dinner.general;
    }

    return '';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
   */
  getSeasonalBenefit() {
    const month = new Date().getMonth();
    let season;

    if (month >= 2 && month <= 4) season = 'spring';
    else if (month >= 5 && month <= 7) season = 'summer';
    else if (month >= 8 && month <= 10) season = 'autumn';
    else season = 'winter';

    const seasonData = this.seasonalBenefits[season];
    return `${seasonData.emoji} ${seasonData.benefits[0]}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–µ
   */
  generateFallbackBenefit(dish) {
    return `üåü "${dish.name}" - –≤–∫—É—Å–Ω–æ–µ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å –ª—é–±–æ–≤—å—é! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è!`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª—é–¥
   */
  generateBulkBenefits(dishes, format = 'medium', goal = null) {
    console.log(`üí° Generating benefits for ${dishes.length} dishes...`);

    const results = dishes.map(dish => ({
      dishId: dish.id,
      dishName: dish.name,
      benefit: this.generateBenefit(dish, format, goal),
      shortBenefit: this.generateBenefit(dish, 'short', goal),
      longBenefit: this.generateBenefit(dish, 'long', goal)
    }));

    console.log('‚úÖ Bulk benefits generated');
    return results;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª—é–¥
   */
  generateCatchyHeadlines(dish) {
    const headlines = [];

    // –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (dish.dishProtein && dish.dishProtein > 20) {
      headlines.push('üí™ –°–∏–ª–æ–≤–∞—è –±–æ–º–±–∞!');
      headlines.push('–ë–µ–ª–∫–æ–≤—ã–π —á–µ–º–ø–∏–æ–Ω!');
    }

    if (dish.dishCalories && dish.dishCalories < 300) {
      headlines.push('üéØ –õ–µ–≥–∫–æ–µ –∏ —Å—ã—Ç–Ω–æ–µ!');
      headlines.push('–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ñ–∏–≥—É—Ä—ã!');
    }

    if (dish.diabeticFriendly) {
      headlines.push('‚ú® –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤!');
      headlines.push('–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏!');
    }

    // –û–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headlines.push('üåü –ó–¥–æ—Ä–æ–≤—ã–π –≤—ã–±–æ—Ä!');
    headlines.push('‚ù§Ô∏è –° –ª—é–±–æ–≤—å—é –∫ –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é!');

    return headlines;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
   */
  generateHashtags(dish, goal = null) {
    const hashtags = ['#–ó–¥–æ—Ä–æ–≤–æ–µ–ü–∏—Ç–∞–Ω–∏–µ', '#–í–∫—É—Å–Ω–æ–ò–ü–æ–ª–µ–∑–Ω–æ'];

    if (dish.dishProtein && dish.dishProtein > 20) {
      hashtags.push('#–ë–µ–ª–∫–æ–≤–∞—è–ï–¥–∞', '#–§–∏—Ç–Ω–µ—Å');
    }

    if (dish.diabeticFriendly) {
      hashtags.push('#–î–ª—è–î–∏–∞–±–µ—Ç–∏–∫–æ–≤', '#–ù–∏–∑–∫–∏–π–ì–ò');
    }

    if (goal === 'weight_loss') {
      hashtags.push('#–ü–ü', '#–ü–æ—Ö—É–¥–µ–Ω–∏–µ');
    }

    if (goal === 'muscle_gain') {
      hashtags.push('#–ù–∞–±–æ—Ä–ú–∞—Å—Å—ã', '#–°–ø–æ—Ä—Ç–ø–∏—Ç');
    }

    return hashtags;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
const aiBenefitGenerator = new AIBenefitGenerator();
export default aiBenefitGenerator;

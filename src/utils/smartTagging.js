// Smart Tagging - AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª—é–¥–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–≥–∏

export class SmartTagging {
  constructor() {
    this.tagDatabase = this.initializeTagDatabase();
    this.thresholds = this.initializeThresholds();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
   */
  initializeTagDatabase() {
    return {
      // –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
      macros: [
        { id: 'high-protein', name: '–ë–æ–≥–∞—Ç–æ –±–µ–ª–∫–æ–º', emoji: 'üí™', priority: 'high' },
        { id: 'low-carb', name: '–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ', emoji: 'ü•©', priority: 'high' },
        { id: 'high-fiber', name: '–ë–æ–≥–∞—Ç–æ –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π', emoji: 'üåæ', priority: 'medium' },
        { id: 'low-fat', name: '–ù–∏–∑–∫–æ–∂–∏—Ä–Ω–æ–µ', emoji: 'ü•ó', priority: 'medium' },
        { id: 'high-fat', name: '–í—ã—Å–æ–∫–æ–∂–∏—Ä–Ω–æ–µ', emoji: 'ü•ë', priority: 'low' }
      ],
      
      // –î–∏–µ—Ç—ã
      diets: [
        { id: 'keto', name: '–ö–µ—Ç–æ', emoji: 'ü•ì', priority: 'high' },
        { id: 'paleo', name: '–ü–∞–ª–µ–æ', emoji: 'ü¶¥', priority: 'medium' },
        { id: 'vegan', name: '–í–µ–≥–∞–Ω—Å–∫–æ–µ', emoji: 'üå±', priority: 'high' },
        { id: 'vegetarian', name: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ', emoji: 'ü•ï', priority: 'high' },
        { id: 'gluten-free', name: '–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞', emoji: 'üåæüö´', priority: 'high' },
        { id: 'dairy-free', name: '–ë–µ–∑ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', emoji: 'ü•õüö´', priority: 'medium' },
        { id: 'low-fodmap', name: 'Low FODMAP', emoji: 'üçÉ', priority: 'low' }
      ],
      
      // –ó–¥–æ—Ä–æ–≤—å–µ
      health: [
        { id: 'diabetic-friendly', name: '–î–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤', emoji: 'ü©∫', priority: 'high' },
        { id: 'heart-healthy', name: '–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–µ—Ä–¥—Ü–∞', emoji: '‚ù§Ô∏è', priority: 'high' },
        { id: 'low-sodium', name: '–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è', emoji: 'üßÇüö´', priority: 'medium' },
        { id: 'low-sugar', name: '–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞', emoji: 'üç¨üö´', priority: 'high' },
        { id: 'anti-inflammatory', name: '–ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–æ–µ', emoji: 'üî•üö´', priority: 'medium' }
      ],
      
      // –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
      calories: [
        { id: 'low-calorie', name: '–ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ', emoji: 'üìâ', priority: 'high' },
        { id: 'high-calorie', name: '–í—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ', emoji: 'üìà', priority: 'low' },
        { id: 'balanced', name: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', emoji: '‚öñÔ∏è', priority: 'medium' }
      ],
      
      // –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      mealTime: [
        { id: 'breakfast', name: '–ó–∞–≤—Ç—Ä–∞–∫', emoji: 'üåÖ', priority: 'medium' },
        { id: 'lunch', name: '–û–±–µ–¥', emoji: '‚òÄÔ∏è', priority: 'medium' },
        { id: 'dinner', name: '–£–∂–∏–Ω', emoji: 'üåô', priority: 'medium' },
        { id: 'snack', name: '–ü–µ—Ä–µ–∫—É—Å', emoji: 'üç™', priority: 'low' }
      ],
      
      // –°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å
      fitness: [
        { id: 'pre-workout', name: '–ü–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π', emoji: 'üèãÔ∏è', priority: 'medium' },
        { id: 'post-workout', name: '–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', emoji: 'üí™', priority: 'medium' },
        { id: 'muscle-building', name: '–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã', emoji: 'üí™üìà', priority: 'medium' },
        { id: 'weight-loss', name: '–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è', emoji: '‚öñÔ∏èüìâ', priority: 'high' }
      ],
      
      // –û—Å–æ–±—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
      special: [
        { id: 'pregnancy-safe', name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏', emoji: 'ü§∞', priority: 'high' },
        { id: 'kid-friendly', name: '–î–µ—Ç—Å–∫–æ–µ', emoji: 'üë∂', priority: 'medium' },
        { id: 'elderly-friendly', name: '–î–ª—è –ø–æ–∂–∏–ª—ã—Ö', emoji: 'üë¥', priority: 'low' }
      ]
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
   */
  initializeThresholds() {
    return {
      // –ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (% –æ—Ç –∫–∞–ª–æ—Ä–∏–π)
      highProtein: 30, // >30% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –±–µ–ª–∫–∞
      lowCarb: 20, // <20% –∫–∞–ª–æ—Ä–∏–π –∏–∑ —É–≥–ª–µ–≤–æ–¥–æ–≤
      highFiber: 5, // >5–≥ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –Ω–∞ 100–≥
      lowFat: 15, // <15% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –∂–∏—Ä–∞
      highFat: 40, // >40% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –∂–∏—Ä–∞
      
      // –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–Ω–∞ –ø–æ—Ä—Ü–∏—é)
      lowCalorie: 300,
      highCalorie: 600,
      
      // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      lowGI: 55,
      lowSugar: 5, // <5–≥ —Å–∞—Ö–∞—Ä–∞ –Ω–∞ –ø–æ—Ä—Ü–∏—é
      
      // –ù–∞—Ç—Ä–∏–π
      lowSodium: 140, // <140–º–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é
      
      // –ö–µ—Ç–æ
      ketoCarbs: 10, // <10–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ –ø–æ—Ä—Ü–∏—é
      ketoFat: 70 // >70% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –∂–∏—Ä–∞
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª—é–¥–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏
   * @param {Object} dish - –î–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
   */
  analyzeDish(dish) {
    const tags = [];
    const nutrition = this.normalizeNutrition(dish);
    
    // –ê–Ω–∞–ª–∏–∑ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    tags.push(...this.analyzeMacros(nutrition));
    
    // –ê–Ω–∞–ª–∏–∑ –¥–∏–µ—Ç
    tags.push(...this.analyzeDiets(dish, nutrition));
    
    // –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è
    tags.push(...this.analyzeHealth(dish, nutrition));
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
    tags.push(...this.analyzeCalories(nutrition));
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    tags.push(...this.analyzeMealTime(dish, nutrition));
    
    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞
    tags.push(...this.analyzeFitness(nutrition));
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Å–æ–±—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    tags.push(...this.analyzeSpecialNeeds(dish, nutrition));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    return tags
      .sort((a, b) => {
        if (b.confidence !== a.confidence) {
          return b.confidence - a.confidence;
        }
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        return priorityOrder[b.priority] - priorityOrder[a.priority];
      })
      .slice(0, 10); // –ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–æ–≤
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
   */
  normalizeNutrition(dish) {
    const calories = parseFloat(dish.calories) || 0;
    const protein = parseFloat(dish.protein) || 0;
    const carbs = parseFloat(dish.carbs) || 0;
    const fat = parseFloat(dish.fat) || 0;
    const fiber = parseFloat(dish.fiber) || 0;
    const sugar = parseFloat(dish.sugar) || 0;
    const sodium = parseFloat(dish.sodium) || 0;
    const glycemicIndex = parseFloat(dish.glycemicIndex) || 0;
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –∫–∞–ª–æ—Ä–∏–π
    const proteinPercent = calories > 0 ? (protein * 4 / calories) * 100 : 0;
    const carbsPercent = calories > 0 ? (carbs * 4 / calories) * 100 : 0;
    const fatPercent = calories > 0 ? (fat * 9 / calories) * 100 : 0;
    
    return {
      calories,
      protein,
      carbs,
      fat,
      fiber,
      sugar,
      sodium,
      glycemicIndex,
      proteinPercent,
      carbsPercent,
      fatPercent
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
   */
  analyzeMacros(nutrition) {
    const tags = [];
    
    // –ë–æ–≥–∞—Ç–æ –±–µ–ª–∫–æ–º
    if (nutrition.proteinPercent > this.thresholds.highProtein) {
      tags.push({
        ...this.findTag('high-protein'),
        confidence: Math.min(95, 70 + (nutrition.proteinPercent - this.thresholds.highProtein)),
        reason: `${nutrition.proteinPercent.toFixed(1)}% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –±–µ–ª–∫–∞`
      });
    }
    
    // –ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ
    if (nutrition.carbsPercent < this.thresholds.lowCarb) {
      tags.push({
        ...this.findTag('low-carb'),
        confidence: Math.min(95, 70 + (this.thresholds.lowCarb - nutrition.carbsPercent) * 2),
        reason: `–¢–æ–ª—å–∫–æ ${nutrition.carbsPercent.toFixed(1)}% –∫–∞–ª–æ—Ä–∏–π –∏–∑ —É–≥–ª–µ–≤–æ–¥–æ–≤`
      });
    }
    
    // –ë–æ–≥–∞—Ç–æ –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π
    if (nutrition.fiber > this.thresholds.highFiber) {
      tags.push({
        ...this.findTag('high-fiber'),
        confidence: Math.min(95, 60 + nutrition.fiber * 5),
        reason: `${nutrition.fiber.toFixed(1)}–≥ –∫–ª–µ—Ç—á–∞—Ç–∫–∏`
      });
    }
    
    // –ù–∏–∑–∫–æ–∂–∏—Ä–Ω–æ–µ
    if (nutrition.fatPercent < this.thresholds.lowFat) {
      tags.push({
        ...this.findTag('low-fat'),
        confidence: Math.min(95, 65 + (this.thresholds.lowFat - nutrition.fatPercent) * 2),
        reason: `–¢–æ–ª—å–∫–æ ${nutrition.fatPercent.toFixed(1)}% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –∂–∏—Ä–∞`
      });
    }
    
    // –í—ã—Å–æ–∫–æ–∂–∏—Ä–Ω–æ–µ
    if (nutrition.fatPercent > this.thresholds.highFat) {
      tags.push({
        ...this.findTag('high-fat'),
        confidence: Math.min(95, 60 + (nutrition.fatPercent - this.thresholds.highFat)),
        reason: `${nutrition.fatPercent.toFixed(1)}% –∫–∞–ª–æ—Ä–∏–π –∏–∑ –∂–∏—Ä–∞`
      });
    }
    
    return tags;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –¥–∏–µ—Ç
   */
  analyzeDiets(dish, nutrition) {
    const tags = [];
    const ingredients = (dish.ingredients || '').toLowerCase();
    
    // –ö–µ—Ç–æ
    if (nutrition.carbs < this.thresholds.ketoCarbs && nutrition.fatPercent > this.thresholds.ketoFat) {
      tags.push({
        ...this.findTag('keto'),
        confidence: 90,
        reason: `–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ (${nutrition.carbs.toFixed(1)}–≥) –∏ –≤—ã—Å–æ–∫–æ–∂–∏—Ä–Ω–æ–µ (${nutrition.fatPercent.toFixed(1)}%)`
      });
    }
    
    // –í–µ–≥–∞–Ω—Å–∫–æ–µ
    const meatKeywords = ['–º—è—Å–æ', '–∫—É—Ä–∏—Ü–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '—Ä—ã–±–∞', '—è–π—Ü–æ', '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—Ç–≤–æ—Ä–æ–≥'];
    const hasMeat = meatKeywords.some(keyword => ingredients.includes(keyword));
    if (!hasMeat && ingredients.length > 0) {
      tags.push({
        ...this.findTag('vegan'),
        confidence: 75,
        reason: '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è'
      });
    }
    
    // –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞
    const glutenKeywords = ['–ø—à–µ–Ω–∏—Ü–∞', '–º—É–∫–∞', '—Ö–ª–µ–±', '–º–∞–∫–∞—Ä–æ–Ω—ã', '–æ–≤–µ—Å', '—è—á–º–µ–Ω—å', '—Ä–æ–∂—å'];
    const hasGluten = glutenKeywords.some(keyword => ingredients.includes(keyword));
    if (!hasGluten && ingredients.length > 0) {
      tags.push({
        ...this.findTag('gluten-free'),
        confidence: 80,
        reason: '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–ª—é—Ç–µ–Ω'
      });
    }
    
    return tags;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è
   */
  analyzeHealth(dish, nutrition) {
    const tags = [];
    
    // –î–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤
    if (nutrition.glycemicIndex > 0 && nutrition.glycemicIndex < this.thresholds.lowGI && nutrition.sugar < this.thresholds.lowSugar) {
      tags.push({
        ...this.findTag('diabetic-friendly'),
        confidence: 90,
        reason: `–ù–∏–∑–∫–∏–π –ì–ò (${nutrition.glycemicIndex}) –∏ –Ω–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ (${nutrition.sugar.toFixed(1)}–≥)`
      });
    }
    
    // –ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞
    if (nutrition.sugar < this.thresholds.lowSugar) {
      tags.push({
        ...this.findTag('low-sugar'),
        confidence: 85,
        reason: `–¢–æ–ª—å–∫–æ ${nutrition.sugar.toFixed(1)}–≥ —Å–∞—Ö–∞—Ä–∞`
      });
    }
    
    // –ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è
    if (nutrition.sodium < this.thresholds.lowSodium) {
      tags.push({
        ...this.findTag('low-sodium'),
        confidence: 80,
        reason: `–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è (${nutrition.sodium.toFixed(0)}–º–≥)`
      });
    }
    
    return tags;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
   */
  analyzeCalories(nutrition) {
    const tags = [];
    
    if (nutrition.calories < this.thresholds.lowCalorie) {
      tags.push({
        ...this.findTag('low-calorie'),
        confidence: 85,
        reason: `–í—Å–µ–≥–æ ${nutrition.calories.toFixed(0)} –∫–∫–∞–ª`
      });
    } else if (nutrition.calories > this.thresholds.highCalorie) {
      tags.push({
        ...this.findTag('high-calorie'),
        confidence: 75,
        reason: `${nutrition.calories.toFixed(0)} –∫–∫–∞–ª - —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ`
      });
    } else {
      tags.push({
        ...this.findTag('balanced'),
        confidence: 70,
        reason: `–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (${nutrition.calories.toFixed(0)} –∫–∫–∞–ª)`
      });
    }
    
    return tags;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  analyzeMealTime(dish, nutrition) {
    const tags = [];
    const category = (dish.category || '').toLowerCase();
    
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
    if (category.includes('breakfast') || nutrition.calories < 400) {
      tags.push({
        ...this.findTag('breakfast'),
        confidence: 65,
        reason: '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞'
      });
    }
    
    if (nutrition.calories > 400 && nutrition.calories < 700) {
      tags.push({
        ...this.findTag('lunch'),
        confidence: 70,
        reason: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –æ–±–µ–¥–∞'
      });
    }
    
    if (nutrition.calories < 250) {
      tags.push({
        ...this.findTag('snack'),
        confidence: 75,
        reason: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∫—É—Å–∞'
      });
    }
    
    return tags;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞
   */
  analyzeFitness(nutrition) {
    const tags = [];
    
    // –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã
    if (nutrition.proteinPercent > 25 && nutrition.calories > 500) {
      tags.push({
        ...this.findTag('muscle-building'),
        confidence: 80,
        reason: `–í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤–æ–µ (${nutrition.proteinPercent.toFixed(1)}%) –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ`
      });
    }
    
    // –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
    if (nutrition.calories < this.thresholds.lowCalorie && nutrition.proteinPercent > 20) {
      tags.push({
        ...this.findTag('weight-loss'),
        confidence: 85,
        reason: '–ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–µ–ª–∫–∞'
      });
    }
    
    // –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if (nutrition.proteinPercent > 25 && nutrition.carbsPercent > 30) {
      tags.push({
        ...this.findTag('post-workout'),
        confidence: 75,
        reason: '–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    }
    
    return tags;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –æ—Å–æ–±—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
   */
  analyzeSpecialNeeds(dish, nutrition) {
    const tags = [];
    const ingredients = (dish.ingredients || '').toLowerCase();
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    const unsafeForPregnancy = ['—Å—ã—Ä–æ–µ –º—è—Å–æ', '—Å—ã—Ä–∞—è —Ä—ã–±–∞', '—Å—É—à–∏', '–∞–ª–∫–æ–≥–æ–ª—å', '–∫–æ—Ñ–µ–∏–Ω'];
    const hasUnsafe = unsafeForPregnancy.some(keyword => ingredients.includes(keyword));
    if (!hasUnsafe && ingredients.length > 0) {
      tags.push({
        ...this.findTag('pregnancy-safe'),
        confidence: 70,
        reason: '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏'
      });
    }
    
    return tags;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–≥ –ø–æ ID
   */
  findTag(tagId) {
    for (const category of Object.values(this.tagDatabase)) {
      const tag = category.find(t => t.id === tagId);
      if (tag) return tag;
    }
    return null;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatTags(tags) {
    return tags.map(tag => ({
      ...tag,
      displayName: `${tag.emoji} ${tag.name}`,
      confidenceText: `${tag.confidence.toFixed(0)}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å`
    }));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const smartTagging = new SmartTagging();


/**
 * AI Chatbot - AI-–¥–µ–∂—É—Ä–Ω—ã–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–ª—é–¥–∞—Ö
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ö–ë–ñ–£, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Ü–µ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
 */

import aiBenefitGenerator from './aiBenefitGenerator';
import { checkDiabeticRestrictions, calculateDishGI } from './diabeticRestrictions';

class AIChatbot {
  constructor() {
    this.knowledgeBase = {
      // –¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
      questions: {
        calories: ['–∫–∞–ª–æ—Ä–∏–∏', '–∫–∫–∞–ª', '—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å', '–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å'],
        protein: ['–±–µ–ª–æ–∫', '–ø—Ä–æ—Ç–µ–∏–Ω', '–±–µ–ª–∫–∏'],
        carbs: ['—É–≥–ª–µ–≤–æ–¥—ã', '—Å–∞—Ö–∞—Ä', '—É–≥–ª–µ–≤–æ–¥–æ–≤'],
        fat: ['–∂–∏—Ä—ã', '–∂–∏—Ä', '–∂–∏—Ä–Ω–æ—Å—Ç—å'],
        allergens: ['–∞–ª–ª–µ—Ä–≥–∏—è', '–∞–ª–ª–µ—Ä–≥–µ–Ω', '–Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å', '–º–æ–∂–Ω–æ –ª–∏ –µ—Å—Ç—å'],
        diabetic: ['–¥–∏–∞–±–µ—Ç', '—Å–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç', '–¥–∏–∞–±–µ—Ç–∏–∫', '–≥–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å', '–≥–∏'],
        vegetarian: ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ', '–±–µ–∑ –º—è—Å–∞', '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü'],
        vegan: ['–≤–µ–≥–∞–Ω—Å–∫–æ–µ', '–±–µ–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–≤–µ–≥–∞–Ω'],
        halal: ['—Ö–∞–ª—è–ª—å', '—Ö–∞–ª–∞–ª', '–º—É—Å—É–ª—å–º–∞–Ω—Å–∫–æ–µ'],
        kosher: ['–∫–æ—à–µ—Ä–Ω–æ–µ', '–∫–∞—à—Ä—É—Ç'],
        pregnancy: ['–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å', '–±–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–∫–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–¥—å—é', '–ª–∞–∫—Ç–∞—Ü–∏—è'],
        workout: ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '–ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å'],
        weight_loss: ['–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞', '–¥–∏–µ—Ç–∞', '—Ö—É–¥–µ—Ç—å'],
        muscle_gain: ['–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã', '–º—ã—à—Ü—ã', '–º–∞—Å—Å–∞'],
        benefits: ['–ø–æ–ª—å–∑–∞', '–ø–æ–ª–µ–∑–Ω–æ', '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '–∑–∞—á–µ–º'],
        ingredients: ['—Å–æ—Å—Ç–∞–≤', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '–∏–∑ —á–µ–≥–æ'],
        cooking: ['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–∫–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å', '—Ä–µ—Ü–µ–ø—Ç'],
        storage: ['—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '–∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å'],
        portion: ['–ø–æ—Ä—Ü–∏—è', '—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏', '—Å–∫–æ–ª—å–∫–æ'],
        taste: ['–≤–∫—É—Å', '–≤–∫—É—Å–Ω–æ', '–∫–∞–∫ –Ω–∞ –≤–∫—É—Å']
      },

      // –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
      responses: {
        greeting: [
          '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI-–¥–µ–∂—É—Ä–Ω—ã–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ü§ñ',
          '–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –±–ª—é–¥–µ, –∏ —è –æ—Ç–≤–µ—á—É! üòä',
          '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –∑–Ω–∞—é –≤—Å—ë –æ –±–ª—é–¥–∞—Ö –≤ –º–µ–Ω—é. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ! üí°'
        ],
        unknown: [
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ–≥—É –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∞—Å –Ω–∞ –∂–∏–≤–æ–≥–æ –ø–æ–≤–∞—Ä–∞? ü§î',
          '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –õ—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–≤–∞—Ä–∞. –•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º? üë®‚Äçüç≥',
          '–•–º, —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π. –ü—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–¥–∞—Ç—å –µ–≥–æ –ø–æ–≤–∞—Ä—É! üí¨'
        ],
        escalate: [
          '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤–∞—Å –Ω–∞ –∂–∏–≤–æ–≥–æ –ø–æ–≤–∞—Ä–∞. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üë®‚Äçüç≥',
          '–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å —Å–æ–µ–¥–∏–Ω—è—é —Å –ø–æ–≤–∞—Ä–æ–º. –û–Ω –¥–∞—Å—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ',
          '–ü–æ–Ω—è—Ç–Ω–æ! –ü–æ–≤–∞—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏! üìû'
        ]
      }
    };

    this.conversationHistory = [];
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ –±–ª—é–¥–µ
   * @param {String} question - –í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
   * @param {Object} dish - –ë–ª—é–¥–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–∏, –∞–ª–ª–µ—Ä–≥–∏–∏ –∏ —Ç.–¥.)
   * @returns {Object} –û—Ç–≤–µ—Ç AI
   */
  async answerQuestion(question, dish, userProfile = {}) {
    console.log('üí¨ AI Chatbot processing question...', { question, dish: dish?.name, userProfile });

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
      const questionType = this.classifyQuestion(question);
      console.log('üîç Question type:', questionType);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
      const response = await this.generateResponse(questionType, question, dish, userProfile);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.conversationHistory.push({
        question,
        questionType,
        response,
        dish: dish?.name,
        timestamp: new Date().toISOString()
      });

      console.log('‚úÖ AI response generated:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error processing question:', error);
      return {
        answer: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–≤–∞—Ä—É.',
        confidence: 0,
        needsEscalation: true,
        source: 'error'
      };
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–∏–ø—É
   */
  classifyQuestion(question) {
    const lowerQuestion = question.toLowerCase();
    
    for (const [type, keywords] of Object.entries(this.knowledgeBase.questions)) {
      if (keywords.some(keyword => lowerQuestion.includes(keyword))) {
        return type;
      }
    }

    return 'general';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
   */
  async generateResponse(questionType, question, dish, userProfile) {
    if (!dish) {
      return {
        answer: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–ª—é–¥–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å.',
        confidence: 0,
        needsEscalation: false,
        source: 'validation'
      };
    }

    switch (questionType) {
      case 'calories':
        return this.answerCaloriesQuestion(dish, userProfile);
      
      case 'protein':
        return this.answerProteinQuestion(dish, userProfile);
      
      case 'carbs':
        return this.answerCarbsQuestion(dish, userProfile);
      
      case 'fat':
        return this.answerFatQuestion(dish, userProfile);
      
      case 'allergens':
        return this.answerAllergensQuestion(dish, question, userProfile);
      
      case 'diabetic':
        return this.answerDiabeticQuestion(dish, userProfile);
      
      case 'vegetarian':
        return this.answerVegetarianQuestion(dish);
      
      case 'vegan':
        return this.answerVeganQuestion(dish);
      
      case 'halal':
        return this.answerHalalQuestion(dish);
      
      case 'pregnancy':
        return this.answerPregnancyQuestion(dish);
      
      case 'workout':
        return this.answerWorkoutQuestion(dish, question, userProfile);
      
      case 'weight_loss':
        return this.answerWeightLossQuestion(dish, userProfile);
      
      case 'muscle_gain':
        return this.answerMuscleGainQuestion(dish, userProfile);
      
      case 'benefits':
        return this.answerBenefitsQuestion(dish, userProfile);
      
      case 'ingredients':
        return this.answerIngredientsQuestion(dish);
      
      case 'portion':
        return this.answerPortionQuestion(dish, userProfile);
      
      default:
        return this.answerGeneralQuestion(dish, question, userProfile);
    }
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–∞–ª–æ—Ä–∏—è—Ö
   */
  answerCaloriesQuestion(dish, userProfile) {
    const calories = dish.dishCalories || 0;
    let answer = `–ë–ª—é–¥–æ "${dish.name}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${calories} –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é. `;

    if (calories < 300) {
      answer += '–≠—Ç–æ –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ, –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞! üéØ';
    } else if (calories < 500) {
      answer += '–≠—Ç–æ —É–º–µ—Ä–µ–Ω–Ω–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ, —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. üå±';
    } else {
      answer += '–≠—Ç–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π –∏ –Ω–∞–±–æ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏. ‚ö°';
    }

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Ü–µ–ª—å
    if (userProfile.goal === 'weight_loss' && calories > 400) {
      answer += '\n\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ "–ü–æ—Ö—É–¥–µ–Ω–∏–µ" —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Ä—Ü–∏—é –ø–æ–º–µ–Ω—å—à–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É.';
    }

    return {
      answer,
      confidence: 95,
      needsEscalation: false,
      source: 'nutrition_data',
      data: { calories }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–µ–ª–∫–∞—Ö
   */
  answerProteinQuestion(dish, userProfile) {
    const protein = dish.dishProtein || 0;
    let answer = `–ë–ª—é–¥–æ "${dish.name}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${protein}–≥ –±–µ–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ü–∏—é. `;

    if (protein > 20) {
      answer += '–û—Ç–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞! üí™ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.';
    } else if (protein > 10) {
      answer += '–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã. üèÉ';
    } else {
      answer += '–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–º –±–µ–ª–∫–æ–≤—ã–º –±–ª—é–¥–æ–º. ü•ó';
    }

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Ü–µ–ª—å
    if (userProfile.goal === 'muscle_gain' && protein < 20) {
      answer += '\n\nüí° –°–æ–≤–µ—Ç: –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã" —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ü–∏—é –ø—Ä–æ—Ç–µ–∏–Ω–∞ (–º—è—Å–æ, —Ä—ã–±—É, —è–π—Ü–∞).';
    }

    return {
      answer,
      confidence: 95,
      needsEscalation: false,
      source: 'nutrition_data',
      data: { protein }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É–≥–ª–µ–≤–æ–¥–∞—Ö
   */
  answerCarbsQuestion(dish, userProfile) {
    const carbs = dish.dishCarbs || 0;
    let answer = `–ë–ª—é–¥–æ "${dish.name}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ –ø–æ—Ä—Ü–∏—é. `;

    if (carbs > 40) {
      answer += '–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ - –æ—Ç–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°';
    } else if (carbs > 20) {
      answer += '–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. üå±';
    } else {
      answer += '–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω—ã—Ö –¥–∏–µ—Ç. ü•ë';
    }

    return {
      answer,
      confidence: 95,
      needsEscalation: false,
      source: 'nutrition_data',
      data: { carbs }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∂–∏—Ä–∞—Ö
   */
  answerFatQuestion(dish, userProfile) {
    const fat = dish.dishFat || 0;
    let answer = `–ë–ª—é–¥–æ "${dish.name}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${fat}–≥ –∂–∏—Ä–æ–≤ –Ω–∞ –ø–æ—Ä—Ü–∏—é. `;

    if (fat < 10) {
      answer += '–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤, –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! üéØ';
    } else if (fat < 20) {
      answer += '–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤. üå±';
    } else {
      answer += '–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–µ—Ç–æ-–¥–∏–µ—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏. ü•ë';
    }

    return {
      answer,
      confidence: 95,
      needsEscalation: false,
      source: 'nutrition_data',
      data: { fat }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö
   */
  answerAllergensQuestion(dish, question, userProfile) {
    const ingredients = (dish.ingredients || '').toLowerCase();
    const allergens = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã
    const commonAllergens = {
      '–≥–ª—é—Ç–µ–Ω': ['–ø—à–µ–Ω–∏—Ü–∞', '—Ä–æ–∂—å', '—è—á–º–µ–Ω—å', '–æ–≤—ë—Å', '–º—É–∫–∞', '—Ö–ª–µ–±'],
      '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã': ['–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—Ç–≤–æ—Ä–æ–≥', '—Å–º–µ—Ç–∞–Ω–∞', '–º–∞—Å–ª–æ', '—Å–ª–∏–≤–∫–∏'],
      '–æ—Ä–µ—Ö–∏': ['–æ—Ä–µ—Ö–∏', '–º–∏–Ω–¥–∞–ª—å', '—Ñ—É–Ω–¥—É–∫', '–≥—Ä–µ—Ü–∫–∏–π', '–∞—Ä–∞—Ö–∏—Å'],
      '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã': ['—Ä—ã–±–∞', '–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∫—Ä–∞–±', '–ª–æ—Å–æ—Å—å', '—Ç—É–Ω–µ—Ü'],
      '—è–π—Ü–∞': ['—è–π—Ü–æ', '—è–∏—á–Ω—ã–π'],
      '—Å–æ—è': ['—Å–æ—è', '—Ç–æ—Ñ—É', '—Å–æ–µ–≤—ã–π']
    };

    Object.entries(commonAllergens).forEach(([allergen, keywords]) => {
      if (keywords.some(keyword => ingredients.includes(keyword))) {
        allergens.push(allergen);
      }
    });

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;
    
    if (allergens.length === 0) {
      answer += '–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ (–≥–ª—é—Ç–µ–Ω, –æ—Ä–µ—Ö–∏, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —è–π—Ü–∞, —Å–æ—è). ‚úÖ';
    } else {
      answer += `—Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã: ${allergens.join(', ')}. ‚ö†Ô∏è`;
    }

    answer += `\n\n–ü–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤: ${dish.ingredients || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile.allergies && userProfile.allergies.length > 0) {
      const userAllergens = userProfile.allergies.filter(allergy => allergens.includes(allergy));
      if (userAllergens.length > 0) {
        answer += `\n\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –±–ª—é–¥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã (${userAllergens.join(', ')})! –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å.`;
      }
    }

    return {
      answer,
      confidence: allergens.length === 0 ? 85 : 95,
      needsEscalation: false,
      source: 'ingredients_analysis',
      data: { allergens, ingredients: dish.ingredients }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∏–∞–±–µ—Ç–µ
   */
  answerDiabeticQuestion(dish, userProfile) {
    const ingredients = dish.ingredients ? dish.ingredients.split(',').map(i => i.trim()) : [];
    
    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;

    if (dish.diabeticFriendly) {
      answer += '–ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤. ‚úÖ\n\n';
      const gi = calculateDishGI(ingredients);
      answer += `–ì–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: ${gi.level} (${gi.value})\n`;
      answer += `–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${gi.description}`;
    } else {
      const restrictions = checkDiabeticRestrictions(ingredients);
      const gi = calculateDishGI(ingredients);
      
      answer += restrictions.suitable ? 
        '–Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤ –ø–æ —Å–æ—Å—Ç–∞–≤—É. ‚úÖ' :
        '–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤. ‚ùå';
      
      answer += `\n\n–ì–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: ${gi.level} (${gi.value})`;
      
      if (restrictions.warnings.length > 0) {
        answer += `\n\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n${restrictions.warnings.map(w => `‚ö†Ô∏è ${w}`).join('\n')}`;
      }
    }

    return {
      answer,
      confidence: 90,
      needsEscalation: !dish.diabeticFriendly && userProfile.isDiabetic,
      source: 'diabetic_analysis',
      data: { diabeticFriendly: dish.diabeticFriendly }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–µ
   */
  answerVegetarianQuestion(dish) {
    const ingredients = (dish.ingredients || '').toLowerCase();
    const meatKeywords = ['–º—è—Å–æ', '–∫—É—Ä–∏—Ü–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '–±–∞—Ä–∞–Ω–∏–Ω–∞', '—Ä—ã–±–∞', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã'];
    const hasMeat = meatKeywords.some(keyword => ingredients.includes(keyword));

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;
    
    if (!hasMeat) {
      answer += '–ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –º—è—Å–∞ –∏ —Ä—ã–±—ã. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Ü–µ–≤! ‚úÖü•ó';
    } else {
      answer += '—Å–æ–¥–µ—Ä–∂–∏—Ç –º—è—Å–æ/—Ä—ã–±—É –∏ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Ü–µ–≤. ‚ùå';
    }

    return {
      answer,
      confidence: 85,
      needsEscalation: false,
      source: 'ingredients_analysis',
      data: { vegetarian: !hasMeat }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–µ–≥–∞–Ω—Å—Ç–≤–µ
   */
  answerVeganQuestion(dish) {
    const ingredients = (dish.ingredients || '').toLowerCase();
    const animalProducts = ['–º—è—Å–æ', '–∫—É—Ä–∏—Ü–∞', '—Ä—ã–±–∞', '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—Ç–≤–æ—Ä–æ–≥', '—è–π—Ü–æ', '–º–µ–¥', '—Å–º–µ—Ç–∞–Ω–∞', '–º–∞—Å–ª–æ'];
    const hasAnimalProducts = animalProducts.some(keyword => ingredients.includes(keyword));

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;
    
    if (!hasAnimalProducts) {
      answer += '–ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–≥–∞–Ω–æ–≤! ‚úÖüåø';
    } else {
      answer += '—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–≥–∞–Ω–æ–≤. ‚ùå';
    }

    return {
      answer,
      confidence: 85,
      needsEscalation: false,
      source: 'ingredients_analysis',
      data: { vegan: !hasAnimalProducts }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–∞–ª—è–ª–µ
   */
  answerHalalQuestion(dish) {
    const ingredients = (dish.ingredients || '').toLowerCase();
    const forbiddenKeywords = ['—Å–≤–∏–Ω–∏–Ω–∞', '–∞–ª–∫–æ–≥–æ–ª—å', '–≤–∏–Ω–æ', '–ø–∏–≤–æ'];
    const hasForbidden = forbiddenKeywords.some(keyword => ingredients.includes(keyword));

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;
    
    if (!hasForbidden) {
      answer += '–ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª—è–ª—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (—Å–≤–∏–Ω–∏–Ω–∞, –∞–ª–∫–æ–≥–æ–ª—å). ‚úÖ‚ò™Ô∏è\n\n–û–¥–Ω–∞–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–≤–∞—Ä–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–∞–ª—è–ª—å–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.';
    } else {
      answer += '—Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ö–∞–ª—è–ª—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç. ‚ùå';
    }

    return {
      answer,
      confidence: hasForbidden ? 95 : 70,
      needsEscalation: !hasForbidden, // –≠—Å–∫–∞–ª–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      source: 'ingredients_analysis',
      data: { halal: !hasForbidden }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏/–ª–∞–∫—Ç–∞—Ü–∏–∏
   */
  answerPregnancyQuestion(dish) {
    const ingredients = (dish.ingredients || '').toLowerCase();
    const riskyIngredients = ['—Å—ã—Ä–∞—è —Ä—ã–±–∞', '—Å—É—à–∏', '—Å—ã—Ä–æ–µ –º—è—Å–æ', '–º—è–≥–∫–∏–π —Å—ã—Ä', '–∞–ª–∫–æ–≥–æ–ª—å'];
    const hasRiskyIngredients = riskyIngredients.some(keyword => ingredients.includes(keyword));

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;
    
    if (!hasRiskyIngredients) {
      answer += '–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏/–ª–∞–∫—Ç–∞—Ü–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. ‚úÖ\n\n–û–¥–Ω–∞–∫–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.';
    } else {
      answer += '—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏/–ª–∞–∫—Ç–∞—Ü–∏–∏. ‚ùå\n\n–°–æ–≤–µ—Ç—É—é –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ –∏–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º.';
    }

    return {
      answer,
      confidence: 60,
      needsEscalation: true, // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏
      source: 'ingredients_analysis',
      data: { safeForPregnancy: !hasRiskyIngredients }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
   */
  answerWorkoutQuestion(dish, question, userProfile) {
    const lowerQuestion = question.toLowerCase();
    const isPreWorkout = lowerQuestion.includes('–¥–æ') || lowerQuestion.includes('–ø–µ—Ä–µ–¥');
    const isPostWorkout = lowerQuestion.includes('–ø–æ—Å–ª–µ');

    const calories = dish.dishCalories || 0;
    const protein = dish.dishProtein || 0;
    const carbs = dish.dishCarbs || 0;

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;

    if (isPreWorkout) {
      if (carbs > 30 && calories < 400) {
        answer += '–û–¢–õ–ò–ß–ù–û –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π! üèãÔ∏è\n\n–°–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç –∂–µ–ª—É–¥–æ–∫.';
      } else {
        answer += '–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ª—É—á—à–∏–º –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–µ –±–ª—é–¥–∞ —Å —É–≥–ª–µ–≤–æ–¥–∞–º–∏. ‚ö†Ô∏è';
      }
    } else if (isPostWorkout) {
      if (protein > 20) {
        answer += '–û–¢–õ–ò–ß–ù–û –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™\n\n–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –º—ã—à—Ü.';
      } else {
        answer += '–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ü–∏—é –±–µ–ª–∫–∞. üí°';
      }
    } else {
      answer += `—Å–æ–¥–µ—Ä–∂–∏—Ç ${protein}–≥ –±–µ–ª–∫–∞ –∏ ${carbs}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${protein > 20 ? '–ø–æ—Å—Ç-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ' : '–ø—Ä–µ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ'} –ø–∏—Ç–∞–Ω–∏—è. üèãÔ∏è`;
    }

    return {
      answer,
      confidence: 80,
      needsEscalation: false,
      source: 'nutrition_analysis',
      data: { calories, protein, carbs }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Ö—É–¥–µ–Ω–∏–∏
   */
  answerWeightLossQuestion(dish, userProfile) {
    const calories = dish.dishCalories || 0;
    const protein = dish.dishProtein || 0;
    const fiber = dish.dishFiber || 0;

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;
    let score = 0;

    if (calories < 300) score += 3;
    else if (calories < 400) score += 2;
    else if (calories < 500) score += 1;

    if (protein > 20) score += 3;
    else if (protein > 10) score += 1;

    if (fiber > 5) score += 2;

    if (score >= 6) {
      answer += '–û–¢–õ–ò–ß–ù–û –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è! üéØ\n\n';
      answer += `‚úÖ –ù–∏–∑–∫–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (${calories} –∫–∫–∞–ª)\n`;
      if (protein > 10) answer += `‚úÖ –í—ã—Å–æ–∫–∏–π –±–µ–ª–æ–∫ (${protein}–≥) –¥–ª—è —Å—ã—Ç–æ—Å—Ç–∏\n`;
      if (fiber > 5) answer += `‚úÖ –ö–ª–µ—Ç—á–∞—Ç–∫–∞ (${fiber}–≥) –¥–ª—è –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è`;
    } else if (score >= 3) {
      answer += '–º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. üí°';
    } else {
      answer += '–º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø–æ—Ö—É–¥–µ–Ω–∏–µ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ. ‚ö†Ô∏è';
    }

    return {
      answer,
      confidence: 85,
      needsEscalation: false,
      source: 'goal_analysis',
      data: { calories, protein, fiber, score }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–±–æ—Ä–µ –º–∞—Å—Å—ã
   */
  answerMuscleGainQuestion(dish, userProfile) {
    const calories = dish.dishCalories || 0;
    const protein = dish.dishProtein || 0;

    let answer = `–ë–ª—é–¥–æ "${dish.name}" `;

    if (protein > 25 && calories > 400) {
      answer += '–ò–î–ï–ê–õ–¨–ù–û –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã! üí™\n\n';
      answer += `‚úÖ –í—ã—Å–æ–∫–∏–π –±–µ–ª–æ–∫ (${protein}–≥)\n`;
      answer += `‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (${calories} –∫–∫–∞–ª)`;
    } else if (protein > 15) {
      answer += '–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã, –Ω–æ –º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–µ–ª–∫–æ–≤–æ–≥–æ –≥–∞—Ä–Ω–∏—Ä–∞. üí°';
    } else {
      answer += '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é –±–æ–ª–µ–µ –±–µ–ª–∫–æ–≤—ã–µ –±–ª—é–¥–∞. ‚ö†Ô∏è';
    }

    return {
      answer,
      confidence: 85,
      needsEscalation: false,
      source: 'goal_analysis',
      data: { calories, protein }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–ª—å–∑–µ
   */
  answerBenefitsQuestion(dish, userProfile) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Benefit Generator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    const benefit = aiBenefitGenerator.generateBenefit(dish, 'medium', userProfile.goal);

    return {
      answer: `üí° ${benefit}`,
      confidence: 80,
      needsEscalation: false,
      source: 'ai_benefit_generator',
      data: { benefit }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
   */
  answerIngredientsQuestion(dish) {
    const ingredients = dish.ingredients || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω';

    let answer = `–ë–ª—é–¥–æ "${dish.name}" —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n\n${ingredients}`;

    if (dish.description) {
      answer += `\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${dish.description}`;
    }

    return {
      answer,
      confidence: 100,
      needsEscalation: false,
      source: 'dish_data',
      data: { ingredients }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Ä—Ü–∏–∏
   */
  answerPortionQuestion(dish, userProfile) {
    const calories = dish.dishCalories || 0;
    const price = dish.price || 0;

    let answer = `–ë–ª—é–¥–æ "${dish.name}":\n\n`;
    answer += `üìä –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ${calories} –∫–∫–∞–ª\n`;
    answer += `üí∞ –¶–µ–Ω–∞: ${price}‚ÇΩ\n`;

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—Ü–∏–∏
    if (userProfile.goal === 'weight_loss' && calories > 500) {
      answer += `\nüí° –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∑—è—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ—Ä—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º!`;
    } else if (userProfile.goal === 'muscle_gain' && calories < 400) {
      answer += `\nüí° –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∑—è—Ç—å –¥–≤–æ–π–Ω—É—é –ø–æ—Ä—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≥–∞—Ä–Ω–∏—Ä!`;
    }

    return {
      answer,
      confidence: 90,
      needsEscalation: false,
      source: 'dish_data',
      data: { calories, price }
    };
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
   */
  answerGeneralQuestion(dish, question, userProfile) {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ
    const lowerQuestion = question.toLowerCase();

    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ
    if (lowerQuestion.includes('—Ü–µ–Ω–∞') || lowerQuestion.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || lowerQuestion.includes('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç')) {
      return {
        answer: `–ë–ª—é–¥–æ "${dish.name}" —Å—Ç–æ–∏—Ç ${dish.price || 0}‚ÇΩ. üí∞`,
        confidence: 100,
        needsEscalation: false,
        source: 'dish_data',
        data: { price: dish.price }
      };
    }

    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    if (lowerQuestion.includes('–≤—Ä–µ–º—è') || lowerQuestion.includes('–±—ã—Å—Ç—Ä–æ') || lowerQuestion.includes('–¥–æ–ª–≥–æ')) {
      return {
        answer: `–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ "${dish.name}" –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫—É—Ö–Ω–∏. –û–±—ã—á–Ω–æ 15-30 –º–∏–Ω—É—Ç. ‚è±Ô∏è\n\n–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–≤–∞—Ä–∞!`,
        confidence: 50,
        needsEscalation: true,
        source: 'general_knowledge'
      };
    }

    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    if (lowerQuestion.includes('–¥–æ—Å—Ç–∞–≤–∫–∞') || lowerQuestion.includes('–¥–æ—Å—Ç–∞–≤–∏—Ç—å') || lowerQuestion.includes('–ø—Ä–∏–≤–µ–∑—Ç–∏')) {
      return {
        answer: `–î–∞, –º—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º "${dish.name}"! üöó\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —É —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏!`,
        confidence: 70,
        needsEscalation: true,
        source: 'general_knowledge'
      };
    }

    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å - —ç—Å–∫–∞–ª–∞—Ü–∏—è
    return {
      answer: this.knowledgeBase.responses.unknown[Math.floor(Math.random() * this.knowledgeBase.responses.unknown.length)],
      confidence: 0,
      needsEscalation: true,
      source: 'unknown',
      suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –∫–∞–ª–æ—Ä–∏—è—Ö, –±–µ–ª–∫–∞—Ö, –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö –∏–ª–∏ –ø–æ–ª—å–∑–µ –±–ª—é–¥–∞.'
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
   */
  generateSuggestedQuestions(dish, userProfile = {}) {
    const suggestions = [];

    // –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    suggestions.push('–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —ç—Ç–æ–º –±–ª—é–¥–µ?');
    suggestions.push('–°–∫–æ–ª—å–∫–æ –±–µ–ª–∫–∞ –≤ —ç—Ç–æ–º –±–ª—é–¥–µ?');
    suggestions.push('–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —ç—Ç–æ–º –±–ª—é–¥–µ?');

    // –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ü–µ–ª—è–º
    if (userProfile.goal === 'weight_loss') {
      suggestions.push('–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ –±–ª—é–¥–æ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?');
    } else if (userProfile.goal === 'muscle_gain') {
      suggestions.push('–ú–æ–∂–Ω–æ –ª–∏ –µ—Å—Ç—å —ç—Ç–æ –±–ª—é–¥–æ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?');
    }

    // –í–æ–ø—Ä–æ—Å—ã –ø–æ –∞–ª–ª–µ—Ä–≥–∏—è–º
    if (userProfile.allergies && userProfile.allergies.length > 0) {
      suggestions.push(`–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç—Ç–æ –±–ª—é–¥–æ ${userProfile.allergies[0]}?`);
    }

    // –í–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∏–µ—Ç–µ
    if (userProfile.isDiabetic) {
      suggestions.push('–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ –±–ª—é–¥–æ –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤?');
    }

    suggestions.push('–í —á–µ–º –ø–æ–ª—å–∑–∞ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞?');

    return suggestions;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—è –∫ –∂–∏–≤–æ–º—É –ø–æ–≤–∞—Ä—É
   */
  shouldEscalate(response) {
    return response.needsEscalation || response.confidence < 70;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
   */
  generateEscalationMessage(question, dish, response) {
    return {
      type: 'escalation',
      message: this.knowledgeBase.responses.escalate[Math.floor(Math.random() * this.knowledgeBase.responses.escalate.length)],
      originalQuestion: question,
      dishName: dish.name,
      aiResponse: response.answer,
      aiConfidence: response.confidence,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  getConversationHistory() {
    return this.conversationHistory;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  clearHistory() {
    this.conversationHistory = [];
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
const aiChatbot = new AIChatbot();
export default aiChatbot;

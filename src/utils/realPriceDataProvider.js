// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –º–∞–≥–∞–∑–∏–Ω–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤

export class RealPriceDataProvider {
  constructor() {
    this.apiEndpoints = this.initializeAPIEndpoints();
    this.cache = new Map();
    this.cacheTimeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  initializeAPIEndpoints() {
    return {
      // –§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      rosstat: {
        baseUrl: 'https://rosstat.gov.ru/api',
        endpoints: {
          foodPrices: '/food-prices',
          inflation: '/inflation'
        }
      },
      
      // API –º–∞–≥–∞–∑–∏–Ω–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö API)
      stores: {
        magnit: {
          baseUrl: 'https://api.magnit.ru/v1',
          endpoints: {
            products: '/products',
            prices: '/prices'
          },
          headers: {
            'Authorization': 'Bearer YOUR_MAGNIT_API_KEY'
          }
        },
        ashan: {
          baseUrl: 'https://api.ashan.ru/v1',
          endpoints: {
            products: '/products',
            prices: '/prices'
          },
          headers: {
            'Authorization': 'Bearer YOUR_ASHAN_API_KEY'
          }
        },
        korzinka: {
          baseUrl: 'https://api.korzinka.ru/v1',
          endpoints: {
            products: '/products',
            prices: '/prices'
          },
          headers: {
            'Authorization': 'Bearer YOUR_KORZINKA_API_KEY'
          }
        },
        metro: {
          baseUrl: 'https://api.metro.ru/v1',
          endpoints: {
            products: '/products',
            prices: '/prices'
          },
          headers: {
            'Authorization': 'Bearer YOUR_METRO_API_KEY'
          }
        }
      },
      
      // API –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
      delivery: {
        yandexEda: {
          baseUrl: 'https://eda.yandex.ru/api/v2',
          endpoints: {
            restaurants: '/restaurants',
            menu: '/menu',
            prices: '/prices'
          }
        },
        deliveryClub: {
          baseUrl: 'https://api.delivery-club.ru/v1',
          endpoints: {
            restaurants: '/restaurants',
            menu: '/menu',
            prices: '/prices'
          }
        },
        uberEats: {
          baseUrl: 'https://api.ubereats.com/v1',
          endpoints: {
            restaurants: '/restaurants',
            menu: '/menu',
            prices: '/prices'
          }
        }
      }
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  async getProductPrices(productName, region = 'moscow') {
    const cacheKey = `${productName}_${region}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        return cached.data;
      }
    }

    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω –¥–ª—è: "${productName}"`);
      
      const prices = await Promise.allSettled([
        this.getStorePrices(productName, region),
        this.getRestaurantPrices(productName, region),
        this.getStatisticalPrices(productName, region)
      ]);

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω:', prices);

      const result = this.aggregatePrices(prices, productName);
      
      console.log('‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:', error);
      return this.getFallbackPrices(productName);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  async getStorePrices(productName, region) {
    const storePrices = [];
    
    for (const [storeName, storeConfig] of Object.entries(this.apiEndpoints.stores)) {
      try {
        const price = await this.fetchStorePrice(storeName, productName, region, storeConfig);
        if (price) {
          storePrices.push({
            store: storeName,
            price: price.price,
            unit: price.unit,
            availability: price.availability,
            lastUpdated: price.lastUpdated
          });
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ ${storeName}:`, error);
      }
    }

    return storePrices;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
  async fetchStorePrice(storeName, productName, region, config) {
    // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç fetch)
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
    const mockPrices = this.getMockStorePrices(storeName, productName);
    return mockPrices;
  }

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω)
  getMockStorePrices(storeName, productName) {
    const basePrices = {
      // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
      '–≥–æ–≤—è–¥–∏–Ω–∞': { magnit: 180, ashan: 200, korzinka: 190, metro: 170 },
      '–∫—É—Ä–∏—Ü–∞': { magnit: 120, ashan: 140, korzinka: 130, metro: 110 },
      '—Å–≤–∏–Ω–∏–Ω–∞': { magnit: 150, ashan: 170, korzinka: 160, metro: 140 },
      '–±–∞—Ä–∞–Ω–∏–Ω–∞': { magnit: 200, ashan: 220, korzinka: 210, metro: 190 },
      '–∏–Ω–¥–µ–π–∫–∞': { magnit: 140, ashan: 160, korzinka: 150, metro: 130 },
      '—É—Ç–∫–∞': { magnit: 200, ashan: 220, korzinka: 210, metro: 190 },
      
      // –†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã
      '–ª–æ—Å–æ—Å—å': { magnit: 250, ashan: 280, korzinka: 270, metro: 240 },
      '—Ç—Ä–µ—Å–∫–∞': { magnit: 150, ashan: 170, korzinka: 160, metro: 140 },
      '–≥–æ—Ä–±—É—à–∞': { magnit: 120, ashan: 140, korzinka: 130, metro: 110 },
      '–∫—Ä–µ–≤–µ—Ç–∫–∏': { magnit: 300, ashan: 350, korzinka: 320, metro: 280 },
      
      // –û–≤–æ—â–∏
      '–ø–æ–º–∏–¥–æ—Ä—ã': { magnit: 60, ashan: 70, korzinka: 65, metro: 55 },
      '–æ–≥—É—Ä—Ü—ã': { magnit: 50, ashan: 60, korzinka: 55, metro: 45 },
      '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': { magnit: 25, ashan: 30, korzinka: 28, metro: 22 },
      '–ª—É–∫': { magnit: 15, ashan: 18, korzinka: 16, metro: 12 },
      '–º–æ—Ä–∫–æ–≤—å': { magnit: 20, ashan: 25, korzinka: 22, metro: 18 },
      '–∫–∞–ø—É—Å—Ç–∞': { magnit: 18, ashan: 22, korzinka: 20, metro: 16 },
      '—Å–≤–µ–∫–ª–∞': { magnit: 22, ashan: 28, korzinka: 25, metro: 20 },
      '—á–µ—Å–Ω–æ–∫': { magnit: 40, ashan: 50, korzinka: 45, metro: 35 },
      
      // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      '–º–æ–ª–æ–∫–æ': { magnit: 40, ashan: 45, korzinka: 42, metro: 38 },
      '—Å—ã—Ä': { magnit: 200, ashan: 250, korzinka: 220, metro: 180 },
      '—Ç–≤–æ—Ä–æ–≥': { magnit: 80, ashan: 100, korzinka: 90, metro: 75 },
      '—Å–º–µ—Ç–∞–Ω–∞': { magnit: 60, ashan: 75, korzinka: 68, metro: 55 },
      '–º–∞—Å–ª–æ': { magnit: 120, ashan: 150, korzinka: 135, metro: 110 },
      
      // –ö—Ä—É–ø—ã –∏ –º–∞–∫–∞—Ä–æ–Ω—ã
      '—Ä–∏—Å': { magnit: 30, ashan: 35, korzinka: 32, metro: 28 },
      '–º–∞–∫–∞—Ä–æ–Ω—ã': { magnit: 25, ashan: 30, korzinka: 27, metro: 22 },
      '–≥—Ä–µ—á–∫–∞': { magnit: 35, ashan: 40, korzinka: 37, metro: 32 },
      '–æ–≤—Å—è–Ω–∫–∞': { magnit: 28, ashan: 35, korzinka: 32, metro: 25 },
      
      // –•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞
      '—Ö–ª–µ–±': { magnit: 20, ashan: 25, korzinka: 22, metro: 18 },
      '–º—É–∫–∞': { magnit: 35, ashan: 40, korzinka: 37, metro: 32 },
      
      // –°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã
      '—Å–æ–ª—å': { magnit: 8, ashan: 10, korzinka: 9, metro: 7 },
      '–ø–µ—Ä–µ—Ü': { magnit: 15, ashan: 20, korzinka: 18, metro: 12 },
      '–ª–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—Ç': { magnit: 12, ashan: 15, korzinka: 13, metro: 10 },
      '—Ç–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞': { magnit: 40, ashan: 50, korzinka: 45, metro: 35 },
      '–º–∞–π–æ–Ω–µ–∑': { magnit: 60, ashan: 75, korzinka: 68, metro: 55 }
    };

    const productKey = this.findProductKey(productName, basePrices);
    if (!productKey) return null;

    const price = basePrices[productKey][storeName];
    if (!price) return null;

    return {
      price: price,
      unit: '100–≥',
      availability: Math.random() > 0.1, // 90% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è
      lastUpdated: new Date().toISOString()
    };
  }

  // –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ
  findProductKey(productName, basePrices) {
    const name = productName.toLowerCase().trim();
    console.log(`üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ –¥–ª—è: "${name}"`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (basePrices[name]) {
      console.log(`‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${name}"`);
      return name;
    }
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const key of Object.keys(basePrices)) {
      if (name.includes(key) || key.includes(name)) {
        console.log(`‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${key}" –¥–ª—è "${name}"`);
        return key;
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
    const words = name.split(/[\s,;]+/);
    console.log(`üîç –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:`, words);
    for (const word of words) {
      if (word.length > 2 && basePrices[word]) {
        console.log(`‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É: "${word}" –¥–ª—è "${name}"`);
        return word;
      }
    }
    
    console.log(`‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: "${name}"`);
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  async getRestaurantPrices(dishName, region) {
    const restaurantPrices = [];
    
    for (const [serviceName, serviceConfig] of Object.entries(this.apiEndpoints.delivery)) {
      try {
        const prices = await this.fetchRestaurantPrices(serviceName, dishName, region, serviceConfig);
        restaurantPrices.push(...prices);
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ ${serviceName}:`, error);
      }
    }

    return restaurantPrices;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  async fetchRestaurantPrices(serviceName, dishName, region, config) {
    // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    const mockRestaurantPrices = this.getMockRestaurantPrices(serviceName, dishName);
    return mockRestaurantPrices;
  }

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  getMockRestaurantPrices(serviceName, dishName) {
    const dishPrices = {
      '–±–æ—Ä—â': { min: 120, avg: 180, max: 250 },
      '—Å–æ–ª—è–Ω–∫–∞': { min: 140, avg: 200, max: 280 },
      '—Å–æ–ª—è–Ω–∫–∞ –º—è—Å–Ω–∞—è': { min: 150, avg: 220, max: 300 },
      '—Ü–µ–∑–∞—Ä—å': { min: 150, avg: 220, max: 300 },
      '–ø–ª–æ–≤': { min: 200, avg: 280, max: 350 },
      '–ø–∞—Å—Ç–∞': { min: 180, avg: 250, max: 320 },
      '–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞': { min: 220, avg: 300, max: 380 },
      '—Å—Ç–µ–π–∫': { min: 400, avg: 600, max: 800 },
      '—Å–∞–ª–∞—Ç': { min: 100, avg: 150, max: 200 },
      '—Å—É–ø': { min: 100, avg: 150, max: 200 },
      '–ø–∏—Ü—Ü–∞': { min: 300, avg: 450, max: 600 },
      '—Ä–æ–ª–ª—ã': { min: 200, avg: 300, max: 400 },
      '—à–∞—à–ª—ã–∫': { min: 250, avg: 350, max: 450 },
      '–æ–∫—Ä–æ—à–∫–∞': { min: 120, avg: 180, max: 250 },
      '—â–∏': { min: 100, avg: 150, max: 200 },
      '—Ä–∞–≥—É': { min: 180, avg: 250, max: 320 },
      '–∂–∞—Ä–∫–æ–µ': { min: 200, avg: 280, max: 350 }
    };

    const dishKey = this.findDishKey(dishName, dishPrices);
    if (!dishKey) return [];

    const priceRange = dishPrices[dishKey];
    const restaurants = [
      { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ü—Ä–µ–º–∏—É–º"', price: priceRange.max, rating: 4.8 },
      { name: '–ö–∞—Ñ–µ "–°—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å"', price: priceRange.avg, rating: 4.2 },
      { name: '–°—Ç–æ–ª–æ–≤–∞—è "–ë—é–¥–∂–µ—Ç"', price: priceRange.min, rating: 3.8 },
      { name: '–î–æ–º–∞—à–Ω—è—è –∫—É—Ö–Ω—è', price: Math.round(priceRange.avg * 0.7), rating: 4.5 }
    ];

    return restaurants.map(restaurant => ({
      service: serviceName,
      restaurant: restaurant.name,
      dish: dishName,
      price: restaurant.price,
      rating: restaurant.rating,
      lastUpdated: new Date().toISOString()
    }));
  }

  // –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ –±–ª—é–¥–∞
  findDishKey(dishName, dishPrices) {
    const name = dishName.toLowerCase().trim();
    console.log(`üçΩÔ∏è –ü–æ–∏—Å–∫ –±–ª—é–¥–∞ –¥–ª—è: "${name}"`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (dishPrices[name]) {
      console.log(`‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–ª—é–¥–∞: "${name}"`);
      return name;
    }
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const key of Object.keys(dishPrices)) {
      if (name.includes(key) || key.includes(name)) {
        console.log(`‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–ª—é–¥–∞: "${key}" –¥–ª—è "${name}"`);
        return key;
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
    const words = name.split(/[\s,;]+/);
    console.log(`üîç –°–ª–æ–≤–∞ –±–ª—é–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:`, words);
    for (const word of words) {
      if (word.length > 3 && dishPrices[word]) {
        console.log(`‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É –±–ª—é–¥–∞: "${word}" –¥–ª—è "${name}"`);
        return word;
      }
    }
    
    console.log(`‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è: "${name}"`);
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω
  async getStatisticalPrices(productName, region) {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –†–æ—Å—Å—Ç–∞—Ç—É
      await new Promise(resolve => setTimeout(resolve, 150));
      
      return {
        source: 'rosstat',
        product: productName,
        region: region,
        averagePrice: this.getStatisticalAveragePrice(productName),
        inflation: 5.2, // –ü—Ä–æ—Ü–µ–Ω—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
  getStatisticalAveragePrice(productName) {
    const statisticalPrices = {
      '–≥–æ–≤—è–¥–∏–Ω–∞': 190,
      '–∫—É—Ä–∏—Ü–∞': 130,
      '—Å–≤–∏–Ω–∏–Ω–∞': 160,
      '–ª–æ—Å–æ—Å—å': 260,
      '—Ç—Ä–µ—Å–∫–∞': 160,
      '–ø–æ–º–∏–¥–æ—Ä—ã': 65,
      '–æ–≥—É—Ä—Ü—ã': 55,
      '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': 28,
      '–ª—É–∫': 16,
      '–º–æ—Ä–∫–æ–≤—å': 22,
      '–º–æ–ª–æ–∫–æ': 42,
      '—Å—ã—Ä': 220,
      '—Ö–ª–µ–±': 22,
      '—Ä–∏—Å': 32,
      '–º–∞–∫–∞—Ä–æ–Ω—ã': 27
    };

    const productKey = this.findProductKey(productName, statisticalPrices);
    return statisticalPrices[productKey] || 100;
  }

  // –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ü–µ–Ω –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  aggregatePrices(prices, productName) {
    const storePrices = prices[0].status === 'fulfilled' ? prices[0].value : [];
    const restaurantPrices = prices[1].status === 'fulfilled' ? prices[1].value : [];
    const statisticalData = prices[2].status === 'fulfilled' ? prices[2].value : null;

    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω
    const storeAverage = this.calculateAverage(storePrices.map(p => p.price));
    const restaurantAverage = this.calculateAverage(restaurantPrices.map(p => p.price));
    const statisticalAverage = statisticalData ? statisticalData.averagePrice : null;

    return {
      product: productName,
      storePrices: {
        data: storePrices,
        average: storeAverage,
        min: Math.min(...storePrices.map(p => p.price)),
        max: Math.max(...storePrices.map(p => p.price))
      },
      restaurantPrices: {
        data: restaurantPrices,
        average: restaurantAverage,
        min: Math.min(...restaurantPrices.map(p => p.price)),
        max: Math.max(...restaurantPrices.map(p => p.price))
      },
      statistical: statisticalData,
      recommendations: this.generatePriceRecommendations(storeAverage, restaurantAverage, statisticalAverage),
      lastUpdated: new Date().toISOString()
    };
  }

  // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  calculateAverage(prices) {
    if (prices.length === 0) return 0;
    return Math.round(prices.reduce((sum, price) => sum + price, 0) / prices.length);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
  generatePriceRecommendations(storeAverage, restaurantAverage, statisticalAverage) {
    const recommendations = [];

    if (storeAverage && restaurantAverage) {
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
      const homeKitchenPrice = Math.round(restaurantAverage * 0.6); // 40% –¥–µ—à–µ–≤–ª–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
      recommendations.push({
        type: 'competitive',
        message: `–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö ${restaurantAverage}‚ÇΩ, —É –≤–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–∞ ${homeKitchenPrice}‚ÇΩ –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—ã—Ç—å –≤—ã–≥–æ–¥–Ω–µ–µ`,
        suggestedPrice: homeKitchenPrice,
        savings: restaurantAverage - homeKitchenPrice
      });
    }

    if (statisticalAverage) {
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statisticalPrice = Math.round(statisticalAverage * 1.5); // 50% –Ω–∞—Ü–µ–Ω–∫–∞
      recommendations.push({
        type: 'statistical',
        message: `–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ${statisticalAverage}‚ÇΩ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ ${statisticalPrice}‚ÇΩ`,
        suggestedPrice: statisticalPrice,
        markup: 50
      });
    }

    return recommendations;
  }

  // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ü–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ API
  getFallbackPrices(productName) {
    return {
      product: productName,
      storePrices: { data: [], average: 0, min: 0, max: 0 },
      restaurantPrices: { data: [], average: 0, min: 0, max: 0 },
      statistical: null,
      recommendations: [{
        type: 'fallback',
        message: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API',
        suggestedPrice: 100
      }],
      lastUpdated: new Date().toISOString()
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache() {
    this.cache.clear();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º
  getPriceStatistics() {
    const stats = {
      totalProducts: this.cache.size,
      averageStorePrice: 0,
      averageRestaurantPrice: 0,
      priceRange: { min: Infinity, max: 0 },
      lastUpdate: new Date().toISOString()
    };

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∫—ç—à–∞
    const allPrices = Array.from(this.cache.values()).map(item => item.data);
    
    if (allPrices.length > 0) {
      const storePrices = allPrices.flatMap(item => item.storePrices.data.map(p => p.price));
      const restaurantPrices = allPrices.flatMap(item => item.restaurantPrices.data.map(p => p.price));
      
      stats.averageStorePrice = this.calculateAverage(storePrices);
      stats.averageRestaurantPrice = this.calculateAverage(restaurantPrices);
      
      const allPricesFlat = [...storePrices, ...restaurantPrices];
      if (allPricesFlat.length > 0) {
        stats.priceRange.min = Math.min(...allPricesFlat);
        stats.priceRange.max = Math.max(...allPricesFlat);
      }
    }

    return stats;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const realPriceProvider = new RealPriceDataProvider();

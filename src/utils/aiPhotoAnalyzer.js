/**
 * AI Photo Analyzer - –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–ª—é–¥
 * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
 */

class AIPhotoAnalyzer {
  constructor() {
    this.qualityThresholds = {
      brightness: { min: 80, max: 220, ideal: 150 },
      contrast: { min: 40, ideal: 70 },
      sharpness: { min: 50, ideal: 80 },
      colorBalance: { tolerance: 30 }
    };

    this.compositionRules = {
      centerWeight: 0.4, // –í–µ—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
      ruleOfThirds: true, // –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π
      negativespace: 0.2 // –ú–∏–Ω–∏–º—É–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    };

    this.dishCharacteristics = {
      expectedColors: {
        '—Å–∞–ª–∞—Ç': ['green', 'red', 'yellow'],
        '–º—è—Å–æ': ['brown', 'red'],
        '—Ä—ã–±–∞': ['white', 'pink', 'orange'],
        '—Å—É–ø': ['orange', 'red', 'yellow'],
        '–¥–µ—Å–µ—Ä—Ç': ['white', 'brown', 'pink'],
        '–ø–∞—Å—Ç–∞': ['yellow', 'white', 'red']
      },
      expectedTextures: {
        '—Å–∞–ª–∞—Ç': ['leafy', 'crisp'],
        '–º—è—Å–æ': ['smooth', 'textured'],
        '—Ä—ã–±–∞': ['smooth', 'flaky'],
        '—Ö–ª–µ–±': ['textured', 'rough']
      }
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞
   * @param {String} imageDataUrl - Data URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Object} dishInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  async analyzePhoto(imageDataUrl, dishInfo = {}) {
    console.log('üì∏ Starting photo analysis...', { dishName: dishInfo.name });

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º data URL –≤ ImageData
      const imageData = await this.loadImage(imageDataUrl);
      
      const analysis = {
        overall: {
          score: 0,
          status: 'unknown',
          message: ''
        },
        technical: {
          brightness: null,
          contrast: null,
          sharpness: null,
          colorBalance: null,
          resolution: null
        },
        composition: {
          centering: null,
          ruleOfThirds: null,
          negativespace: null
        },
        content: {
          dishMatch: null,
          colorMatch: null,
          textureMatch: null,
          appetiteAppeal: null
        },
        recommendations: [],
        timestamp: new Date().toISOString()
      };

      // 1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      analysis.technical = await this.analyzeTechnicalQuality(imageData);
      
      // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
      analysis.composition = await this.analyzeComposition(imageData);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
      if (dishInfo.name) {
        analysis.content = await this.analyzeContent(imageData, dishInfo);
      }
      
      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      analysis.recommendations = this.generateRecommendations(analysis);
      
      // 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
      analysis.overall = this.calculateOverallScore(analysis);

      console.log('‚úÖ Photo analysis completed:', analysis.overall);
      return analysis;
    } catch (error) {
      console.error('‚ùå Photo analysis error:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ data URL
   */
  async loadImage(dataUrl) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        resolve(imageData);
      };
      img.onerror = reject;
      img.src = dataUrl;
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
   */
  async analyzeTechnicalQuality(imageData) {
    const technical = {};

    // –ê–Ω–∞–ª–∏–∑ —è—Ä–∫–æ—Å—Ç–∏
    technical.brightness = this.analyzeBrightness(imageData);
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    technical.contrast = this.analyzeContrast(imageData);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–∫–æ—Å—Ç–∏
    technical.sharpness = this.analyzeSharpness(imageData);
    
    // –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    technical.colorBalance = this.analyzeColorBalance(imageData);
    
    // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    technical.resolution = {
      width: imageData.width,
      height: imageData.height,
      megapixels: (imageData.width * imageData.height / 1000000).toFixed(2),
      isHD: imageData.width >= 1280 && imageData.height >= 720
    };

    return technical;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —è—Ä–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  analyzeBrightness(imageData) {
    const { data } = imageData;
    let totalBrightness = 0;
    const pixelCount = data.length / 4;

    for (let i = 0; i < data.length; i += 4) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      const brightness = (r + g + b) / 3;
      totalBrightness += brightness;
    }

    const avgBrightness = totalBrightness / pixelCount;
    const { min, max, ideal } = this.qualityThresholds.brightness;

    let status, message, recommendation;
    
    if (avgBrightness < min) {
      status = 'too_dark';
      message = '–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ';
      recommendation = `–£–≤–µ–ª–∏—á—å—Ç–µ —è—Ä–∫–æ—Å—Ç—å –Ω–∞ ${Math.round((min - avgBrightness) / min * 100)}%`;
    } else if (avgBrightness > max) {
      status = 'too_bright';
      message = '–§–æ—Ç–æ –ø–µ—Ä–µ—ç–∫—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      recommendation = `–£–º–µ–Ω—å—à–∏—Ç–µ —è—Ä–∫–æ—Å—Ç—å –Ω–∞ ${Math.round((avgBrightness - max) / max * 100)}%`;
    } else {
      const idealDiff = Math.abs(avgBrightness - ideal);
      if (idealDiff < 20) {
        status = 'excellent';
        message = '–ò–¥–µ–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å';
      } else {
        status = 'good';
        message = '–•–æ—Ä–æ—à–∞—è —è—Ä–∫–æ—Å—Ç—å';
        recommendation = avgBrightness < ideal ? 
          '–ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å' : 
          '–ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å';
      }
    }

    return {
      value: Math.round(avgBrightness),
      status,
      message,
      recommendation,
      score: this.calculateBrightnessScore(avgBrightness)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  analyzeContrast(imageData) {
    const { data } = imageData;
    let minBrightness = 255;
    let maxBrightness = 0;

    for (let i = 0; i < data.length; i += 4) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      const brightness = (r + g + b) / 3;
      
      minBrightness = Math.min(minBrightness, brightness);
      maxBrightness = Math.max(maxBrightness, brightness);
    }

    const contrast = maxBrightness - minBrightness;
    const { min, ideal } = this.qualityThresholds.contrast;

    let status, message, recommendation;

    if (contrast < min) {
      status = 'low';
      message = '–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç';
      recommendation = '–£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏';
    } else if (contrast >= ideal) {
      status = 'excellent';
      message = '–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç';
    } else {
      status = 'good';
      message = '–•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç';
    }

    return {
      value: Math.round(contrast),
      status,
      message,
      recommendation,
      score: this.calculateContrastScore(contrast)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  analyzeSharpness(imageData) {
    const { data, width } = imageData;
    let edgeStrength = 0;
    let edgeCount = 0;

    // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∞–µ–≤ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ)
    for (let i = 0; i < data.length - (width * 4 + 4); i += 4) {
      const currentPixel = (data[i] + data[i + 1] + data[i + 2]) / 3;
      const nextPixel = (data[i + 4] + data[i + 5] + data[i + 6]) / 3;
      const diff = Math.abs(currentPixel - nextPixel);
      
      if (diff > 30) {
        edgeStrength += diff;
        edgeCount++;
      }
    }

    const avgEdgeStrength = edgeCount > 0 ? edgeStrength / edgeCount : 0;
    const sharpnessScore = Math.min(100, avgEdgeStrength);

    const { min, ideal } = this.qualityThresholds.sharpness;

    let status, message, recommendation;

    if (sharpnessScore < min) {
      status = 'blurry';
      message = '–§–æ—Ç–æ —Ä–∞–∑–º—ã—Ç–æ';
      recommendation = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ —à—Ç–∞—Ç–∏–≤. –ü—Ä–æ—Ç—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç–∏–≤.';
    } else if (sharpnessScore >= ideal) {
      status = 'excellent';
      message = '–û—Ç–ª–∏—á–Ω–∞—è —á–µ—Ç–∫–æ—Å—Ç—å';
    } else {
      status = 'good';
      message = '–•–æ—Ä–æ—à–∞—è —á–µ—Ç–∫–æ—Å—Ç—å';
      recommendation = '–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É';
    }

    return {
      value: Math.round(sharpnessScore),
      status,
      message,
      recommendation,
      score: sharpnessScore
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –±–∞–ª–∞–Ω—Å
   */
  analyzeColorBalance(imageData) {
    const { data } = imageData;
    let totalR = 0, totalG = 0, totalB = 0;
    const pixelCount = data.length / 4;

    for (let i = 0; i < data.length; i += 4) {
      totalR += data[i];
      totalG += data[i + 1];
      totalB += data[i + 2];
    }

    const avgR = totalR / pixelCount;
    const avgG = totalG / pixelCount;
    const avgB = totalB / pixelCount;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å
    const maxChannel = Math.max(avgR, avgG, avgB);
    const minChannel = Math.min(avgR, avgG, avgB);
    const imbalance = maxChannel - minChannel;

    const { tolerance } = this.qualityThresholds.colorBalance;

    let status, message, recommendation;

    if (imbalance < tolerance) {
      status = 'balanced';
      message = '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞';
    } else {
      status = 'imbalanced';
      message = '–¶–≤–µ—Ç–æ–≤–æ–π –¥–∏—Å–±–∞–ª–∞–Ω—Å';
      
      if (avgR > avgG && avgR > avgB) {
        recommendation = '–£–º–µ–Ω—å—à–∏—Ç–µ –∫—Ä–∞—Å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ (—Ç–µ–ø–ª—ã–π –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ)';
      } else if (avgB > avgR && avgB > avgG) {
        recommendation = '–£–º–µ–Ω—å—à–∏—Ç–µ —Å–∏–Ω–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ (—Ö–æ–ª–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ)';
      } else {
        recommendation = '–û—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ';
      }
    }

    return {
      rgb: { r: Math.round(avgR), g: Math.round(avgG), b: Math.round(avgB) },
      imbalance: Math.round(imbalance),
      status,
      message,
      recommendation,
      score: this.calculateColorBalanceScore(imbalance)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ–æ—Ç–æ
   */
  async analyzeComposition(imageData) {
    const composition = {};

    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    composition.centering = this.analyzeCentering(imageData);
    
    // –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π
    composition.ruleOfThirds = this.analyzeRuleOfThirds(imageData);
    
    // –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    composition.negativeSpace = this.analyzeNegativeSpace(imageData);

    return composition;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   */
  analyzeCentering(imageData) {
    const { width, height, data } = imageData;
    const centerX = width / 2;
    const centerY = height / 2;
    const centerRadius = Math.min(width, height) / 4;

    let centerBrightness = 0;
    let edgeBrightness = 0;
    let centerPixels = 0;
    let edgePixels = 0;

    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const index = (y * width + x) * 4;
        const brightness = (data[index] + data[index + 1] + data[index + 2]) / 3;
        const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));

        if (distance < centerRadius) {
          centerBrightness += brightness;
          centerPixels++;
        } else if (distance > centerRadius * 2) {
          edgeBrightness += brightness;
          edgePixels++;
        }
      }
    }

    const avgCenterBrightness = centerBrightness / centerPixels;
    const avgEdgeBrightness = edgeBrightness / edgePixels;
    const centeringScore = Math.min(100, (avgCenterBrightness / avgEdgeBrightness) * 50);

    let status, message;
    
    if (centeringScore > 70) {
      status = 'excellent';
      message = '–û—Ç–ª–∏—á–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞';
    } else if (centeringScore > 50) {
      status = 'good';
      message = '–•–æ—Ä–æ—à–µ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ';
    } else {
      status = 'poor';
      message = '–ë–ª—é–¥–æ —Å–º–µ—â–µ–Ω–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞';
    }

    return {
      score: Math.round(centeringScore),
      status,
      message,
      recommendation: centeringScore < 60 ? '–†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –±–ª—é–¥–æ –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –∫–∞–¥—Ä–∞' : null
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª—É —Ç—Ä–µ—Ç–µ–π
   */
  analyzeRuleOfThirds(imageData) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –ª–∏–Ω–∏—è—Ö —Ç—Ä–µ—Ç–µ–π
    const { width, height } = imageData;
    
    const thirdLines = {
      vertical: [width / 3, (width * 2) / 3],
      horizontal: [height / 3, (height * 2) / 3]
    };

    return {
      score: 75, // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
      status: 'good',
      message: '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—É —Ç—Ä–µ—Ç–µ–π',
      lines: thirdLines
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
   */
  analyzeNegativeSpace(imageData) {
    const { data } = imageData;
    let lightPixels = 0;
    const threshold = 200;

    for (let i = 0; i < data.length; i += 4) {
      const brightness = (data[i] + data[i + 1] + data[i + 2]) / 3;
      if (brightness > threshold) {
        lightPixels++;
      }
    }

    const negativeSpaceRatio = lightPixels / (data.length / 4);
    const score = Math.min(100, negativeSpaceRatio * 200);

    let status, message;

    if (negativeSpaceRatio > 0.3) {
      status = 'good';
      message = '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞';
    } else if (negativeSpaceRatio > 0.15) {
      status = 'moderate';
      message = '–£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞';
    } else {
      status = 'cluttered';
      message = '–ö–∞–¥—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω';
    }

    return {
      ratio: Math.round(negativeSpaceRatio * 100),
      score: Math.round(score),
      status,
      message,
      recommendation: negativeSpaceRatio < 0.15 ? '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤–æ–∫—Ä—É–≥ –±–ª—é–¥–∞' : null
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ç–æ
   */
  async analyzeContent(imageData, dishInfo) {
    const content = {};

    // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
    content.colorMatch = this.analyzeColorMatch(imageData, dishInfo);
    
    // –ê–Ω–∞–ª–∏–∑ –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç–∏
    content.appetiteAppeal = this.analyzeAppetiteAppeal(imageData, dishInfo);
    
    // –û–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–ª—é–¥—É
    content.dishMatch = {
      score: Math.round((content.colorMatch.score + content.appetiteAppeal.score) / 2),
      status: 'good',
      message: '–§–æ—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–ª—é–¥—É'
    };

    return content;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–≤–µ—Ç–æ–≤ –±–ª—é–¥–∞
   */
  analyzeColorMatch(imageData, dishInfo) {
    const dishType = this.identifyDishType(dishInfo.name);
    const expectedColors = this.dishCharacteristics.expectedColors[dishType] || [];
    
    const dominantColors = this.getDominantColors(imageData);
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
    const matchScore = expectedColors.length > 0 ? 80 : 70;

    return {
      score: matchScore,
      dominantColors,
      expectedColors,
      status: 'good',
      message: '–¶–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±–ª—é–¥—É'
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –±–ª—é–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  identifyDishType(name) {
    const lowerName = name.toLowerCase();
    
    if (lowerName.includes('—Å–∞–ª–∞—Ç')) return '—Å–∞–ª–∞—Ç';
    if (lowerName.includes('–º—è—Å–æ') || lowerName.includes('–≥–æ–≤—è–¥–∏–Ω–∞') || lowerName.includes('—Å–≤–∏–Ω–∏–Ω–∞')) return '–º—è—Å–æ';
    if (lowerName.includes('—Ä—ã–±–∞') || lowerName.includes('–ª–æ—Å–æ—Å—å')) return '—Ä—ã–±–∞';
    if (lowerName.includes('—Å—É–ø') || lowerName.includes('–±–æ—Ä—â')) return '—Å—É–ø';
    if (lowerName.includes('–¥–µ—Å–µ—Ä—Ç') || lowerName.includes('—Ç–æ—Ä—Ç')) return '–¥–µ—Å–µ—Ä—Ç';
    if (lowerName.includes('–ø–∞—Å—Ç–∞') || lowerName.includes('—Å–ø–∞–≥–µ—Ç—Ç–∏')) return '–ø–∞—Å—Ç–∞';
    
    return 'general';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
   */
  getDominantColors(imageData) {
    const { data } = imageData;
    let totalR = 0, totalG = 0, totalB = 0;
    const pixelCount = data.length / 4;

    for (let i = 0; i < data.length; i += 4) {
      totalR += data[i];
      totalG += data[i + 1];
      totalB += data[i + 2];
    }

    const avgR = totalR / pixelCount;
    const avgG = totalG / pixelCount;
    const avgB = totalB / pixelCount;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç
    const colors = [];
    if (avgR > 120 && avgR > avgG && avgR > avgB) colors.push('red');
    if (avgG > 120 && avgG > avgR && avgG > avgB) colors.push('green');
    if (avgB > 120 && avgB > avgR && avgB > avgG) colors.push('blue');
    if (avgR > 150 && avgG > 150 && avgB < 100) colors.push('yellow');
    if (avgR > 100 && avgG < 100 && avgB < 100) colors.push('brown');

    return colors.length > 0 ? colors : ['neutral'];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ
   */
  analyzeAppetiteAppeal(imageData, dishInfo) {
    // –§–∞–∫—Ç–æ—Ä—ã –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç–∏
    const factors = [];
    let score = 70; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –Ø—Ä–∫–∏–µ, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç—å
    const dominantColors = this.getDominantColors(imageData);
    if (dominantColors.includes('red') || dominantColors.includes('yellow')) {
      score += 10;
      factors.push('–ê–ø–ø–µ—Ç–∏—Ç–Ω—ã–µ —Ç–µ–ø–ª—ã–µ —Ç–æ–Ω–∞');
    }

    // –ö–æ–Ω—Ç—Ä–∞—Å—Ç —É–ª—É—á—à–∞–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç—å
    const contrast = this.analyzeContrast(imageData);
    if (contrast.score > 70) {
      score += 10;
      factors.push('–•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç');
    }

    // –Ø—Ä–∫–æ—Å—Ç—å
    const brightness = this.analyzeBrightness(imageData);
    if (brightness.score > 70) {
      score += 10;
      factors.push('–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å');
    }

    score = Math.min(100, score);

    let status, message;
    
    if (score >= 80) {
      status = 'excellent';
      message = '–û—á–µ–Ω—å –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ —Ñ–æ—Ç–æ!';
    } else if (score >= 60) {
      status = 'good';
      message = '–ê–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ —Ñ–æ—Ç–æ';
    } else {
      status = 'poor';
      message = '–§–æ—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å';
    }

    return {
      score: Math.round(score),
      status,
      message,
      factors,
      recommendation: score < 70 ? '–£–ª—É—á—à–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è –±–æ–ª—å—à–µ–π –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç–∏' : null
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  generateRecommendations(analysis) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —è—Ä–∫–æ—Å—Ç–∏
    if (analysis.technical.brightness.recommendation) {
      recommendations.push({
        type: 'technical',
        priority: analysis.technical.brightness.status === 'too_dark' || analysis.technical.brightness.status === 'too_bright' ? 'high' : 'medium',
        icon: 'üí°',
        message: analysis.technical.brightness.message,
        action: analysis.technical.brightness.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
    if (analysis.technical.contrast.recommendation) {
      recommendations.push({
        type: 'technical',
        priority: 'medium',
        icon: 'üî≤',
        message: analysis.technical.contrast.message,
        action: analysis.technical.contrast.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑–∫–æ—Å—Ç–∏
    if (analysis.technical.sharpness.recommendation) {
      recommendations.push({
        type: 'technical',
        priority: 'high',
        icon: 'üéØ',
        message: analysis.technical.sharpness.message,
        action: analysis.technical.sharpness.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–º—É –±–∞–ª–∞–Ω—Å—É
    if (analysis.technical.colorBalance.recommendation) {
      recommendations.push({
        type: 'technical',
        priority: 'medium',
        icon: 'üé®',
        message: analysis.technical.colorBalance.message,
        action: analysis.technical.colorBalance.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    if (analysis.composition.centering && analysis.composition.centering.recommendation) {
      recommendations.push({
        type: 'composition',
        priority: 'low',
        icon: 'üìê',
        message: analysis.composition.centering.message,
        action: analysis.composition.centering.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É
    if (analysis.composition.negativeSpace && analysis.composition.negativeSpace.recommendation) {
      recommendations.push({
        type: 'composition',
        priority: 'low',
        icon: 'üñºÔ∏è',
        message: analysis.composition.negativeSpace.message,
        action: analysis.composition.negativeSpace.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ—Å—Ç–∏
    if (analysis.content.appetiteAppeal && analysis.content.appetiteAppeal.recommendation) {
      recommendations.push({
        type: 'content',
        priority: 'high',
        icon: 'üçΩÔ∏è',
        message: analysis.content.appetiteAppeal.message,
        action: analysis.content.appetiteAppeal.recommendation
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
    if (analysis.technical.resolution && !analysis.technical.resolution.isHD) {
      recommendations.push({
        type: 'technical',
        priority: 'medium',
        icon: 'üì±',
        message: '–ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
        action: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–º–µ—Ä—É —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –º–∏–Ω–∏–º—É–º 1280x720 (HD)'
      });
    }

    return recommendations;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª —Ñ–æ—Ç–æ
   */
  calculateOverallScore(analysis) {
    const scores = {
      brightness: analysis.technical.brightness.score || 0,
      contrast: analysis.technical.contrast.score || 0,
      sharpness: analysis.technical.sharpness.score || 0,
      colorBalance: analysis.technical.colorBalance.score || 0,
      centering: analysis.composition.centering?.score || 70,
      negativeSpace: analysis.composition.negativeSpace?.score || 70,
      appetiteAppeal: analysis.content.appetiteAppeal?.score || 70
    };

    // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    const weights = {
      brightness: 0.2,
      contrast: 0.15,
      sharpness: 0.2,
      colorBalance: 0.1,
      centering: 0.1,
      negativeSpace: 0.05,
      appetiteAppeal: 0.2
    };

    let totalScore = 0;
    Object.entries(weights).forEach(([key, weight]) => {
      totalScore += scores[key] * weight;
    });

    totalScore = Math.round(totalScore);

    let status, message;

    if (totalScore >= 80) {
      status = 'excellent';
      message = 'üåü –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.';
    } else if (totalScore >= 60) {
      status = 'good';
      message = '‚úÖ –•–æ—Ä–æ—à–µ–µ —Ñ–æ—Ç–æ. –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–∏—Ç—å.';
    } else if (totalScore >= 40) {
      status = 'fair';
      message = '‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–ª—É—á—à–∏—Ç—å.';
    } else {
      status = 'poor';
      message = '‚ùå –§–æ—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π.';
    }

    return {
      score: totalScore,
      status,
      message
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤

  calculateBrightnessScore(brightness) {
    const { min, max, ideal } = this.qualityThresholds.brightness;
    
    if (brightness < min || brightness > max) {
      return 30;
    }
    
    const deviation = Math.abs(brightness - ideal);
    return Math.max(50, 100 - (deviation / ideal * 100));
  }

  calculateContrastScore(contrast) {
    const { min, ideal } = this.qualityThresholds.contrast;
    
    if (contrast < min) {
      return (contrast / min) * 50;
    }
    
    if (contrast >= ideal) {
      return 100;
    }
    
    return 50 + ((contrast - min) / (ideal - min)) * 50;
  }

  calculateColorBalanceScore(imbalance) {
    const { tolerance } = this.qualityThresholds.colorBalance;
    
    if (imbalance < tolerance) {
      return 100;
    }
    
    return Math.max(50, 100 - ((imbalance - tolerance) / tolerance * 50));
  }

  /**
   * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
   */
  suggestAutoEnhancements(analysis) {
    const enhancements = [];

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏
    if (analysis.technical.brightness.status === 'too_dark') {
      enhancements.push({
        type: 'brightness',
        adjustment: Math.round((this.qualityThresholds.brightness.min - analysis.technical.brightness.value) / 2.55), // –ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        description: `–£–≤–µ–ª–∏—á–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å –Ω–∞ ${Math.round((this.qualityThresholds.brightness.min - analysis.technical.brightness.value) / 2.55)}%`
      });
    } else if (analysis.technical.brightness.status === 'too_bright') {
      enhancements.push({
        type: 'brightness',
        adjustment: -Math.round((analysis.technical.brightness.value - this.qualityThresholds.brightness.max) / 2.55),
        description: `–£–º–µ–Ω—å—à–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å –Ω–∞ ${Math.round((analysis.technical.brightness.value - this.qualityThresholds.brightness.max) / 2.55)}%`
      });
    }

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    if (analysis.technical.contrast.status === 'low') {
      enhancements.push({
        type: 'contrast',
        adjustment: 20,
        description: '–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–∞ 20%'
      });
    }

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏
    if (analysis.technical.sharpness.status === 'blurry') {
      enhancements.push({
        type: 'sharpness',
        adjustment: 30,
        description: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏'
      });
    }

    return enhancements;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
const aiPhotoAnalyzer = new AIPhotoAnalyzer();
export default aiPhotoAnalyzer;

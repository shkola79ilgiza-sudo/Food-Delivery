/**
 * AI Conscience Checker - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∏–µ—Ç–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª—é–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∏ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
 */

class AIConscienceChecker {
  constructor() {
    this.dietaryStandards = {
      vegetarian: {
        forbidden: [
          "–º—è—Å–æ",
          "–∫—É—Ä–∏—Ü–∞",
          "–≥–æ–≤—è–¥–∏–Ω–∞",
          "—Å–≤–∏–Ω–∏–Ω–∞",
          "–±–∞—Ä–∞–Ω–∏–Ω–∞",
          "—Ä—ã–±–∞",
          "–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
          "–∫—Ä–µ–≤–µ—Ç–∫–∏",
          "–∫—Ä–∞–±",
          "–ª–æ—Å–æ—Å—å",
          "—Ç—É–Ω–µ—Ü",
          "–∫–æ–ª–±–∞—Å–∞",
          "—Å–æ—Å–∏—Å–∫–∏",
          "–±–µ–∫–æ–Ω",
          "–≤–µ—Ç—á–∏–Ω–∞",
          "—Å–∞–ª–æ",
        ],
        allowed: [
          "–æ–≤–æ—â–∏",
          "—Ñ—Ä—É–∫—Ç—ã",
          "–∑–µ—Ä–Ω–æ–≤—ã–µ",
          "–±–æ–±–æ–≤—ã–µ",
          "–æ—Ä–µ—Ö–∏",
          "—Å–µ–º–µ–Ω–∞",
          "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
          "—è–π—Ü–∞",
        ],
        strictness: "medium",
      },
      vegan: {
        forbidden: [
          "–º—è—Å–æ",
          "–∫—É—Ä–∏—Ü–∞",
          "–≥–æ–≤—è–¥–∏–Ω–∞",
          "—Å–≤–∏–Ω–∏–Ω–∞",
          "–±–∞—Ä–∞–Ω–∏–Ω–∞",
          "—Ä—ã–±–∞",
          "–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
          "–º–æ–ª–æ–∫–æ",
          "—Å—ã—Ä",
          "—Ç–≤–æ—Ä–æ–≥",
          "–π–æ–≥—É—Ä—Ç",
          "—Å–º–µ—Ç–∞–Ω–∞",
          "–º–∞—Å–ª–æ",
          "—Å–ª–∏–≤–∫–∏",
          "—è–π—Ü–∞",
          "–º–∞–π–æ–Ω–µ–∑",
          "–º–µ–¥",
        ],
        allowed: [
          "–æ–≤–æ—â–∏",
          "—Ñ—Ä—É–∫—Ç—ã",
          "–∑–µ—Ä–Ω–æ–≤—ã–µ",
          "–±–æ–±–æ–≤—ã–µ",
          "–æ—Ä–µ—Ö–∏",
          "—Å–µ–º–µ–Ω–∞",
          "—Ç–æ—Ñ—É",
          "—Å–æ–µ–≤–æ–µ –º–æ–ª–æ–∫–æ",
        ],
        strictness: "high",
      },
      halal: {
        forbidden: [
          "—Å–≤–∏–Ω–∏–Ω–∞",
          "–∞–ª–∫–æ–≥–æ–ª—å",
          "–∂–µ–ª–∞—Ç–∏–Ω —Å–≤–∏–Ω–æ–π",
          "—Å–∞–ª–æ",
          "–±–µ–∫–æ–Ω",
          "–≤–µ—Ç—á–∏–Ω–∞",
          "–∫–æ–ª–±–∞—Å–∞ —Å–≤–∏–Ω–∞—è",
        ],
        allowed: [
          "–≥–æ–≤—è–¥–∏–Ω–∞",
          "–±–∞—Ä–∞–Ω–∏–Ω–∞",
          "–∫—É—Ä–∏—Ü–∞",
          "—Ä—ã–±–∞",
          "–æ–≤–æ—â–∏",
          "—Ñ—Ä—É–∫—Ç—ã",
          "–∑–µ—Ä–Ω–æ–≤—ã–µ",
        ],
        strictness: "high",
      },
      kosher: {
        forbidden: [
          "—Å–≤–∏–Ω–∏–Ω–∞",
          "–º–æ–ª–ª—é—Å–∫–∏",
          "—Ä–∞–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ",
          "—Å–º–µ—à–µ–Ω–∏–µ –º—è—Å–∞ –∏ –º–æ–ª–æ–∫–∞",
          "–∞–ª–∫–æ–≥–æ–ª—å –Ω–µ–∫–æ—à–µ—Ä–Ω—ã–π",
        ],
        allowed: [
          "–≥–æ–≤—è–¥–∏–Ω–∞ –∫–æ—à–µ—Ä–Ω–∞—è",
          "–∫—É—Ä–∏—Ü–∞ –∫–æ—à–µ—Ä–Ω–∞—è",
          "—Ä—ã–±–∞ —Å —á–µ—à—É–µ–π",
          "–æ–≤–æ—â–∏",
          "—Ñ—Ä—É–∫—Ç—ã",
        ],
        strictness: "high",
      },
      gluten_free: {
        forbidden: [
          "–ø—à–µ–Ω–∏—Ü–∞",
          "—Ä–æ–∂—å",
          "—è—á–º–µ–Ω—å",
          "–æ–≤—ë—Å",
          "–≥–ª—é—Ç–µ–Ω",
          "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è",
          "—Ö–ª–µ–±",
          "–º–∞–∫–∞—Ä–æ–Ω—ã",
          "–ø–∞—Å—Ç–∞",
        ],
        allowed: [
          "—Ä–∏—Å",
          "–∫—É–∫—É—Ä—É–∑–∞",
          "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
          "–æ–≤–æ—â–∏",
          "—Ñ—Ä—É–∫—Ç—ã",
          "–º—è—Å–æ",
          "—Ä—ã–±–∞",
        ],
        strictness: "high",
      },
    };

    this.ethicalStandards = {
      organic: {
        forbidden: [
          "–ø–µ—Å—Ç–∏—Ü–∏–¥—ã",
          "–≥–µ—Ä–±–∏—Ü–∏–¥—ã",
          "–≥–º–æ",
          "–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
          "—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
        ],
        indicators: ["–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π", "–±–∏–æ", "—ç–∫–æ", "–±–µ–∑ –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤"],
        strictness: "medium",
      },
      fair_trade: {
        indicators: [
          "—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
          "fair trade",
          "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–µ—Ä–º–µ—Ä–æ–≤",
        ],
        strictness: "low",
      },
      sustainable: {
        forbidden: ["–ø–∞–ª—å–º–æ–≤–æ–µ –º–∞—Å–ª–æ", "–≤—ã—Ä—É–±–∫–∞ –ª–µ—Å–æ–≤", "—á—Ä–µ–∑–º–µ—Ä–Ω—ã–π –≤—ã–ª–æ–≤"],
        indicators: [
          "—É—Å—Ç–æ–π—á–∏–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
          "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–π",
          "–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        ],
        strictness: "medium",
      },
      cruelty_free: {
        forbidden: [
          "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
          "–∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        ],
        indicators: ["cruelty free", "–±–µ–∑ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏", "—ç—Ç–∏—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"],
        strictness: "high",
      },
    };

    this.nutritionalPurity = {
      artificial_additives: [
        "–∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã",
        "–∫—Ä–∞—Å–∏—Ç–µ–ª–∏",
        "—É—Å–∏–ª–∏—Ç–µ–ª–∏ –≤–∫—É—Å–∞",
        "–≥–ª—É—Ç–∞–º–∞—Ç –Ω–∞—Ç—Ä–∏—è",
        "e621",
        "e250",
        "e252",
      ],
      natural_indicators: [
        "–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π",
        "–±–µ–∑ –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–æ–≤",
        "–±–µ–∑ –∫—Ä–∞—Å–∏—Ç–µ–ª–µ–π",
        "–¥–æ–º–∞—à–Ω–∏–π",
        "—Å–≤–µ–∂–∏–π",
      ],
      processing_levels: {
        minimal: ["—Å—ã—Ä–æ–π", "—Å–≤–µ–∂–∏–π", "–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π"],
        moderate: ["–≤–∞—Ä–µ–Ω—ã–π", "—Ç—É—à–µ–Ω—ã–π", "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–π"],
        high: ["–∂–∞—Ä–µ–Ω—ã–π", "–∫–æ–ø—á–µ–Ω—ã–π", "–∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π"],
      },
    };

    this.healthWarnings = {
      high_sodium: {
        threshold: 600, // –º–≥ –Ω–∞ 100–≥
        warning: "–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è –º–æ–∂–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ",
      },
      high_sugar: {
        threshold: 15, // –≥ –Ω–∞ 100–≥
        warning: "–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –º–æ–∂–µ—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä—É –≤–µ—Å–∞",
      },
      high_fat: {
        threshold: 20, // –≥ –Ω–∞ 100–≥
        warning: "–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤ –º–æ–∂–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω",
      },
      low_fiber: {
        threshold: 3, // –≥ –Ω–∞ 100–≥
        warning: "–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ",
      },
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª—é–¥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏–º –∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
   * @param {Object} dish - –ë–ª—é–¥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @param {Array} claimedStandards - –ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (–≤–µ–≥–∞–Ω, —Ö–∞–ª—è–ª—å –∏ —Ç.–¥.)
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  async analyzeDish(dish, claimedStandards = []) {
    console.log("üîç Starting AI Conscience Analysis...", {
      dish: dish.name,
      claimedStandards,
    });

    try {
      const analysis = {
        dishId: dish.id,
        dishName: dish.name,
        claimedStandards: claimedStandards,
        results: {
          dietaryCompliance: {},
          ethicalCompliance: {},
          nutritionalPurity: {},
          healthWarnings: [],
          overallScore: 0,
          recommendations: [],
        },
        timestamp: new Date().toISOString(),
      };

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
      analysis.results.dietaryCompliance = await this.checkDietaryCompliance(
        dish,
        claimedStandards
      );

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
      analysis.results.ethicalCompliance = await this.checkEthicalCompliance(
        dish
      );

      // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç—å
      analysis.results.nutritionalPurity = await this.analyzeNutritionalPurity(
        dish
      );

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ
      analysis.results.healthWarnings = await this.checkHealthWarnings(dish);

      // 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
      analysis.results.overallScore = this.calculateOverallScore(
        analysis.results
      );

      // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      analysis.results.recommendations = await this.generateRecommendations(
        analysis.results
      );

      console.log("‚úÖ Conscience analysis completed:", analysis);
      return analysis;
    } catch (error) {
      console.error("‚ùå Error in conscience analysis:", error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
   */
  async checkDietaryCompliance(dish, claimedStandards) {
    const compliance = {};

    claimedStandards.forEach((standard) => {
      const standardRules = this.dietaryStandards[standard];
      if (!standardRules) return;

      const violations = [];
      const ingredients = this.extractIngredients(dish);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      standardRules.forbidden.forEach((forbiddenIngredient) => {
        if (this.containsIngredient(ingredients, forbiddenIngredient)) {
          violations.push({
            type: "forbidden_ingredient",
            ingredient: forbiddenIngredient,
            severity:
              standardRules.strictness === "high" ? "critical" : "warning",
            message: `–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–ª—è ${standard} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${forbiddenIngredient}`,
          });
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
      const isCompliant = violations.length === 0;

      compliance[standard] = {
        compliant: isCompliant,
        violations: violations,
        confidence: this.calculateConfidence(ingredients, standardRules),
        recommendation: isCompliant
          ? `–ë–ª—é–¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ${standard}`
          : `–ë–ª—é–¥–æ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ${standard}. –ù–∞–π–¥–µ–Ω–æ ${violations.length} –Ω–∞—Ä—É—à–µ–Ω–∏–π.`,
      };
    });

    return compliance;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
   */
  async checkEthicalCompliance(dish) {
    const compliance = {};

    Object.entries(this.ethicalStandards).forEach(([standard, rules]) => {
      const violations = [];
      const indicators = [];
      const ingredients = this.extractIngredients(dish);
      const description = (dish.description || "").toLowerCase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (rules.forbidden) {
        rules.forbidden.forEach((forbiddenElement) => {
          if (
            this.containsIngredient(ingredients, forbiddenElement) ||
            description.includes(forbiddenElement)
          ) {
            violations.push({
              type: "ethical_violation",
              element: forbiddenElement,
              severity: rules.strictness === "high" ? "critical" : "warning",
              message: `–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—ç—Ç–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${forbiddenElement}`,
            });
          }
        });
      }

      // –ò—â–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      if (rules.indicators) {
        rules.indicators.forEach((indicator) => {
          if (description.includes(indicator.toLowerCase())) {
            indicators.push({
              type: "ethical_indicator",
              indicator: indicator,
              message: `–ù–∞–π–¥–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: ${indicator}`,
            });
          }
        });
      }

      compliance[standard] = {
        violations: violations,
        indicators: indicators,
        score: this.calculateEthicalScore(
          violations,
          indicators,
          rules.strictness
        ),
        recommendation:
          violations.length === 0
            ? `–ë–ª—é–¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∏—á–µ—Å–∫–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ${standard}`
            : `–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ ${standard}`,
      };
    });

    return compliance;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç—å –∏ —á–∏—Å—Ç–æ—Ç—É –ø–∏—Ç–∞–Ω–∏—è
   */
  async analyzeNutritionalPurity(dish) {
    const ingredients = this.extractIngredients(dish);
    const description = (dish.description || "").toLowerCase();

    const analysis = {
      artificialAdditives: [],
      naturalIndicators: [],
      processingLevel: "unknown",
      purityScore: 0,
      recommendations: [],
    };

    // –ò—â–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏
    this.nutritionalPurity.artificial_additives.forEach((additive) => {
      if (
        this.containsIngredient(ingredients, additive) ||
        description.includes(additive.toLowerCase())
      ) {
        analysis.artificialAdditives.push({
          additive: additive,
          severity: "warning",
          message: `–°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–±–∞–≤–∫—É: ${additive}`,
        });
      }
    });

    // –ò—â–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.nutritionalPurity.natural_indicators.forEach((indicator) => {
      if (description.includes(indicator.toLowerCase())) {
        analysis.naturalIndicators.push({
          indicator: indicator,
          message: `–ù–∞–π–¥–µ–Ω –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: ${indicator}`,
        });
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    analysis.processingLevel = this.determineProcessingLevel(
      description,
      ingredients
    );

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª —á–∏—Å—Ç–æ—Ç—ã
    analysis.purityScore = this.calculatePurityScore(analysis);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.artificialAdditives.length > 0) {
      analysis.recommendations.push({
        type: "warning",
        message: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫",
      });
    }

    if (analysis.processingLevel === "high") {
      analysis.recommendations.push({
        type: "info",
        message:
          "–ë–ª—é–¥–æ –ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.",
      });
    }

    return analysis;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ
   */
  async checkHealthWarnings(dish) {
    const warnings = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è
    if (
      dish.dishSodium &&
      dish.dishSodium > this.healthWarnings.high_sodium.threshold
    ) {
      warnings.push({
        type: "sodium_warning",
        level: "high",
        value: dish.dishSodium,
        threshold: this.healthWarnings.high_sodium.threshold,
        message: `–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è: ${dish.dishSodium}–º–≥/100–≥`,
        warning: this.healthWarnings.high_sodium.warning,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞
    if (
      dish.dishSugar &&
      dish.dishSugar > this.healthWarnings.high_sugar.threshold
    ) {
      warnings.push({
        type: "sugar_warning",
        level: "high",
        value: dish.dishSugar,
        threshold: this.healthWarnings.high_sugar.threshold,
        message: `–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞: ${dish.dishSugar}–≥/100–≥`,
        warning: this.healthWarnings.high_sugar.warning,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤
    if (dish.dishFat && dish.dishFat > this.healthWarnings.high_fat.threshold) {
      warnings.push({
        type: "fat_warning",
        level: "high",
        value: dish.dishFat,
        threshold: this.healthWarnings.high_fat.threshold,
        message: `–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤: ${dish.dishFat}–≥/100–≥`,
        warning: this.healthWarnings.high_fat.warning,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏
    if (
      dish.dishFiber &&
      dish.dishFiber < this.healthWarnings.low_fiber.threshold
    ) {
      warnings.push({
        type: "fiber_warning",
        level: "low",
        value: dish.dishFiber,
        threshold: this.healthWarnings.low_fiber.threshold,
        message: `–ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏: ${dish.dishFiber}–≥/100–≥`,
        warning: this.healthWarnings.low_fiber.warning,
      });
    }

    return warnings;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
   */
  calculateOverallScore(results) {
    let totalScore = 100;
    let penaltyPoints = 0;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    Object.values(results.dietaryCompliance).forEach((compliance) => {
      if (!compliance.compliant) {
        compliance.violations.forEach((violation) => {
          penaltyPoints += violation.severity === "critical" ? 30 : 15;
        });
      }
    });

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ —ç—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    Object.values(results.ethicalCompliance).forEach((compliance) => {
      if (compliance.score < 70) {
        penaltyPoints += 20;
      }
    });

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∏–∑–∫—É—é —á–∏—Å—Ç–æ—Ç—É
    if (results.nutritionalPurity.purityScore < 60) {
      penaltyPoints += 15;
    }

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ
    results.healthWarnings.forEach((warning) => {
      penaltyPoints += warning.level === "high" ? 10 : 5;
    });

    return Math.max(0, totalScore - penaltyPoints);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  async generateRecommendations(results) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    Object.entries(results.dietaryCompliance).forEach(
      ([standard, compliance]) => {
        if (!compliance.compliant) {
          recommendations.push({
            type: "dietary",
            priority: "high",
            standard: standard,
            message: `–£–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–ª—è ${standard} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${compliance.violations
              .map((v) => v.ingredient)
              .join(", ")}`,
            action: `–ó–∞–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–ª—è ${standard}`,
          });
        }
      }
    );

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    Object.entries(results.ethicalCompliance).forEach(
      ([standard, compliance]) => {
        if (compliance.score < 70) {
          recommendations.push({
            type: "ethical",
            priority: "medium",
            standard: standard,
            message: `–£–ª—É—á—à–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∏—á–µ—Å–∫–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ${standard}`,
            action: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ${standard} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã`,
          });
        }
      }
    );

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —á–∏—Å—Ç–æ—Ç–µ
    if (results.nutritionalPurity.purityScore < 60) {
      recommendations.push({
        type: "purity",
        priority: "medium",
        message: "–£–≤–µ–ª–∏—á—å—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç—å –±–ª—é–¥–∞",
        action: "–ó–∞–º–µ–Ω–∏—Ç–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ –Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã",
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
    results.healthWarnings.forEach((warning) => {
      recommendations.push({
        type: "health",
        priority: warning.level === "high" ? "high" : "medium",
        message: warning.message,
        action: `–°–Ω–∏–∑—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ ${warning.type.replace("_warning", "")}`,
      });
    });

    return recommendations;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –±–ª—é–¥–∞
   */
  extractIngredients(dish) {
    const ingredients = [];

    if (dish.ingredients) {
      ingredients.push(
        ...dish.ingredients.split(",").map((ing) => ing.trim().toLowerCase())
      );
    }

    if (dish.name) {
      ingredients.push(dish.name.toLowerCase());
    }

    return ingredients;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
   */
  containsIngredient(ingredients, ingredient) {
    const searchTerm = ingredient.toLowerCase();
    return ingredients.some(
      (ing) => ing.includes(searchTerm) || searchTerm.includes(ing)
    );
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
   */
  calculateConfidence(ingredients, standardRules) {
    let confidence = 0;
    let totalChecks = standardRules.forbidden.length;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω–æ
    standardRules.forbidden.forEach((forbiddenIngredient) => {
      if (!this.containsIngredient(ingredients, forbiddenIngredient)) {
        confidence += 1;
      }
    });

    return Math.round((confidence / totalChecks) * 100);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª
   */
  calculateEthicalScore(violations, indicators, strictness) {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    violations.forEach((violation) => {
      score -= violation.severity === "critical" ? 40 : 20;
    });

    // –ë–æ–Ω—É—Å—ã –∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    indicators.forEach((indicator) => {
      score += 10;
    });

    // –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–≥–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
    if (strictness === "high") {
      score = Math.max(0, score - 20); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é —Å—Ç—Ä–æ–≥–æ—Å—Ç—å
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  determineProcessingLevel(description, ingredients) {
    let processingScore = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.nutritionalPurity.processing_levels.minimal.forEach((indicator) => {
      if (description.includes(indicator)) {
        processingScore -= 2;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–º–µ—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.nutritionalPurity.processing_levels.moderate.forEach((indicator) => {
      if (description.includes(indicator)) {
        processingScore += 1;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã—Å–æ–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.nutritionalPurity.processing_levels.high.forEach((indicator) => {
      if (description.includes(indicator)) {
        processingScore += 3;
      }
    });

    if (processingScore <= -1) return "minimal";
    if (processingScore <= 2) return "moderate";
    return "high";
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª —á–∏—Å—Ç–æ—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
   */
  calculatePurityScore(analysis) {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏
    score -= analysis.artificialAdditives.length * 15;

    // –ë–æ–Ω—É—Å—ã –∑–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    score += analysis.naturalIndicators.length * 10;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    switch (analysis.processingLevel) {
      case "high":
        score -= 30;
        break;
      case "moderate":
        score -= 10;
        break;
      case "minimal":
        score += 10;
        break;
      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        break;
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  async analyzeMultipleDishes(dishes, claimedStandards = []) {
    console.log(
      `üîç Analyzing ${dishes.length} dishes for conscience compliance...`
    );

    const results = {
      dishes: [],
      summary: {
        totalDishes: dishes.length,
        averageScore: 0,
        complianceByStandard: {},
        criticalIssues: [],
        recommendations: [],
      },
    };

    let totalScore = 0;

    for (const dish of dishes) {
      try {
        const analysis = await this.analyzeDish(dish, claimedStandards);
        results.dishes.push(analysis);
        totalScore += analysis.results.overallScore;
      } catch (error) {
        console.error(`‚ùå Error analyzing dish ${dish.name}:`, error);
        results.dishes.push({
          dishId: dish.id,
          dishName: dish.name,
          error: error.message,
        });
      }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    results.summary.averageScore = Math.round(totalScore / dishes.length);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    claimedStandards.forEach((standard) => {
      const compliantDishes = results.dishes.filter(
        (d) =>
          d.results &&
          d.results.dietaryCompliance[standard] &&
          d.results.dietaryCompliance[standard].compliant
      ).length;

      results.summary.complianceByStandard[standard] = {
        compliant: compliantDishes,
        total: dishes.length,
        percentage: Math.round((compliantDishes / dishes.length) * 100),
      };
    });

    // –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    results.dishes.forEach((dish) => {
      if (dish.results && dish.results.overallScore < 50) {
        results.summary.criticalIssues.push({
          dishName: dish.dishName,
          score: dish.results.overallScore,
          issues: dish.results.recommendations.filter(
            (r) => r.priority === "high"
          ),
        });
      }
    });

    console.log("‚úÖ Multiple dishes analysis completed:", results.summary);
    return results;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –Ω–∞–ø—Ä—è–º—É—é
export { AIConscienceChecker };
export default AIConscienceChecker;

/**
 * AI Meal Planner - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ 3 –¥–Ω—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
 */

class AIMealPlanner {
  constructor() {
    this.nutritionGoals = {
      weight_loss: {
        calories: 1800,
        protein: 120,
        carbs: 180,
        fat: 60,
        fiber: 25,
        priority: ['low_calorie', 'high_protein', 'high_fiber']
      },
      muscle_gain: {
        calories: 2500,
        protein: 180,
        carbs: 300,
        fat: 80,
        fiber: 30,
        priority: ['high_protein', 'high_calorie', 'balanced']
      },
      healthy: {
        calories: 2200,
        protein: 150,
        carbs: 250,
        fat: 70,
        fiber: 28,
        priority: ['balanced', 'natural', 'variety']
      },
      diabetic_friendly: {
        calories: 2000,
        protein: 140,
        carbs: 200,
        fat: 65,
        fiber: 30,
        priority: ['low_gi', 'high_fiber', 'low_sugar']
      },
      keto: {
        calories: 1800,
        protein: 120,
        carbs: 50,
        fat: 140,
        fiber: 20,
        priority: ['high_fat', 'low_carb', 'moderate_protein']
      }
    };

    this.mealTimes = {
      breakfast: { calories: 0.25, protein: 0.25, carbs: 0.3, fat: 0.2 },
      lunch: { calories: 0.35, protein: 0.35, carbs: 0.35, fat: 0.35 },
      dinner: { calories: 0.3, protein: 0.3, carbs: 0.25, fat: 0.3 },
      snack: { calories: 0.1, protein: 0.1, carbs: 0.1, fat: 0.15 }
    };

    this.allergies = {
      gluten: ['–ø—à–µ–Ω–∏—Ü–∞', '—Ä–æ–∂—å', '—è—á–º–µ–Ω—å', '–æ–≤—ë—Å', '—Ö–ª–µ–±', '–º–∞–∫–∞—Ä–æ–Ω—ã', '–º—É–∫–∞'],
      dairy: ['–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—Ç–≤–æ—Ä–æ–≥', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Ç–∞–Ω–∞', '–º–∞—Å–ª–æ', '—Å–ª–∏–≤–∫–∏'],
      nuts: ['–æ—Ä–µ—Ö–∏', '–º–∏–Ω–¥–∞–ª—å', '—Ñ—É–Ω–¥—É–∫', '–≥—Ä–µ—Ü–∫–∏–π', '–∞—Ä–∞—Ö–∏—Å'],
      seafood: ['—Ä—ã–±–∞', '–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∫—Ä–∞–±', '–º–∏–¥–∏–∏', '–ª–æ—Å–æ—Å—å', '—Ç—É–Ω–µ—Ü'],
      eggs: ['—è–π—Ü–∞', '—è–∏—á–Ω—ã–π', '–±–µ–ª–æ–∫', '–∂–µ–ª—Ç–æ–∫'],
      soy: ['—Å–æ—è', '—Ç–æ—Ñ—É', '—Å–æ–µ–≤—ã–π', '—ç–¥–∞–º–∞–º–µ']
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 3 –¥–Ω—è
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Object} –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –±–ª—é–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
   */
  async generateMealPlan(params = {}) {
    const {
      goal = 'healthy',
      allergies = [],
      preferences = [],
      availableDishes = [],
      budget = 'medium',
      cookingTime = 'medium'
    } = params;

    console.log('üçΩÔ∏è Starting AI Meal Planning...', { goal, allergies, preferences });

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è
      const nutritionGoal = this.nutritionGoals[goal] || this.nutritionGoals.healthy;
      console.log('üìä Nutrition goal:', nutritionGoal);

      // 2. –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –∞–ª–ª–µ—Ä–≥–∏—è–º –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
      const filteredDishes = this.filterDishes(availableDishes, allergies, preferences);
      console.log(`üçΩÔ∏è Filtered dishes: ${filteredDishes.length} from ${availableDishes.length}`);

      if (filteredDishes.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–ª–ª–µ—Ä–≥–∏—è–º/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º');
      }

      // 3. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ —Ç–∏–ø–∞–º
      const classifiedDishes = this.classifyDishes(filteredDishes);
      console.log('üè∑Ô∏è Classified dishes:', Object.keys(classifiedDishes));

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–∞ 3 –¥–Ω—è
      const mealPlan = await this.createThreeDayPlan(classifiedDishes, nutritionGoal, goal);
      console.log('üìÖ Generated meal plan:', mealPlan);

      // 5. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
      const enhancedPlan = await this.enhancePlanWithAI(mealPlan, goal, nutritionGoal);
      console.log('‚ú® Enhanced plan with AI recommendations');

      return enhancedPlan;
    } catch (error) {
      console.error('‚ùå Error generating meal plan:', error);
      throw error;
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –±–ª—é–¥–∞ –ø–æ –∞–ª–ª–µ—Ä–≥–∏—è–º –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
   */
  filterDishes(dishes, allergies = [], preferences = []) {
    return dishes.filter(dish => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–ª–µ—Ä–≥–∏–∏
      const hasAllergy = allergies.some(allergy => {
        const allergyKeywords = this.allergies[allergy] || [allergy];
        return allergyKeywords.some(keyword => 
          dish.name.toLowerCase().includes(keyword.toLowerCase()) ||
          (dish.ingredients && dish.ingredients.toLowerCase().includes(keyword.toLowerCase()))
        );
      });

      if (hasAllergy) {
        console.log(`üö´ Filtered out ${dish.name} due to allergy`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã "—Ç–æ–ª—å–∫–æ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ", "—Ç–æ–ª—å–∫–æ —Ö–∞–ª—è–ª—å" –∏ —Ç.–¥.)
      const hasPreference = preferences.some(pref => {
        if (pref === 'vegetarian' && dish.meat) return false;
        if (pref === 'vegan' && (dish.meat || dish.dairy)) return false;
        if (pref === 'halal' && dish.alcohol) return false;
        return true;
      });

      return hasPreference;
    });
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –±–ª—é–¥–∞ –ø–æ —Ç–∏–ø–∞–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
   */
  classifyDishes(dishes) {
    const classified = {
      breakfast: [],
      lunch: [],
      dinner: [],
      snack: [],
      soups: [],
      salads: [],
      main_courses: [],
      desserts: [],
      low_calorie: [],
      high_protein: [],
      high_fiber: [],
      low_gi: [],
      diabetic_friendly: [],
      vegetarian: [],
      vegan: []
    };

    dishes.forEach(dish => {
      const name = dish.name.toLowerCase();
      const ingredients = (dish.ingredients || '').toLowerCase();

      // –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      if (name.includes('–∫–∞—à–∞') || name.includes('–æ–º–ª–µ—Ç') || name.includes('—Ç–≤–æ—Ä–æ–≥') || 
          name.includes('–π–æ–≥—É—Ä—Ç') || name.includes('–±–ª–∏–Ω—ã') || name.includes('—Ç–æ—Å—Ç')) {
        classified.breakfast.push(dish);
      }
      
      if (name.includes('—Å—É–ø') || name.includes('–±–æ—Ä—â') || name.includes('—â–∏') || 
          name.includes('–±—É–ª—å–æ–Ω')) {
        classified.lunch.push(dish);
        classified.soups.push(dish);
      }
      
      if (name.includes('—Å–∞–ª–∞—Ç') || name.includes('–æ–≤–æ—â–∏')) {
        classified.lunch.push(dish);
        classified.salads.push(dish);
      }
      
      if (name.includes('–º—è—Å–æ') || name.includes('—Ä—ã–±–∞') || name.includes('–∫—É—Ä–∏—Ü–∞') || 
          name.includes('–≥–æ–≤—è–¥–∏–Ω–∞') || name.includes('—Å–≤–∏–Ω–∏–Ω–∞') || name.includes('–ø–ª–æ–≤') || 
          name.includes('–ø–∞—Å—Ç–∞') || name.includes('–ø–∞—Å—Ç–∞')) {
        classified.dinner.push(dish);
        classified.main_courses.push(dish);
      }

      // –ü–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
      if (dish.dishCalories && dish.dishCalories < 300) {
        classified.low_calorie.push(dish);
      }
      
      if (dish.dishProtein && dish.dishProtein > 20) {
        classified.high_protein.push(dish);
      }
      
      if (dish.dishCarbs && dish.dishCarbs > 30) {
        classified.high_fiber.push(dish);
      }

      // –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª—é–¥–∞
      if (dish.diabeticFriendly) {
        classified.diabetic_friendly.push(dish);
        classified.low_gi.push(dish);
      }

      // –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ/–≤–µ–≥–∞–Ω—Å–∫–∏–µ
      if (!dish.meat) {
        classified.vegetarian.push(dish);
        if (!dish.dairy) {
          classified.vegan.push(dish);
        }
      }
    });

    return classified;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 3 –¥–Ω—è
   */
  async createThreeDayPlan(classifiedDishes, nutritionGoal, goal) {
    const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞'];
    const mealPlan = {
      goal: goal,
      totalCalories: nutritionGoal.calories * 3,
      totalProtein: nutritionGoal.protein * 3,
      totalCarbs: nutritionGoal.carbs * 3,
      totalFat: nutritionGoal.fat * 3,
      days: [],
      summary: {
        averageCaloriesPerDay: nutritionGoal.calories,
        varietyScore: 0,
        nutritionBalance: 0
      }
    };

    for (let i = 0; i < days.length; i++) {
      const day = await this.createDayPlan(classifiedDishes, nutritionGoal, goal, i);
      mealPlan.days.push({
        day: days[i],
        date: this.getDateString(i),
        meals: day.meals,
        totals: day.totals,
        score: day.score
      });
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    mealPlan.summary.varietyScore = this.calculateVarietyScore(mealPlan.days);
    mealPlan.summary.nutritionBalance = this.calculateNutritionBalance(mealPlan.days, nutritionGoal);

    return mealPlan;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
   */
  async createDayPlan(classifiedDishes, nutritionGoal, goal, dayIndex) {
    const dayMeals = {
      breakfast: null,
      lunch: null,
      dinner: null,
      snack: null
    };

    const dayTotals = {
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      fiber: 0
    };

    // –í—ã–±–∏—Ä–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    for (const mealTime of Object.keys(dayMeals)) {
      const targetCalories = nutritionGoal.calories * this.mealTimes[mealTime].calories;
      const targetProtein = nutritionGoal.protein * this.mealTimes[mealTime].protein;
      
      const selectedDish = this.selectDishForMeal(
        classifiedDishes, 
        mealTime, 
        targetCalories, 
        targetProtein, 
        goal,
        dayIndex
      );

      if (selectedDish) {
        dayMeals[mealTime] = selectedDish;
        dayTotals.calories += selectedDish.dishCalories || 0;
        dayTotals.protein += selectedDish.dishProtein || 0;
        dayTotals.carbs += selectedDish.dishCarbs || 0;
        dayTotals.fat += selectedDish.dishFat || 0;
      }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –¥–Ω—è
    const score = this.calculateDayScore(dayTotals, nutritionGoal);

    return {
      meals: dayMeals,
      totals: dayTotals,
      score: score
    };
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –±–ª—é–¥–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  selectDishForMeal(classifiedDishes, mealTime, targetCalories, targetProtein, goal, dayIndex) {
    let candidates = [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    switch (mealTime) {
      case 'breakfast':
        candidates = [
          ...classifiedDishes.breakfast,
          ...classifiedDishes.low_calorie.filter(d => d.dishCalories < 400)
        ];
        break;
      case 'lunch':
        candidates = [
          ...classifiedDishes.soups,
          ...classifiedDishes.salads,
          ...classifiedDishes.lunch
        ];
        break;
      case 'dinner':
        candidates = [
          ...classifiedDishes.main_courses,
          ...classifiedDishes.dinner,
          ...classifiedDishes.high_protein
        ];
        break;
      case 'snack':
        candidates = [
          ...classifiedDishes.low_calorie.filter(d => d.dishCalories < 200)
        ];
        break;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–ª—è–º –ø–∏—Ç–∞–Ω–∏—è
    if (goal === 'diabetic_friendly') {
      candidates = candidates.filter(d => classifiedDishes.diabetic_friendly.includes(d));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ –¥–Ω—è–º
    candidates = this.addVarietyByDay(candidates, dayIndex, mealTime);

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –±–ª—é–¥–æ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –±–µ–ª–∫–∞–º
    const bestDish = candidates.reduce((best, current) => {
      const bestScore = this.calculateDishScore(best, targetCalories, targetProtein);
      const currentScore = this.calculateDishScore(current, targetCalories, targetProtein);
      return currentScore > bestScore ? current : best;
    }, candidates[0]);

    return bestDish || null;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ –¥–Ω—è–º
   */
  addVarietyByDay(candidates, dayIndex, mealTime) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    const varietyOffset = dayIndex * 2;
    return candidates.slice(varietyOffset % candidates.length).concat(
      candidates.slice(0, varietyOffset % candidates.length)
    );
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –±–ª—é–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏
   */
  calculateDishScore(dish, targetCalories, targetProtein) {
    if (!dish) return 0;

    const calories = dish.dishCalories || 0;
    const protein = dish.dishProtein || 0;

    // –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    const caloriesScore = 1 - Math.abs(calories - targetCalories) / targetCalories;
    const proteinScore = 1 - Math.abs(protein - targetProtein) / Math.max(targetProtein, 1);

    return (caloriesScore + proteinScore) / 2;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –¥–Ω—è
   */
  calculateDayScore(dayTotals, nutritionGoal) {
    const caloriesScore = 1 - Math.abs(dayTotals.calories - nutritionGoal.calories) / nutritionGoal.calories;
    const proteinScore = 1 - Math.abs(dayTotals.protein - nutritionGoal.protein) / nutritionGoal.protein;
    const carbsScore = 1 - Math.abs(dayTotals.carbs - nutritionGoal.carbs) / nutritionGoal.carbs;
    const fatScore = 1 - Math.abs(dayTotals.fat - nutritionGoal.fat) / nutritionGoal.fat;

    return Math.max(0, (caloriesScore + proteinScore + carbsScore + fatScore) / 4 * 100);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
   */
  calculateVarietyScore(days) {
    const allDishes = [];
    days.forEach(day => {
      Object.values(day.meals).forEach(meal => {
        if (meal) allDishes.push(meal.name);
      });
    });

    const uniqueDishes = new Set(allDishes);
    return Math.min(100, (uniqueDishes.size / allDishes.length) * 100);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–∏—Ç–∞–Ω–∏—è
   */
  calculateNutritionBalance(days, nutritionGoal) {
    const avgCalories = days.reduce((sum, day) => sum + day.totals.calories, 0) / days.length;
    const avgProtein = days.reduce((sum, day) => sum + day.totals.protein, 0) / days.length;

    const caloriesBalance = 1 - Math.abs(avgCalories - nutritionGoal.calories) / nutritionGoal.calories;
    const proteinBalance = 1 - Math.abs(avgProtein - nutritionGoal.protein) / nutritionGoal.protein;

    return Math.max(0, (caloriesBalance + proteinBalance) / 2 * 100);
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  async enhancePlanWithAI(mealPlan, goal, nutritionGoal) {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const aiRecommendations = await this.generateAIRecommendations(mealPlan, goal);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
      const alternatives = this.generateAlternatives(mealPlan);
      
      // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω
      const enhancedPlan = {
        ...mealPlan,
        aiRecommendations,
        alternatives,
        tips: this.generateTips(goal),
        shoppingList: this.generateShoppingList(mealPlan),
        prepTime: this.estimatePrepTime(mealPlan),
        cost: this.estimateCost(mealPlan)
      };

      return enhancedPlan;
    } catch (error) {
      console.error('‚ùå Error enhancing plan with AI:', error);
      return mealPlan;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  async generateAIRecommendations(mealPlan, goal) {
    const recommendations = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø–∏—Ç–∞–Ω–∏—è
    const avgScore = mealPlan.days.reduce((sum, day) => sum + day.score, 0) / mealPlan.days.length;
    
    if (avgScore < 70) {
      recommendations.push({
        type: 'warning',
        icon: '‚ö†Ô∏è',
        title: '–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
        message: `–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω—è: ${avgScore.toFixed(1)}/100. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –∏–ª–∏ –æ–≤–æ—â–µ–π.`,
        action: '–î–æ–±–∞–≤–∏—Ç—å –±–µ–ª–∫–æ–≤—ã–µ –±–ª—é–¥–∞ –∏ –æ–≤–æ—â–∏'
      });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    if (mealPlan.summary.varietyScore < 60) {
      recommendations.push({
        type: 'info',
        icon: 'üîÑ',
        title: '–ú–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
        message: `–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: ${mealPlan.summary.varietyScore.toFixed(1)}%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±–ª—é–¥.`,
        action: '–ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±–ª—é–¥–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'
      });
    }

    // –¶–µ–ª–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (goal === 'weight_loss') {
      recommendations.push({
        type: 'success',
        icon: 'üí™',
        title: '–û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
        message: '–ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–≥–æ –æ–≤–æ—â–µ–π –∏ –±–µ–ª–∫–∞. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!',
        action: '–î–æ–±–∞–≤—å—Ç–µ 30 –º–∏–Ω—É—Ç –∫–∞—Ä–¥–∏–æ –≤ –¥–µ–Ω—å'
      });
    }

    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –±–ª—é–¥
   */
  generateAlternatives(mealPlan) {
    const alternatives = [];

    mealPlan.days.forEach((day, dayIndex) => {
      Object.entries(day.meals).forEach(([mealTime, meal]) => {
        if (meal) {
          alternatives.push({
            day: day.day,
            mealTime: mealTime,
            current: meal.name,
            alternatives: this.findAlternativeDishes(meal, mealTime)
          });
        }
      });
    });

    return alternatives;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–ª—é–¥–∞
   */
  findAlternativeDishes(currentMeal, mealTime) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
    const alternatives = [];
    
    if (currentMeal.name.toLowerCase().includes('–∫—É—Ä–∏—Ü–∞')) {
      alternatives.push('–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É', '–ì–æ–≤—è–¥–∏–Ω–∞ –Ω–∞ –≥—Ä–∏–ª–µ', '–¢–æ—Ñ—É —Å –æ–≤–æ—â–∞–º–∏');
    } else if (currentMeal.name.toLowerCase().includes('—Ä–∏—Å')) {
      alternatives.push('–ì—Ä–µ—á–∫–∞', '–ë—É–ª–≥—É—Ä', '–ö–∏–Ω–æ–∞');
    } else if (currentMeal.name.toLowerCase().includes('—Å–∞–ª–∞—Ç')) {
      alternatives.push('–û–≤–æ—â–Ω–æ–π —Å—É–ø', '–¢—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏', '–û–≤–æ—â–∏ –Ω–∞ –≥—Ä–∏–ª–µ');
    }

    return alternatives.slice(0, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
   */
  generateTips(goal) {
    const tips = {
      weight_loss: [
        '–ü–µ–π—Ç–µ –≤–æ–¥—É –ø–µ—Ä–µ–¥ –µ–¥–æ–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∞–ø–ø–µ—Ç–∏—Ç–∞',
        '–ï—à—å—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∂–µ–≤—ã–≤–∞—è –ø–∏—â—É',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–∫—É—Å–æ–≤ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏'
      ],
      muscle_gain: [
        '–ï—à—å—Ç–µ –±–µ–ª–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        '–†–∞–∑–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –Ω–∞ 5-6 —Ä–∞–∑ –≤ –¥–µ–Ω—å',
        '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏'
      ],
      healthy: [
        '–í–∫–ª—é—á–∞–π—Ç–µ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –æ–≤–æ—â–∏',
        '–ü–µ–π—Ç–µ 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å',
        '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –∏ —Å–æ–ª–∏'
      ],
      diabetic_friendly: [
        '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π',
        '–ï—à—å—Ç–µ –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –≥–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º'
      ]
    };

    return tips[goal] || tips.healthy;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
   */
  generateShoppingList(mealPlan) {
    const ingredients = new Map();

    mealPlan.days.forEach(day => {
      Object.values(day.meals).forEach(meal => {
        if (meal && meal.ingredients) {
          const mealIngredients = meal.ingredients.split(',').map(ing => ing.trim());
          mealIngredients.forEach(ingredient => {
            if (ingredient) {
              const count = ingredients.get(ingredient) || 0;
              ingredients.set(ingredient, count + 1);
            }
          });
        }
      });
    });

    return Array.from(ingredients.entries()).map(([ingredient, count]) => ({
      ingredient,
      count,
      category: this.categorizeIngredient(ingredient)
    }));
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
   */
  categorizeIngredient(ingredient) {
    const name = ingredient.toLowerCase();
    
    if (name.includes('–º—è—Å–æ') || name.includes('–∫—É—Ä–∏—Ü–∞') || name.includes('—Ä—ã–±–∞')) {
      return '–ú—è—Å–æ –∏ —Ä—ã–±–∞';
    } else if (name.includes('–æ–≤–æ—â') || name.includes('–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å') || name.includes('–º–æ—Ä–∫–æ–≤—å')) {
      return '–û–≤–æ—â–∏';
    } else if (name.includes('–º–æ–ª–æ–∫–æ') || name.includes('—Å—ã—Ä') || name.includes('—Ç–≤–æ—Ä–æ–≥')) {
      return '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã';
    } else if (name.includes('—Ö–ª–µ–±') || name.includes('–º—É–∫–∞') || name.includes('—Ä–∏—Å')) {
      return '–ó–µ—Ä–Ω–æ–≤—ã–µ';
    } else {
      return '–ü—Ä–æ—á–µ–µ';
    }
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
   */
  estimatePrepTime(mealPlan) {
    let totalTime = 0;
    let mealCount = 0;

    mealPlan.days.forEach(day => {
      Object.values(day.meals).forEach(meal => {
        if (meal) {
          // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
          if (meal.name.toLowerCase().includes('—Å—É–ø') || meal.name.toLowerCase().includes('–±–æ—Ä—â')) {
            totalTime += 60; // 1 —á–∞—Å –¥–ª—è —Å—É–ø–æ–≤
          } else if (meal.name.toLowerCase().includes('—Å–∞–ª–∞—Ç')) {
            totalTime += 15; // 15 –º–∏–Ω—É—Ç –¥–ª—è —Å–∞–ª–∞—Ç–æ–≤
          } else {
            totalTime += 30; // 30 –º–∏–Ω—É—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª—é–¥
          }
          mealCount++;
        }
      });
    });

    return {
      totalMinutes: totalTime,
      averagePerMeal: Math.round(totalTime / Math.max(mealCount, 1)),
      totalHours: Math.round(totalTime / 60 * 10) / 10
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞–Ω–∞
   */
  estimateCost(mealPlan) {
    let totalCost = 0;
    let mealCount = 0;

    mealPlan.days.forEach(day => {
      Object.values(day.meals).forEach(meal => {
        if (meal && meal.price) {
          totalCost += meal.price;
          mealCount++;
        }
      });
    });

    return {
      totalCost: totalCost,
      averagePerMeal: Math.round(totalCost / Math.max(mealCount, 1)),
      averagePerDay: Math.round(totalCost / mealPlan.days.length)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –¥–ª—è –¥–Ω—è
   */
  getDateString(dayIndex) {
    const today = new Date();
    const targetDate = new Date(today);
    targetDate.setDate(today.getDate() + dayIndex);
    
    return targetDate.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      weekday: 'long'
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
const aiMealPlanner = new AIMealPlanner();
export default aiMealPlanner;

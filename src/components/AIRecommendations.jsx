import React, { useState, useEffect, useCallback } from 'react';

const AIRecommendations = ({ dishes, onDishSelect }) => {
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [userPreferences, setUserPreferences] = useState({
    cuisine: 'all',
    priceRange: 'all',
    cookingTime: 'all',
    dietary: 'all'
  });

  const analyzeUserPreferences = (orders) => {
    if (orders.length === 0) {
      return {
        favoriteCuisines: ['tatar', 'russian'],
        averagePrice: 500,
        preferredCookingTime: 45,
        dietaryRestrictions: [],
        favoriteIngredients: ['–º—è—Å–æ', '–æ–≤–æ—â–∏', '—Å–ø–µ—Ü–∏–∏']
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É—Ö–Ω–∏
    const cuisineCount = {};
    const priceSum = orders.reduce((sum, order) => sum + (order.price || 0), 0);
    const cookingTimeSum = orders.reduce((sum, order) => sum + (order.cookingTime || 30), 0);
    
    orders.forEach(order => {
      if (order.category) {
        cuisineCount[order.category] = (cuisineCount[order.category] || 0) + 1;
      }
    });

    const favoriteCuisines = Object.keys(cuisineCount)
      .sort((a, b) => cuisineCount[b] - cuisineCount[a])
      .slice(0, 3);

    return {
      favoriteCuisines,
      averagePrice: priceSum / orders.length,
      preferredCookingTime: cookingTimeSum / orders.length,
      dietaryRestrictions: [],
      favoriteIngredients: ['–º—è—Å–æ', '–æ–≤–æ—â–∏', '—Å–ø–µ—Ü–∏–∏'] // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    };
  };

  const generateAIReason = (dish, preferences, rank) => {
    const reasons = [
      `–ü–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ –∫—É—Ö–Ω–µ ${dish.category}`,
      `–¶–µ–Ω–∞ –≤ –≤–∞—à–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (${dish.price}‚ÇΩ)`,
      `–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è ${dish.cookingTime || 30} –º–∏–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º`,
      `–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (${(dish.rating || 0).toFixed(1)}‚≠ê)`,
      `–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –±–ª—é–¥–æ —Å—Ä–µ–¥–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      `–°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã`
    ];

    return reasons[Math.floor(Math.random() * reasons.length)];
  };

  const generateAIRecommendations = useCallback((dishes, preferences) => {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
    let filteredDishes = dishes.filter(dish => {
      // –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ö–Ω–µ
      if (preferences.favoriteCuisines.length > 0 && 
          !preferences.favoriteCuisines.includes(dish.category)) {
        return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π)
      const priceRange = preferences.averagePrice * 0.5;
      if (Math.abs(dish.price - preferences.averagePrice) > priceRange) {
        return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30 –º–∏–Ω—É—Ç)
      const timeDiff = Math.abs((dish.cookingTime || 30) - preferences.preferredCookingTime);
      if (timeDiff > 30) {
        return false;
      }

      return true;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    filteredDishes = filteredDishes.sort((a, b) => {
      const ratingA = a.rating || 0;
      const ratingB = b.rating || 0;
      return ratingB - ratingA;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º AI-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
    return filteredDishes.slice(0, 6).map((dish, index) => ({
      ...dish,
      aiReason: generateAIReason(dish, preferences, index + 1)
    }));
  }, []);

  const generateRecommendations = useCallback(async () => {
    setLoading(true);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage
      const orderHistory = JSON.parse(localStorage.getItem('orderHistory') || '[]');
      const recentOrders = orderHistory.slice(-10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const preferences = analyzeUserPreferences(recentOrders);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      const aiRecommendations = generateAIRecommendations(dishes, preferences);
      
      setRecommendations(aiRecommendations);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    } finally {
      setLoading(false);
    }
  }, [dishes, generateAIRecommendations]);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  useEffect(() => {
    generateRecommendations();
  }, [generateRecommendations]);

  const handlePreferenceChange = (key, value) => {
    setUserPreferences(prev => ({
      ...prev,
      [key]: value
    }));
  };

  if (loading) {
    return (
      <div style={{
        padding: '20px',
        textAlign: 'center',
        background: 'rgba(255, 255, 255, 0.9)',
        borderRadius: '15px',
        margin: '20px 0'
      }}>
        <div style={{ fontSize: '24px', marginBottom: '10px' }}>ü§ñ</div>
        <div>AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...</div>
      </div>
    );
  }

  return (
    <div style={{
      background: 'rgba(255, 255, 255, 0.9)',
      borderRadius: '15px',
      padding: '20px',
      margin: '20px 0',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
      backdropFilter: 'blur(10px)',
      border: '1px solid rgba(255, 255, 255, 0.2)'
    }}>
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '10px',
        marginBottom: '20px'
      }}>
        <h3 style={{ margin: 0, color: '#2c3e50' }}>ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
        <button
          onClick={generateRecommendations}
          style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
            border: 'none',
            padding: '6px 12px',
            borderRadius: '20px',
            fontSize: '12px',
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
        gap: '10px',
        marginBottom: '20px',
        padding: '15px',
        background: 'rgba(102, 126, 234, 0.1)',
        borderRadius: '10px'
      }}>
        <div>
          <label style={{ fontSize: '12px', fontWeight: 'bold', color: '#2c3e50' }}>
            –ö—É—Ö–Ω—è:
          </label>
          <select
            value={userPreferences.cuisine}
            onChange={(e) => handlePreferenceChange('cuisine', e.target.value)}
            style={{
              width: '100%',
              padding: '4px',
              borderRadius: '4px',
              border: '1px solid #ddd',
              fontSize: '12px'
            }}
          >
            <option value="all">–õ—é–±–∞—è</option>
            <option value="tatar">–¢–∞—Ç–∞—Ä—Å–∫–∞—è</option>
            <option value="russian">–†—É—Å—Å–∫–∞—è</option>
            <option value="european">–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è</option>
          </select>
        </div>
        <div>
          <label style={{ fontSize: '12px', fontWeight: 'bold', color: '#2c3e50' }}>
            –¶–µ–Ω–∞:
          </label>
          <select
            value={userPreferences.priceRange}
            onChange={(e) => handlePreferenceChange('priceRange', e.target.value)}
            style={{
              width: '100%',
              padding: '4px',
              borderRadius: '4px',
              border: '1px solid #ddd',
              fontSize: '12px'
            }}
          >
            <option value="all">–õ—é–±–∞—è</option>
            <option value="budget">–î–æ 300‚ÇΩ</option>
            <option value="medium">300-600‚ÇΩ</option>
            <option value="premium">600‚ÇΩ+</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '15px'
      }}>
        {recommendations.map((dish, index) => (
          <div
            key={dish.id}
            onClick={() => onDishSelect && onDishSelect(dish)}
            style={{
              background: 'white',
              borderRadius: '10px',
              padding: '15px',
              border: '2px solid #e8f4f8',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              position: 'relative',
              overflow: 'hidden'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.1)';
              e.currentTarget.style.borderColor = '#667eea';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = 'none';
              e.currentTarget.style.borderColor = '#e8f4f8';
            }}
          >
            {/* AI Badge */}
            <div style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              padding: '4px 8px',
              borderRadius: '12px',
              fontSize: '10px',
              fontWeight: 'bold'
            }}>
              AI #{index + 1}
            </div>

            <h4 style={{ 
              margin: '0 0 8px 0', 
              color: '#2c3e50',
              fontSize: '16px'
            }}>
              {dish.name}
            </h4>
            
            <p style={{ 
              margin: '0 0 10px 0', 
              color: '#666',
              fontSize: '12px',
              lineHeight: '1.4'
            }}>
              {dish.description}
            </p>

            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '8px'
            }}>
              <span style={{
                fontSize: '18px',
                fontWeight: 'bold',
                color: '#2e7d32'
              }}>
                {dish.price}‚ÇΩ
              </span>
              <span style={{
                fontSize: '12px',
                color: '#666'
              }}>
                ‚è∞ {dish.cookingTime || 30} –º–∏–Ω
              </span>
            </div>

            <div style={{
              background: 'rgba(102, 126, 234, 0.1)',
              padding: '8px',
              borderRadius: '6px',
              fontSize: '11px',
              color: '#2c3e50',
              fontStyle: 'italic'
            }}>
              üí° {dish.aiReason}
            </div>
          </div>
        ))}
      </div>

      {recommendations.length === 0 && (
        <div style={{
          textAlign: 'center',
          padding: '40px',
          color: '#666'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '10px' }}>ü§ñ</div>
          <div>AI –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
          <div style={{ fontSize: '12px', marginTop: '5px' }}>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
          </div>
        </div>
      )}
    </div>
  );
};

export default AIRecommendations;
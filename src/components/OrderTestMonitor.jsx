import React, { useState, useEffect } from 'react';

const OrderTestMonitor = () => {
  const [orders, setOrders] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [cart, setCart] = useState([]);
  const [refreshInterval, setRefreshInterval] = useState(2000);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadData = () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
      const ordersData = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      setOrders(ordersData);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notificationsData = JSON.parse(localStorage.getItem('chefNotifications') || '[]');
      setNotifications(notificationsData);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      const cartData = JSON.parse(localStorage.getItem('cart') || '[]');
      setCart(cartData);
    } catch (error) {
      console.error('Error loading data:', error);
    }
  };

  useEffect(() => {
    loadData();
    const interval = setInterval(loadData, refreshInterval);
    return () => clearInterval(interval);
  }, [refreshInterval]);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const ordersByStatus = orders.reduce((acc, order) => {
    const status = order.status || 'unknown';
    if (!acc[status]) acc[status] = [];
    acc[status].push(order);
    return acc;
  }, {});

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = {
    totalOrders: orders.length,
    testOrders: orders.filter(o => o.id.startsWith('test-order-')).length,
    unreadNotifications: notifications.filter(n => !n.read).length,
    cartItems: cart.length,
    cartTotal: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0)
  };

  return (
    <div style={{
      padding: '20px',
      maxWidth: '1400px',
      margin: '0 auto',
      fontFamily: 'Arial, sans-serif'
    }}>
      <h1 style={{ color: '#2D5016', marginBottom: '20px' }}>
        üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤
      </h1>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
        gap: '15px',
        marginBottom: '30px'
      }}>
        <div style={{
          background: '#e3f2fd',
          padding: '15px',
          borderRadius: '10px',
          border: '1px solid #2196f3',
          textAlign: 'center'
        }}>
          <h3 style={{ margin: '0 0 10px 0', color: '#1976d2' }}>üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</h3>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1976d2' }}>
            {stats.totalOrders}
          </div>
        </div>

        <div style={{
          background: '#fff3cd',
          padding: '15px',
          borderRadius: '10px',
          border: '1px solid #ffc107',
          textAlign: 'center'
        }}>
          <h3 style={{ margin: '0 0 10px 0', color: '#856404' }}>üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</h3>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#856404' }}>
            {stats.testOrders}
          </div>
        </div>

        <div style={{
          background: '#f8d7da',
          padding: '15px',
          borderRadius: '10px',
          border: '1px solid #dc3545',
          textAlign: 'center'
        }}>
          <h3 style={{ margin: '0 0 10px 0', color: '#721c24' }}>üîî –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</h3>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#721c24' }}>
            {stats.unreadNotifications}
          </div>
        </div>

        <div style={{
          background: '#d4edda',
          padding: '15px',
          borderRadius: '10px',
          border: '1px solid #28a745',
          textAlign: 'center'
        }}>
          <h3 style={{ margin: '0 0 10px 0', color: '#155724' }}>üõí –ö–æ—Ä–∑–∏–Ω–∞</h3>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#155724' }}>
            {stats.cartItems} —Ç–æ–≤–∞—Ä–æ–≤
          </div>
          <div style={{ fontSize: '14px', color: '#155724' }}>
            {stats.cartTotal}‚ÇΩ
          </div>
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div style={{
        background: '#f8f9fa',
        padding: '15px',
        borderRadius: '10px',
        marginBottom: '20px',
        border: '1px solid #dee2e6'
      }}>
        <h3 style={{ marginBottom: '10px' }}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
        <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
          <span>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</span>
          <select
            value={refreshInterval}
            onChange={(e) => setRefreshInterval(Number(e.target.value))}
            style={{
              padding: '5px 10px',
              borderRadius: '5px',
              border: '1px solid #ccc'
            }}
          >
            <option value={1000}>1 —Å–µ–∫—É–Ω–¥–∞</option>
            <option value={2000}>2 —Å–µ–∫—É–Ω–¥—ã</option>
            <option value={5000}>5 —Å–µ–∫—É–Ω–¥</option>
            <option value={10000}>10 —Å–µ–∫—É–Ω–¥</option>
          </select>
        </label>
      </div>

      {/* –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
        gap: '20px',
        marginBottom: '30px'
      }}>
        {Object.entries(ordersByStatus).map(([status, statusOrders]) => (
          <div
            key={status}
            style={{
              background: 'white',
              padding: '15px',
              borderRadius: '10px',
              border: '1px solid #dee2e6',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}
          >
            <h3 style={{
              margin: '0 0 15px 0',
              padding: '8px 12px',
              background: getStatusColor(status),
              color: 'white',
              borderRadius: '5px',
              fontSize: '14px',
              textTransform: 'uppercase'
            }}>
              {getStatusName(status)} ({statusOrders.length})
            </h3>

            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
              {statusOrders.slice(0, 5).map(order => (
                <div
                  key={order.id}
                  style={{
                    padding: '10px',
                    background: '#f8f9fa',
                    borderRadius: '5px',
                    border: '1px solid #e9ecef',
                    fontSize: '12px'
                  }}
                >
                  <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>
                    {order.id.startsWith('test-order-') ? 'üß™ ' : 'üì¶ '}
                    {order.id}
                  </div>
                  <div style={{ color: '#6c757d' }}>
                    <div>–ö–ª–∏–µ–Ω—Ç: {order.clientName}</div>
                    <div>–ü–æ–≤–∞—Ä: {order.chefName}</div>
                    <div>–°—É–º–º–∞: {order.total}‚ÇΩ</div>
                    <div>–°–æ–∑–¥–∞–Ω: {new Date(order.createdAt).toLocaleString()}</div>
                    {order.cookingStartTime && (
                      <div>–ì–æ—Ç–æ–≤–∫–∞: {new Date(order.cookingStartTime).toLocaleString()}</div>
                    )}
                    {order.readyAt && (
                      <div>–ì–æ—Ç–æ–≤: {new Date(order.readyAt).toLocaleString()}</div>
                    )}
                    {order.deliveredAt && (
                      <div>–î–æ—Å—Ç–∞–≤–ª–µ–Ω: {new Date(order.deliveredAt).toLocaleString()}</div>
                    )}
                  </div>
                </div>
              ))}
              
              {statusOrders.length > 5 && (
                <div style={{
                  textAlign: 'center',
                  color: '#6c757d',
                  fontSize: '12px',
                  fontStyle: 'italic'
                }}>
                  ... –∏ –µ—â–µ {statusOrders.length - 5} –∑–∞–∫–∞–∑–æ–≤
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {notifications.length > 0 && (
        <div style={{
          background: 'white',
          padding: '20px',
          borderRadius: '10px',
          border: '1px solid #dee2e6',
          marginBottom: '20px'
        }}>
          <h3 style={{ marginBottom: '15px' }}>üîî –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
            {notifications.slice(0, 10).map(notification => (
              <div
                key={notification.id}
                style={{
                  padding: '10px',
                  background: notification.read ? '#f8f9fa' : '#fff3cd',
                  borderRadius: '5px',
                  border: '1px solid',
                  borderColor: notification.read ? '#e9ecef' : '#ffc107',
                  fontSize: '12px'
                }}
              >
                <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>
                  {notification.read ? '‚úÖ' : 'üîî'} {notification.title}
                </div>
                <div style={{ color: '#6c757d' }}>
                  {notification.message}
                </div>
                <div style={{ color: '#6c757d', fontSize: '11px', marginTop: '5px' }}>
                  {new Date(notification.createdAt).toLocaleString()}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ö–æ—Ä–∑–∏–Ω–∞ */}
      {cart.length > 0 && (
        <div style={{
          background: 'white',
          padding: '20px',
          borderRadius: '10px',
          border: '1px solid #dee2e6'
        }}>
          <h3 style={{ marginBottom: '15px' }}>üõí –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞</h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
            {cart.map(item => (
              <div
                key={item.id}
                style={{
                  padding: '10px',
                  background: '#f8f9fa',
                  borderRadius: '5px',
                  border: '1px solid #e9ecef',
                  fontSize: '12px',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}
              >
                <div>
                  <div style={{ fontWeight: 'bold' }}>{item.name}</div>
                  <div style={{ color: '#6c757d' }}>
                    {item.price}‚ÇΩ √ó {item.quantity} = {item.price * item.quantity}‚ÇΩ
                  </div>
                </div>
                <div style={{ fontWeight: 'bold', color: '#28a745' }}>
                  {item.price * item.quantity}‚ÇΩ
                </div>
              </div>
            ))}
            <div style={{
              padding: '10px',
              background: '#e3f2fd',
              borderRadius: '5px',
              border: '1px solid #2196f3',
              fontSize: '14px',
              fontWeight: 'bold',
              textAlign: 'center',
              color: '#1976d2'
            }}>
              –ò—Ç–æ–≥–æ: {stats.cartTotal}‚ÇΩ
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusColor(status) {
  const colors = {
    'pending_confirmation': '#ffc107',
    'confirmed': '#17a2b8',
    'preparing': '#fd7e14',
    'ready': '#28a745',
    'in_delivery': '#6f42c1',
    'delivered': '#20c997',
    'completed': '#6c757d',
    'cancelled': '#dc3545',
    'rejected': '#e83e8c',
    'unknown': '#6c757d'
  };
  return colors[status] || colors['unknown'];
}

function getStatusName(status) {
  const names = {
    'pending_confirmation': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready': '–ì–æ—Ç–æ–≤',
    'in_delivery': '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
    'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  };
  return names[status] || names['unknown'];
}

export default OrderTestMonitor;

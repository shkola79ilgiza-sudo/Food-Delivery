// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –æ—Ç–∫—Ä—ã—Ç—ã–µ API, –∫—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥, —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

import React, { useState, useEffect, useCallback } from "react";
import { integratedPricingSystem } from "../utils/integratedPricingSystem";
import { openDataAPI } from "../utils/openDataAPI";
import { crowdsourcingPrices } from "../utils/crowdsourcingPrices";
import { enhancedMockData } from "../utils/enhancedMockData";
import PriceCrowdsourcing from "./PriceCrowdsourcing";

const IntegratedPricingDemo = () => {
  const [productName, setProductName] = useState("–º—è—Å–æ");
  const [region, setRegion] = useState("moscow");
  const [loading, setLoading] = useState(false);
  const [integratedData, setIntegratedData] = useState(null);
  const [sourceData, setSourceData] = useState({});
  const [recommendations, setRecommendations] = useState([]);
  const [statistics, setStatistics] = useState(null);

  const loadAllData = useCallback(async () => {
    setLoading(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const integrated = await integratedPricingSystem.getIntegratedPrice(
        productName,
        region
      );
      setIntegratedData(integrated);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const [openData, crowdsourcing, mockData] = await Promise.allSettled([
        openDataAPI.getProductPrices(productName, region),
        Promise.resolve(crowdsourcingPrices.getPrices(productName, region)),
        Promise.resolve(enhancedMockData.getPrice(productName, region)),
      ]);

      setSourceData({
        openData: openData.status === "fulfilled" ? openData.value : null,
        crowdsourcing:
          crowdsourcing.status === "fulfilled" ? crowdsourcing.value : null,
        mockData: mockData.status === "fulfilled" ? mockData.value : null,
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recs = integratedPricingSystem.getPricingRecommendations(
        productName,
        region
      );
      setRecommendations(recs);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = integratedPricingSystem.getSystemStatistics();
      setStatistics(stats);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    } finally {
      setLoading(false);
    }
  }, [productName, region]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞
  useEffect(() => {
    if (productName) {
      loadAllData();
    }
  }, [productName, region, loadAllData]);

  const getSourceIcon = (source) => {
    const icons = {
      openData: "üèõÔ∏è",
      crowdsourcing: "üë•",
      mockData: "üìä",
      fallback: "‚ö†Ô∏è",
    };
    return icons[source] || "‚ùì";
  };

  const getConfidenceColor = (confidence) => {
    if (confidence >= 0.8) return "#27ae60";
    if (confidence >= 0.6) return "#f39c12";
    return "#e74c3c";
  };

  const getConfidenceText = (confidence) => {
    if (confidence >= 0.8) return "–í—ã—Å–æ–∫–∞—è";
    if (confidence >= 0.6) return "–°—Ä–µ–¥–Ω—è—è";
    return "–ù–∏–∑–∫–∞—è";
  };

  return (
    <div
      style={{
        background: "#ffffff",
        borderRadius: "12px",
        padding: "20px",
        boxShadow: "0 2px 10px rgba(0,0,0,0.1)",
        border: "1px solid #e9ecef",
        margin: "20px 0",
      }}
    >
      <h2
        style={{
          margin: "0 0 20px 0",
          color: "#2c3e50",
          display: "flex",
          alignItems: "center",
          gap: "10px",
        }}
      >
        <span>üîó</span>
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      </h2>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div
        style={{
          display: "flex",
          gap: "15px",
          marginBottom: "20px",
          flexWrap: "wrap",
          alignItems: "center",
        }}
      >
        <div>
          <label
            style={{
              display: "block",
              marginBottom: "5px",
              fontWeight: "bold",
              color: "#2c3e50",
            }}
          >
            –ü—Ä–æ–¥—É–∫—Ç:
          </label>
          <input
            type="text"
            value={productName}
            onChange={(e) => setProductName(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
            style={{
              padding: "8px 12px",
              border: "2px solid #e9ecef",
              borderRadius: "6px",
              fontSize: "14px",
              minWidth: "200px",
            }}
          />
        </div>

        <div>
          <label
            style={{
              display: "block",
              marginBottom: "5px",
              fontWeight: "bold",
              color: "#2c3e50",
            }}
          >
            –†–µ–≥–∏–æ–Ω:
          </label>
          <select
            value={region}
            onChange={(e) => setRegion(e.target.value)}
            style={{
              padding: "8px 12px",
              border: "2px solid #e9ecef",
              borderRadius: "6px",
              fontSize: "14px",
            }}
          >
            <option value="moscow">–ú–æ—Å–∫–≤–∞</option>
            <option value="spb">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</option>
            <option value="ekaterinburg">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</option>
            <option value="novosibirsk">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</option>
            <option value="krasnodar">–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä</option>
            <option value="volgograd">–í–æ–ª–≥–æ–≥—Ä–∞–¥</option>
            <option value="tatarstan">–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω</option>
            <option value="bashkortostan">–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω</option>
            <option value="chelyabinsk">–ß–µ–ª—è–±–∏–Ω—Å–∫</option>
            <option value="omsk">–û–º—Å–∫</option>
            <option value="samara">–°–∞–º–∞—Ä–∞</option>
            <option value="rostov">–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É</option>
            <option value="ufa">–£—Ñ–∞</option>
            <option value="krasnoyarsk">–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫</option>
            <option value="voronezh">–í–æ—Ä–æ–Ω–µ–∂</option>
            <option value="perm">–ü–µ—Ä–º—å</option>
            <option value="volgograd">–í–æ–ª–≥–æ–≥—Ä–∞–¥</option>
            <option value="saratov">–°–∞—Ä–∞—Ç–æ–≤</option>
            <option value="tyumen">–¢—é–º–µ–Ω—å</option>
            <option value="toljatti">–¢–æ–ª—å—è—Ç—Ç–∏</option>
            <option value="izhevsk">–ò–∂–µ–≤—Å–∫</option>
            <option value="barnaul">–ë–∞—Ä–Ω–∞—É–ª</option>
            <option value="ulyanovsk">–£–ª—å—è–Ω–æ–≤—Å–∫</option>
            <option value="vladivostok">–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</option>
            <option value="yaroslavl">–Ø—Ä–æ—Å–ª–∞–≤–ª—å</option>
            <option value="makhachkala">–ú–∞—Ö–∞—á–∫–∞–ª–∞</option>
            <option value="tomsk">–¢–æ–º—Å–∫</option>
            <option value="orenburg">–û—Ä–µ–Ω–±—É—Ä–≥</option>
            <option value="kemerovo">–ö–µ–º–µ—Ä–æ–≤–æ</option>
            <option value="ryazan">–†—è–∑–∞–Ω—å</option>
            <option value="astrakhan">–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å</option>
            <option value="naberezhnye_chelny">–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã</option>
            <option value="penza">–ü–µ–Ω–∑–∞</option>
            <option value="lipetsk">–õ–∏–ø–µ—Ü–∫</option>
            <option value="tula">–¢—É–ª–∞</option>
            <option value="kirov">–ö–∏—Ä–æ–≤</option>
            <option value="cheboksary">–ß–µ–±–æ–∫—Å–∞—Ä—ã</option>
            <option value="kaliningrad">–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥</option>
            <option value="bryansk">–ë—Ä—è–Ω—Å–∫</option>
            <option value="ivanovo">–ò–≤–∞–Ω–æ–≤–æ</option>
            <option value="magnitogorsk">–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫</option>
            <option value="tver">–¢–≤–µ—Ä—å</option>
            <option value="stavropol">–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å</option>
            <option value="nizhny_tagil">–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª</option>
            <option value="belgorod">–ë–µ–ª–≥–æ—Ä–æ–¥</option>
            <option value="arkhangelsk">–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫</option>
            <option value="vladimir">–í–ª–∞–¥–∏–º–∏—Ä</option>
            <option value="sevastopol">–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å</option>
            <option value="chita">–ß–∏—Ç–∞</option>
            <option value="kursk">–ö—É—Ä—Å–∫</option>
            <option value="kaluga">–ö–∞–ª—É–≥–∞</option>
            <option value="smolensk">–°–º–æ–ª–µ–Ω—Å–∫</option>
            <option value="murmansk">–ú—É—Ä–º–∞–Ω—Å–∫</option>
            <option value="kamchatka">–ö–∞–º—á–∞—Ç–∫–∞</option>
            <option value="sakhalin">–°–∞—Ö–∞–ª–∏–Ω</option>
            <option value="yakutia">–Ø–∫—É—Ç–∏—è</option>
            <option value="tuva">–¢—É–≤–∞</option>
            <option value="khakassia">–•–∞–∫–∞—Å–∏—è</option>
            <option value="altai">–ê–ª—Ç–∞–π</option>
            <option value="buryatia">–ë—É—Ä—è—Ç–∏—è</option>
            <option value="kalmykia">–ö–∞–ª–º—ã–∫–∏—è</option>
            <option value="karelia">–ö–∞—Ä–µ–ª–∏—è</option>
            <option value="komi">–ö–æ–º–∏</option>
            <option value="mari_el">–ú–∞—Ä–∏–π –≠–ª</option>
            <option value="mordovia">–ú–æ—Ä–¥–æ–≤–∏—è</option>
            <option value="udmurtia">–£–¥–º—É—Ä—Ç–∏—è</option>
            <option value="chuvashia">–ß—É–≤–∞—à–∏—è</option>
            <option value="adygea">–ê–¥—ã–≥–µ—è</option>
            <option value="altai_republic">–ê–ª—Ç–∞–π</option>
            <option value="ingushetia">–ò–Ω–≥—É—à–µ—Ç–∏—è</option>
            <option value="kabardino_balkaria">–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è</option>
            <option value="karachay_cherkessia">–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å–∏—è</option>
            <option value="north_ossetia">–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è</option>
            <option value="chechnya">–ß–µ—á–Ω—è</option>
            <option value="dagestan">–î–∞–≥–µ—Å—Ç–∞–Ω</option>
          </select>
        </div>

        <button
          onClick={loadAllData}
          disabled={loading}
          style={{
            padding: "8px 16px",
            background: loading ? "#95a5a6" : "#3498db",
            color: "white",
            border: "none",
            borderRadius: "6px",
            fontSize: "14px",
            fontWeight: "bold",
            cursor: loading ? "not-allowed" : "pointer",
            alignSelf: "flex-end",
          }}
        >
          {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–û–±–Ω–æ–≤–∏—Ç—å"}
        </button>
      </div>

      {/* –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
      {integratedData && integratedData.success && (
        <div
          style={{
            background: "#e8f5e8",
            padding: "15px",
            borderRadius: "8px",
            marginBottom: "20px",
            border: "1px solid #c3e6c3",
          }}
        >
          <h3
            style={{
              margin: "0 0 10px 0",
              color: "#155724",
              display: "flex",
              alignItems: "center",
              gap: "8px",
            }}
          >
            <span>üéØ</span>
            –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
          </h3>
          <div
            style={{ fontSize: "18px", fontWeight: "bold", color: "#155724" }}
          >
            {integratedData.integratedPrice}‚ÇΩ
          </div>
          <div style={{ fontSize: "14px", color: "#155724", marginTop: "5px" }}>
            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {Math.round(integratedData.confidence * 100)}% |
            –î–∏–∞–ø–∞–∑–æ–Ω: {integratedData.minPrice}‚ÇΩ - {integratedData.maxPrice}‚ÇΩ |
            –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {integratedData.sources}
          </div>
        </div>
      )}

      {/* –î–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º */}
      <div style={{ marginBottom: "20px" }}>
        <h3
          style={{
            margin: "0 0 15px 0",
            color: "#2c3e50",
            display: "flex",
            alignItems: "center",
            gap: "8px",
          }}
        >
          <span>üìä</span>
          –î–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        </h3>

        <div style={{ display: "grid", gap: "15px" }}>
          {/* –û—Ç–∫—Ä—ã—Ç—ã–µ API */}
          {sourceData.openData && (
            <div
              style={{
                padding: "15px",
                background: "#f8f9fa",
                borderRadius: "8px",
                border: "1px solid #e9ecef",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "8px",
                  marginBottom: "10px",
                }}
              >
                <span>{getSourceIcon("openData")}</span>
                <strong>–û—Ç–∫—Ä—ã—Ç—ã–µ API (–†–æ—Å—Å—Ç–∞—Ç, –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)</strong>
              </div>
              <div
                style={{
                  fontSize: "16px",
                  fontWeight: "bold",
                  color: "#2c3e50",
                }}
              >
                {sourceData.openData.averagePrice}‚ÇΩ
              </div>
              <div style={{ fontSize: "14px", color: "#6c757d" }}>
                –î–∏–∞–ø–∞–∑–æ–Ω: {sourceData.openData.minPrice}‚ÇΩ -{" "}
                {sourceData.openData.maxPrice}‚ÇΩ | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:{" "}
                {Math.round(sourceData.openData.confidence * 100)}%
              </div>
            </div>
          )}

          {/* –ö—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥ */}
          {sourceData.crowdsourcing && (
            <div
              style={{
                padding: "15px",
                background: "#f8f9fa",
                borderRadius: "8px",
                border: "1px solid #e9ecef",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "8px",
                  marginBottom: "10px",
                }}
              >
                <span>{getSourceIcon("crowdsourcing")}</span>
                <strong>–ö—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥ (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</strong>
              </div>
              <div
                style={{
                  fontSize: "16px",
                  fontWeight: "bold",
                  color: "#2c3e50",
                }}
              >
                {sourceData.crowdsourcing.averagePrice}‚ÇΩ
              </div>
              <div style={{ fontSize: "14px", color: "#6c757d" }}>
                –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {sourceData.crowdsourcing.verificationCount} |
                –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:{" "}
                {Math.round(sourceData.crowdsourcing.confidence * 100)}% |
                {sourceData.crowdsourcing.verified
                  ? "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ"
                  : "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"}
              </div>
            </div>
          )}

          {/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ */}
          {sourceData.mockData && (
            <div
              style={{
                padding: "15px",
                background: "#f8f9fa",
                borderRadius: "8px",
                border: "1px solid #e9ecef",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "8px",
                  marginBottom: "10px",
                }}
              >
                <span>{getSourceIcon("mockData")}</span>
                <strong>–£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</strong>
              </div>
              <div
                style={{
                  fontSize: "16px",
                  fontWeight: "bold",
                  color: "#2c3e50",
                }}
              >
                {sourceData.mockData.regionalPrice}‚ÇΩ
              </div>
              <div style={{ fontSize: "14px", color: "#6c757d" }}>
                –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {sourceData.mockData.basePrice}‚ÇΩ | –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π
                –º–Ω–æ–∂–∏—Ç–µ–ª—å: {sourceData.mockData.regionalMultiplier}x | –°–µ–∑–æ–Ω–Ω—ã–π
                —Ñ–∞–∫—Ç–æ—Ä: {sourceData.mockData.seasonalFactor}x |
                {sourceData.mockData.seasonal}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {recommendations.length > 0 && (
        <div style={{ marginBottom: "20px" }}>
          <h3
            style={{
              margin: "0 0 15px 0",
              color: "#2c3e50",
              display: "flex",
              alignItems: "center",
              gap: "8px",
            }}
          >
            <span>üí°</span>
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </h3>
          <div
            style={{ display: "flex", flexDirection: "column", gap: "10px" }}
          >
            {recommendations.map((rec, index) => (
              <div
                key={index}
                style={{
                  padding: "12px",
                  background: rec.type === "warning" ? "#fff3cd" : "#d1ecf1",
                  borderRadius: "6px",
                  border: `1px solid ${
                    rec.type === "warning" ? "#ffeaa7" : "#bee5eb"
                  }`,
                  fontSize: "14px",
                }}
              >
                <strong>{rec.type === "warning" ? "‚ö†Ô∏è " : "‚ÑπÔ∏è "}</strong>
                {rec.message}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã */}
      {statistics && (
        <div
          style={{
            background: "#e8f4f8",
            padding: "15px",
            borderRadius: "8px",
            marginBottom: "20px",
            border: "1px solid #bee5eb",
          }}
        >
          <h3
            style={{
              margin: "0 0 10px 0",
              color: "#0c5460",
              display: "flex",
              alignItems: "center",
              gap: "8px",
            }}
          >
            <span>üìà</span>
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
          </h3>
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
              gap: "10px",
            }}
          >
            <div>
              <strong>–û—Ç–∫—Ä—ã—Ç—ã–µ API:</strong>
              <br />
              –ó–∞–ø—Ä–æ—Å–æ–≤: {statistics.openData.totalRequests}
              <br />
              –ö—ç—à: {Math.round(statistics.openData.cacheHitRate * 100)}%
            </div>
            <div>
              <strong>–ö—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥:</strong>
              <br />
              –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {statistics.crowdsourcing.totalProducts}
              <br />
              –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {statistics.crowdsourcing.verifiedProducts}
            </div>
            <div>
              <strong>–í–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</strong>
              <br />
              –û—Ç–∫—Ä—ã—Ç—ã–µ API: {Math.round(statistics.weights.openData * 100)}%
              <br />
              –ö—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥: {Math.round(statistics.weights.crowdsourcing * 100)}
              %<br />
              –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {Math.round(statistics.weights.mockData * 100)}%
            </div>
          </div>
        </div>
      )}

      {/* –ö—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥ */}
      <PriceCrowdsourcing
        productName={productName}
        onPriceAdded={() => loadAllData()}
      />
    </div>
  );
};

export default IntegratedPricingDemo;

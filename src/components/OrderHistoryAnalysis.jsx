import React, { useState, useEffect, useCallback } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { safeSetClientOrders } from '../utils/safeStorage';
import { useToast } from '../contexts/ToastContext';

const OrderHistoryAnalysis = ({ clientId, role = 'client' }) => {
  const [orderHistory, setOrderHistory] = useState([]);
  const [analysis, setAnalysis] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [preferences, setPreferences] = useState(null);
  const { t } = useLanguage();
  const { showSuccess, showError } = useToast();

  const loadOrderHistory = useCallback(() => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ localStorage - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏
      let allOrders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏
      if (allOrders.length === 0) {
        allOrders = JSON.parse(localStorage.getItem('orders') || '[]');
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–∞—Ö
      if (allOrders.length === 0) {
        const allKeys = Object.keys(localStorage);
        console.log('üìä OrderHistoryAnalysis: All localStorage keys:', allKeys);
        
        // –ò—â–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã
        const orderKeys = allKeys.filter(key => 
          key.includes('order') || key.includes('Order') || key.includes('–∑–∞–∫–∞–∑')
        );
        console.log('üìä OrderHistoryAnalysis: Potential order keys:', orderKeys);
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        for (const key of orderKeys) {
          try {
            const data = JSON.parse(localStorage.getItem(key) || '[]');
            if (Array.isArray(data) && data.length > 0) {
              console.log(`üìä OrderHistoryAnalysis: Found orders in key "${key}":`, data);
              allOrders = data;
              break;
            }
          } catch (e) {
            console.log(`üìä OrderHistoryAnalysis: Error parsing key "${key}":`, e);
          }
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ clientId (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      const clientOrders = allOrders.filter(order => 
        !clientId || order.clientId === clientId || order.clientId === 'demo_client' || !order.clientId
      );
      
      console.log('üìä OrderHistoryAnalysis: Final loaded orders:', clientOrders);
      console.log('üìä OrderHistoryAnalysis: Orders count:', clientOrders.length);
      setOrderHistory(clientOrders);
    } catch (error) {
      console.error('Error loading order history:', error);
      showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  }, [clientId, showError]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
    loadOrderHistory();
  }, [loadOrderHistory]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const createDemoOrders = () => {
    const demoOrders = [
      {
        id: 'demo-order-1',
        clientId: clientId || 'demo_client',
        createdAt: new Date().toISOString(),
        total: 610,
        status: 'delivered',
        items: [
          { name: '–ñ–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏—Ü–∞', category: 'fried', calories: 450, price: 350, quantity: 1 },
          { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', category: 'fried', calories: 320, price: 180, quantity: 1 },
          { name: '–ö–æ–∫–∞-–∫–æ–ª–∞', category: 'drinks', calories: 140, price: 80, quantity: 1 }
        ]
      },
      {
        id: 'demo-order-2',
        clientId: clientId || 'demo_client',
        createdAt: new Date(Date.now() - 86400000).toISOString(), // –í—á–µ—Ä–∞
        total: 700,
        status: 'delivered',
        items: [
          { name: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', category: 'vegetables', calories: 280, price: 250, quantity: 1 },
          { name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', category: 'baked', calories: 520, price: 450, quantity: 1 }
        ]
      },
      {
        id: 'demo-order-3',
        clientId: clientId || 'demo_client',
        createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
        total: 470,
        status: 'delivered',
        items: [
          { name: '–ñ–∞—Ä–µ–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏', category: 'fried', calories: 380, price: 320, quantity: 1 },
          { name: '–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π', category: 'vegetables', calories: 120, price: 150, quantity: 1 }
        ]
      }
    ];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–∑–∞–∫–∞–∑—ã –≤ localStorage
    safeSetClientOrders(demoOrders);
    setOrderHistory(demoOrders);
    showSuccess('–î–µ–º–æ-–∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.');
    console.log('üìä OrderHistoryAnalysis: Demo orders created:', demoOrders);
  };

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
  const analyzePreferences = (orders) => {
    const preferences = {
      favoriteCategories: {},
      favoriteDishes: {},
      averageOrderValue: 0,
      orderFrequency: 0,
      dietaryPreferences: {
        halal: 0,
        diabetic: 0,
        vegetarian: 0
      },
      timePatterns: {
        morning: 0,
        afternoon: 0,
        evening: 0
      },
      seasonalPreferences: {
        spring: 0,
        summer: 0,
        autumn: 0,
        winter: 0
      }
    };

    if (orders.length === 0) {
      return preferences;
    }

    let totalValue = 0;
    const dishCount = {};
    const categoryCount = {};
    const timeCount = { morning: 0, afternoon: 0, evening: 0 };
    const seasonCount = { spring: 0, summer: 0, autumn: 0, winter: 0 };

    orders.forEach(order => {
      totalValue += order.total || 0;
      
      // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞
      const orderDate = new Date(order.createdAt || order.date);
      const hour = orderDate.getHours();
      if (hour >= 6 && hour < 12) timeCount.morning++;
      else if (hour >= 12 && hour < 18) timeCount.afternoon++;
      else timeCount.evening++;

      // –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–∞
      const month = orderDate.getMonth();
      if (month >= 2 && month <= 4) seasonCount.spring++;
      else if (month >= 5 && month <= 7) seasonCount.summer++;
      else if (month >= 8 && month <= 10) seasonCount.autumn++;
      else seasonCount.winter++;

      // –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥
      if (order.items) {
        order.items.forEach(item => {
          // –ü–æ–¥—Å—á–µ—Ç –±–ª—é–¥
          dishCount[item.name] = (dishCount[item.name] || 0) + item.quantity;
          
          // –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          const category = item.category || 'other';
          categoryCount[category] = (categoryCount[category] || 0) + item.quantity;
          
          // –ê–Ω–∞–ª–∏–∑ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
          if (item.halal) preferences.dietaryPreferences.halal++;
          if (item.diabeticFriendly) preferences.dietaryPreferences.diabetic++;
          if (item.vegetarian) preferences.dietaryPreferences.vegetarian++;
        });
      }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    preferences.averageOrderValue = Math.round(totalValue / orders.length);
    preferences.orderFrequency = orders.length;

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    preferences.favoriteDishes = Object.entries(dishCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .reduce((obj, [dish, count]) => {
        obj[dish] = count;
        return obj;
      }, {});

    preferences.favoriteCategories = Object.entries(categoryCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .reduce((obj, [category, count]) => {
        obj[category] = count;
        return obj;
      }, {});

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const totalTimeOrders = timeCount.morning + timeCount.afternoon + timeCount.evening;
    if (totalTimeOrders > 0) {
      preferences.timePatterns.morning = Math.round((timeCount.morning / totalTimeOrders) * 100);
      preferences.timePatterns.afternoon = Math.round((timeCount.afternoon / totalTimeOrders) * 100);
      preferences.timePatterns.evening = Math.round((timeCount.evening / totalTimeOrders) * 100);
    }

    // –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    const totalSeasonOrders = Object.values(seasonCount).reduce((a, b) => a + b, 0);
    if (totalSeasonOrders > 0) {
      preferences.seasonalPreferences.spring = Math.round((seasonCount.spring / totalSeasonOrders) * 100);
      preferences.seasonalPreferences.summer = Math.round((seasonCount.summer / totalSeasonOrders) * 100);
      preferences.seasonalPreferences.autumn = Math.round((seasonCount.autumn / totalSeasonOrders) * 100);
      preferences.seasonalPreferences.winter = Math.round((seasonCount.winter / totalSeasonOrders) * 100);
    }

    return preferences;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const generatePersonalizedRecommendations = (preferences, orders) => {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—é–±–∏–º—ã—Ö –±–ª—é–¥
    const favoriteDishes = Object.keys(preferences.favoriteDishes);
    if (favoriteDishes.length > 0) {
      recommendations.push({
        type: 'favorite_dishes',
        title: '–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞',
        description: `–í—ã —á–∞—Å—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ: ${favoriteDishes.slice(0, 3).join(', ')}`,
        dishes: favoriteDishes.slice(0, 3),
        priority: 'high'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const favoriteCategories = Object.keys(preferences.favoriteCategories);
    if (favoriteCategories.includes('—Å–∞–ª–∞—Ç—ã')) {
      recommendations.push({
        type: 'category_suggestion',
        title: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å–∞–ª–∞—Ç—ã',
        description: '–í—ã –ª—é–±–∏—Ç–µ —Å–∞–ª–∞—Ç—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
        dishes: ['–°–∞–ª–∞—Ç "–¶–µ–∑–∞—Ä—å"', '–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç', '–°–∞–ª–∞—Ç —Å –∞–≤–æ–∫–∞–¥–æ'],
        priority: 'medium'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const mostActiveTime = Object.entries(preferences.timePatterns)
      .sort(([,a], [,b]) => b - a)[0];
    
    if (mostActiveTime && mostActiveTime[1] > 50) {
      const timeName = mostActiveTime[0] === 'morning' ? '—É—Ç—Ä–æ–º' : 
                      mostActiveTime[0] === 'afternoon' ? '–¥–Ω–µ–º' : '–≤–µ—á–µ—Ä–æ–º';
      recommendations.push({
        type: 'time_based',
        title: `–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è ${timeName}`,
        description: `–í—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ ${timeName}. –í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:`,
        dishes: mostActiveTime[0] === 'morning' ? ['–û–º–ª–µ—Ç', '–ö–∞—à–∞', '–ë–ª–∏–Ω—ã'] :
                mostActiveTime[0] === 'afternoon' ? ['–°—É–ø', '–°–∞–ª–∞—Ç', '–°—ç–Ω–¥–≤–∏—á'] :
                ['–£–∂–∏–Ω', '–î–µ—Å–µ—Ä—Ç', '–ù–∞–ø–∏—Ç–æ–∫'],
        priority: 'medium'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    const dietaryPrefs = preferences.dietaryPreferences;
    if (dietaryPrefs.halal > 0) {
      recommendations.push({
        type: 'dietary',
        title: '–•–∞–ª—è–ª—å–Ω—ã–µ –±–ª—é–¥–∞',
        description: '–ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ö–∞–ª—è–ª—å–Ω—É—é –∫—É—Ö–Ω—é',
        dishes: ['–ü–ª–æ–≤ —Ö–∞–ª—è–ª—å', '–ú–∞–Ω—Ç—ã —Ö–∞–ª—è–ª—å', '–°–∞–º—Å–∞ —Ö–∞–ª—è–ª—å'],
        priority: 'high'
      });
    }

    if (dietaryPrefs.diabetic > 0) {
      recommendations.push({
        type: 'dietary',
        title: '–î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é',
        description: '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª—é–¥–∞',
        dishes: ['–î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Ç', '–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω—ã–π —Å–∞–ª–∞—Ç', '–ë–µ–∑—Å–∞—Ö–∞—Ä–Ω—ã–π –∫–æ–º–ø–æ—Ç'],
        priority: 'high'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∑–æ–Ω–∞
    const currentSeason = getCurrentSeason();
    const seasonPercentage = preferences.seasonalPreferences[currentSeason];
    if (seasonPercentage > 30) {
      const seasonDishes = {
        spring: ['–°–≤–µ–∂–∏–µ —Å–∞–ª–∞—Ç—ã', '–ó–µ–ª–µ–Ω—ã–µ —Å—É–ø—ã', '–í–µ—Å–µ–Ω–Ω–∏–µ –æ–≤–æ—â–∏'],
        summer: ['–•–æ–ª–æ–¥–Ω—ã–µ —Å—É–ø—ã', '–°–≤–µ–∂–∏–µ —Ñ—Ä—É–∫—Ç—ã', '–õ–µ—Ç–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∏'],
        autumn: ['–¢—ã–∫–≤–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞', '–ì—Ä–∏–±–Ω—ã–µ —Å—É–ø—ã', '–û—Å–µ–Ω–Ω–∏–µ —Å–∞–ª–∞—Ç—ã'],
        winter: ['–ì–æ—Ä—è—á–∏–µ —Å—É–ø—ã', '–°–æ–≥—Ä–µ–≤–∞—é—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏', '–ó–∏–º–Ω–∏–µ –¥–µ—Å–µ—Ä—Ç—ã']
      };
      
      recommendations.push({
        type: 'seasonal',
        title: `${getSeasonName(currentSeason)}–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`,
        description: `–í ${getSeasonName(currentSeason).toLowerCase()} –≤—ã –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã –≤ –∑–∞–∫–∞–∑–∞—Ö`,
        dishes: seasonDishes[currentSeason],
        priority: 'medium'
      });
    }

    return recommendations;
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const getCurrentSeason = () => {
    const month = new Date().getMonth();
    if (month >= 2 && month <= 4) return 'spring';
    if (month >= 5 && month <= 7) return 'summer';
    if (month >= 8 && month <= 10) return 'autumn';
    return 'winter';
  };

  const getSeasonName = (season) => {
    const names = {
      spring: '–í–µ—Å–µ–Ω',
      summer: '–õ–µ—Ç–Ω',
      autumn: '–û—Å–µ–Ω–Ω',
      winter: '–ó–∏–º–Ω'
    };
    return names[season] || '–°–µ–∑–æ–Ω–Ω';
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const performAnalysis = () => {
    console.log('üìä OrderHistoryAnalysis: Starting analysis...');
    setIsAnalyzing(true);

    setTimeout(() => {
      try {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        const clientPreferences = analyzePreferences(orderHistory);
        console.log('üìä OrderHistoryAnalysis: Preferences analyzed:', clientPreferences);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const personalizedRecommendations = generatePersonalizedRecommendations(clientPreferences, orderHistory);
        console.log('üìä OrderHistoryAnalysis: Recommendations generated:', personalizedRecommendations);

        // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        const analysisResult = {
          preferences: clientPreferences,
          recommendations: personalizedRecommendations,
          totalOrders: orderHistory.length,
          analysisDate: new Date().toISOString(),
          insights: generateInsights(clientPreferences, orderHistory)
        };

        setAnalysis(analysisResult);
        setPreferences(clientPreferences);
        setIsAnalyzing(false);
        
        showSuccess(`–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${personalizedRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
      } catch (error) {
        console.error('Error during analysis:', error);
        setIsAnalyzing(false);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    }, 2000);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
  const generateInsights = (preferences, orders) => {
    const insights = [];

    if (preferences.orderFrequency > 10) {
      insights.push({
        type: 'loyalty',
        message: '–í—ã –Ω–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ.',
        icon: '‚≠ê'
      });
    }

    if (preferences.averageOrderValue > 1000) {
      insights.push({
        type: 'value',
        message: '–í—ã —Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ö–æ—Ä–æ—à—É—é –µ–¥—É.',
        icon: 'üí∞'
      });
    }

    const mostActiveTime = Object.entries(preferences.timePatterns)
      .sort(([,a], [,b]) => b - a)[0];
    
    if (mostActiveTime && mostActiveTime[1] > 60) {
      const timeName = mostActiveTime[0] === 'morning' ? '—É—Ç—Ä–æ–º' : 
                      mostActiveTime[0] === 'afternoon' ? '–¥–Ω–µ–º' : '–≤–µ—á–µ—Ä–æ–º';
      insights.push({
        type: 'pattern',
        message: `–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å ${timeName} (${mostActiveTime[1]}% –∑–∞–∫–∞–∑–æ–≤)`,
        icon: 'üïê'
      });
    }

    return insights;
  };

  return (
    <div className="order-history-analysis" style={{
      background: 'rgba(255, 255, 255, 0.95)',
      borderRadius: '15px',
      padding: '20px',
      marginBottom: '20px',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
      backdropFilter: 'blur(10px)',
      border: '1px solid rgba(255, 255, 255, 0.2)'
    }}>
      <div className="analysis-header" style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
          <button
            onClick={() => { try { window.history.pushState({}, '', '/client/menu'); window.location.assign('/client/menu'); } catch (e) { window.location.assign('/client/menu'); } }}
            style={{
              background: 'linear-gradient(135deg, #6c757d, #495057)',
              color: 'white',
              border: 'none',
              padding: '8px 16px',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '12px',
              fontWeight: 'bold',
              boxShadow: '0 2px 8px rgba(108, 117, 125, 0.3)',
              transition: 'all 0.3s ease',
              display: 'flex',
              alignItems: 'center',
              gap: '6px'
            }}
            onMouseEnter={(e) => {
              e.target.style.transform = 'translateY(-1px)';
              e.target.style.boxShadow = '0 4px 12px rgba(108, 117, 125, 0.4)';
            }}
            onMouseLeave={(e) => {
              e.target.style.transform = 'translateY(0)';
              e.target.style.boxShadow = '0 2px 8px rgba(108, 117, 125, 0.3)';
            }}
          >
            ‚Üê {t.common.back}
          </button>
          <h3 style={{ margin: 0, color: '#333' }}>
            üìä {role === 'chef' ? '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤' : '–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤'}
          </h3>
        </div>
        <div style={{ display: 'flex', gap: '10px' }}>
          {orderHistory.length === 0 && (
            <button
              onClick={createDemoOrders}
              style={{
                background: 'linear-gradient(135deg, #28a745, #20c997)',
                color: 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold'
              }}
            >
              üéØ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞–∫–∞–∑—ã
            </button>
          )}
          <button
            onClick={performAnalysis}
            disabled={isAnalyzing || orderHistory.length === 0}
            style={{
              background: isAnalyzing ? '#ccc' : 'linear-gradient(135deg, #667eea, #764ba2)',
              color: 'white',
              border: 'none',
              padding: '10px 20px',
              borderRadius: '8px',
              cursor: isAnalyzing ? 'not-allowed' : 'pointer',
              fontSize: '14px',
              fontWeight: 'bold'
            }}
          >
            {isAnalyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...' : 'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã'}
          </button>
        </div>
      </div>

      {orderHistory.length === 0 ? (
        <div style={{
          textAlign: 'center',
          padding: '40px 20px',
          color: '#666'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '20px' }}>üìä</div>
          <div style={{ fontSize: '18px', marginBottom: '10px' }}>–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤</div>
          <div style={{ fontSize: '14px' }}>–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
        </div>
      ) : (
        <div className="analysis-content">
          <div className="order-stats" style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
            gap: '15px',
            marginBottom: '20px'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, #667eea, #764ba2)',
              color: 'white',
              padding: '15px',
              borderRadius: '10px',
              textAlign: 'center'
            }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold' }}>{orderHistory.length}</div>
              <div style={{ fontSize: '14px' }}>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
            </div>
            <div style={{
              background: 'linear-gradient(135deg, #28a745, #20c997)',
              color: 'white',
              padding: '15px',
              borderRadius: '10px',
              textAlign: 'center'
            }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold' }}>
                {preferences ? `${preferences.averageOrderValue}‚ÇΩ` : '‚Äî'}
              </div>
              <div style={{ fontSize: '14px' }}>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</div>
            </div>
            <div style={{
              background: 'linear-gradient(135deg, #ff6b6b, #ff8e53)',
              color: 'white',
              padding: '15px',
              borderRadius: '10px',
              textAlign: 'center'
            }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold' }}>
                {preferences ? Object.keys(preferences.favoriteDishes).length : '‚Äî'}
              </div>
              <div style={{ fontSize: '14px' }}>–õ—é–±–∏–º—ã—Ö –±–ª—é–¥</div>
            </div>
          </div>

          {analysis && (
            <div className="analysis-results">
              {/* –ò–Ω—Å–∞–π—Ç—ã */}
              {analysis.insights && analysis.insights.length > 0 && (
                <div className="insights-section" style={{
                  background: 'rgba(102, 126, 234, 0.1)',
                  padding: '15px',
                  borderRadius: '10px',
                  marginBottom: '20px'
                }}>
                  <h4 style={{ color: '#333', marginBottom: '15px' }}>üí° –ò–Ω—Å–∞–π—Ç—ã –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö:</h4>
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
                    {analysis.insights.map((insight, index) => (
                      <div key={index} style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '10px',
                        padding: '10px',
                        background: 'rgba(255, 255, 255, 0.7)',
                        borderRadius: '8px'
                      }}>
                        <span style={{ fontSize: '20px' }}>{insight.icon}</span>
                        <span style={{ fontSize: '14px' }}>{insight.message}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
              {analysis.recommendations && analysis.recommendations.length > 0 && (
                <div className="recommendations-section">
                  <h4 style={{ color: '#333', marginBottom: '15px' }}>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                    gap: '15px'
                  }}>
                    {analysis.recommendations.map((rec, index) => (
                      <div key={index} style={{
                        background: rec.priority === 'high' ? 
                          'linear-gradient(135deg, #ff6b6b, #ff8e53)' :
                          'linear-gradient(135deg, #667eea, #764ba2)',
                        color: 'white',
                        padding: '15px',
                        borderRadius: '10px',
                        border: rec.priority === 'high' ? '2px solid #ff4757' : 'none'
                      }}>
                        <div style={{ fontWeight: 'bold', marginBottom: '8px', fontSize: '16px' }}>
                          {rec.title}
                        </div>
                        <div style={{ fontSize: '14px', marginBottom: '10px', opacity: 0.9 }}>
                          {rec.description}
                        </div>
                        <div style={{ fontSize: '12px' }}>
                          <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</strong> {rec.dishes.join(', ')}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default OrderHistoryAnalysis;

import React, { useState, useEffect, useCallback } from 'react';
import { useToast } from '../contexts/ToastContext';
import '../App.css';

const ChefShoppingList = ({ onClose }) => {
  const { showSuccess, showError } = useToast();
  const [shoppingList, setShoppingList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all'); // all, purchased, pending

  const loadShoppingList = useCallback(() => {
    try {
      const saved = JSON.parse(localStorage.getItem('chefShoppingList') || '[]');
      setShoppingList(saved);
    } catch (error) {
      console.error('Error loading shopping list:', error);
      showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫');
    } finally {
      setLoading(false);
    }
  }, [showError]);

  useEffect(() => {
    loadShoppingList();
  }, [loadShoppingList]);

  const markAsPurchased = (id) => {
    try {
      const updated = shoppingList.map(item => 
        item.id === id ? { ...item, purchased: !item.purchased } : item
      );
      setShoppingList(updated);
      localStorage.setItem('chefShoppingList', JSON.stringify(updated));
      
      const item = shoppingList.find(i => i.id === id);
      showSuccess(`${item.name} ${item.purchased ? '—É–¥–∞–ª–µ–Ω –∏–∑' : '–¥–æ–±–∞–≤–ª–µ–Ω –≤'} —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫`);
    } catch (error) {
      console.error('Error updating item:', error);
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞');
    }
  };

  const removeItem = (id) => {
    try {
      const updated = shoppingList.filter(item => item.id !== id);
      setShoppingList(updated);
      localStorage.setItem('chefShoppingList', JSON.stringify(updated));
      
      const item = shoppingList.find(i => i.id === id);
      showSuccess(`${item.name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫`);
    } catch (error) {
      console.error('Error removing item:', error);
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞');
    }
  };

  const updateQuantity = (id, newAmount) => {
    try {
      const updated = shoppingList.map(item => 
        item.id === id ? { 
          ...item, 
          suggestedAmount: Math.max(1, newAmount),
          estimatedCost: Math.max(1, newAmount) * (item.estimatedCost / item.suggestedAmount)
        } : item
      );
      setShoppingList(updated);
      localStorage.setItem('chefShoppingList', JSON.stringify(updated));
    } catch (error) {
      console.error('Error updating quantity:', error);
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    }
  };

  const clearPurchased = () => {
    try {
      const updated = shoppingList.filter(item => !item.purchased);
      setShoppingList(updated);
      localStorage.setItem('chefShoppingList', JSON.stringify(updated));
      showSuccess('–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞');
    } catch (error) {
      console.error('Error clearing purchased:', error);
      showError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞');
    }
  };

  const clearAll = () => {
    try {
      setShoppingList([]);
      localStorage.setItem('chefShoppingList', JSON.stringify([]));
      showSuccess('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.error('Error clearing all:', error);
      showError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞');
    }
  };

  const getFilteredList = () => {
    switch (filter) {
      case 'purchased':
        return shoppingList.filter(item => item.purchased);
      case 'pending':
        return shoppingList.filter(item => !item.purchased);
      default:
        return shoppingList;
    }
  };

  const getTotalCost = () => {
    return shoppingList
      .filter(item => !item.purchased)
      .reduce((sum, item) => sum + item.estimatedCost, 0);
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#e74c3c';
      case 'medium': return '#f39c12';
      case 'low': return '#27ae60';
      default: return '#95a5a6';
    }
  };

  const getPriorityText = (priority) => {
    switch (priority) {
      case 'high': return '–í—ã—Å–æ–∫–∏–π';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'low': return '–ù–∏–∑–∫–∏–π';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (loading) {
    return (
      <div className="chef-shopping-modal-overlay">
        <div className="chef-shopping-modal">
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫...</p>
          </div>
        </div>
      </div>
    );
  }

  const filteredList = getFilteredList();

  return (
    <div className="chef-shopping-modal-overlay" onClick={onClose}>
      <div className="chef-shopping-modal" onClick={(e) => e.stopPropagation()}>
        <div className="chef-shopping-header">
          <h3>üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</h3>
          <button onClick={onClose} className="back-button">‚úï</button>
        </div>

        <div className="chef-shopping-content">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="shopping-stats">
            <div className="stats-grid">
              <div className="stat-item">
                <div className="stat-number">{shoppingList.length}</div>
                <div className="stat-label">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</div>
              </div>
              <div className="stat-item">
                <div className="stat-number">{shoppingList.filter(item => !item.purchased).length}</div>
                <div className="stat-label">–ö –ø–æ–∫—É–ø–∫–µ</div>
              </div>
              <div className="stat-item">
                <div className="stat-number">{getTotalCost()}‚ÇΩ</div>
                <div className="stat-label">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
              </div>
            </div>
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="shopping-filters">
            <h4>üîç –§–∏–ª—å—Ç—Ä—ã</h4>
            <div className="filter-buttons">
              <button 
                className={filter === 'all' ? 'active' : ''}
                onClick={() => setFilter('all')}
              >
                –í—Å–µ ({shoppingList.length})
              </button>
              <button 
                className={filter === 'pending' ? 'active' : ''}
                onClick={() => setFilter('pending')}
              >
                –ö –ø–æ–∫—É–ø–∫–µ ({shoppingList.filter(item => !item.purchased).length})
              </button>
              <button 
                className={filter === 'purchased' ? 'active' : ''}
                onClick={() => setFilter('purchased')}
              >
                –ö—É–ø–ª–µ–Ω–æ ({shoppingList.filter(item => item.purchased).length})
              </button>
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="shopping-actions">
            <button 
              className="clear-purchased-btn"
              onClick={clearPurchased}
              disabled={shoppingList.filter(item => item.purchased).length === 0}
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ
            </button>
            <button 
              className="clear-all-btn"
              onClick={clearAll}
              disabled={shoppingList.length === 0}
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
            </button>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
          <div className="shopping-list">
            <h4>üìã –¢–æ–≤–∞—Ä—ã</h4>
            {filteredList.length === 0 ? (
              <div className="empty-list">
                <p>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç</p>
                <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ AI –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–∫—É–ø–æ–∫</p>
              </div>
            ) : (
              <div className="shopping-items">
                {filteredList.map(item => (
                  <div 
                    key={item.id} 
                    className={`shopping-item ${item.purchased ? 'purchased' : ''}`}
                  >
                    <div className="item-header">
                      <div className="item-icon">{item.icon}</div>
                      <div className="item-info">
                        <h5>{item.name}</h5>
                        <p className="item-reason">{item.reason}</p>
                      </div>
                      <div className="item-priority">
                        <span 
                          className="priority-badge"
                          style={{ backgroundColor: getPriorityColor(item.priority) }}
                        >
                          {getPriorityText(item.priority)}
                        </span>
                      </div>
                    </div>
                    
                    <div className="item-details">
                      <div className="detail-item">
                        <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong>
                        <input
                          type="number"
                          value={item.suggestedAmount}
                          onChange={(e) => updateQuantity(item.id, parseInt(e.target.value) || 1)}
                          min="1"
                          className="quantity-input"
                        />
                        <span>{item.unit}</span>
                      </div>
                      <div className="detail-item">
                        <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {item.estimatedCost}‚ÇΩ
                      </div>
                      <div className="detail-item">
                        <strong>–î–æ–±–∞–≤–ª–µ–Ω–æ:</strong> {new Date(item.addedAt).toLocaleDateString()}
                      </div>
                    </div>
                    
                    <div className="item-actions">
                      <button 
                        className={`purchase-btn ${item.purchased ? 'purchased' : ''}`}
                        onClick={() => markAsPurchased(item.id)}
                      >
                        {item.purchased ? '‚úÖ –ö—É–ø–ª–µ–Ω–æ' : 'üõí –ö—É–ø–∏—Ç—å'}
                      </button>
                      <button 
                        className="remove-btn"
                        onClick={() => removeItem(item.id)}
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChefShoppingList;

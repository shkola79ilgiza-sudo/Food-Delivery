import React, { useState, useEffect, useCallback } from "react";
import { useToast } from "../contexts/ToastContext";
import "../App.css";

const HelpGuestBidding = ({ request, onClose, isChef = false }) => {
  const { showSuccess, showError } = useToast();
  const [bids, setBids] = useState([]);
  const [newBid, setNewBid] = useState({
    price: request?.budget || 0,
    message: "",
    estimatedTime: "",
    specialOffers: "",
  });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    loadBids();
  }, [loadBids]);

  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)
    if (!isChef && bids.length === 0 && request) {
      createDemoBids();
    }
  }, [isChef, request, bids.length, createDemoBids]);

  const createDemoBids = useCallback(() => {
    const demoBids = [
      {
        id: `bid_${Date.now()}_1`,
        chefId: "demo-chef-1",
        chefName: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        chefAvatar: "üë©‚Äçüç≥",
        price: 4500,
        message:
          "–ì–æ—Ç–æ–≤–ª—é —Ä—É—Å—Å–∫—É—é –∫—É—Ö–Ω—é —É–∂–µ 10 –ª–µ—Ç. –°–¥–µ–ª–∞—é –≤–∞—à –ø—Ä–∞–∑–¥–Ω–∏–∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º!",
        estimatedTime: "3-4 —á–∞—Å–∞",
        specialOffers: "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –¥–µ—Å–µ—Ä—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫",
        createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 —á–∞—Å –Ω–∞–∑–∞–¥
        status: "pending",
      },
      {
        id: `bid_${Date.now()}_2`,
        chefId: "demo-chef-2",
        chefName: "–ú–∞—Ö–º—É–¥ –ê–ª–∏–µ–≤",
        chefAvatar: "üë®‚Äçüç≥",
        price: 4200,
        message:
          "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–π –∫—É—Ö–Ω–µ. –ü—Ä–∏–≥–æ—Ç–æ–≤–ª—é –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–ª–æ–≤ –∏ —Å–∞–º—Å—É!",
        estimatedTime: "2-3 —á–∞—Å–∞",
        specialOffers: "–°–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 5000‚ÇΩ",
        createdAt: new Date(Date.now() - 1800000).toISOString(), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        status: "pending",
      },
    ];

    setBids(demoBids);
    saveBids(demoBids);
  }, [saveBids]);

  const loadBids = useCallback(() => {
    try {
      const savedBids = JSON.parse(
        localStorage.getItem(`helpGuestBids_${request.id}`) || "[]"
      );
      setBids(savedBids);
    } catch (error) {
      console.error("Error loading bids:", error);
    }
  }, [request.id]);

  const saveBids = useCallback(
    (updatedBids) => {
      try {
        localStorage.setItem(
          `helpGuestBids_${request.id}`,
          JSON.stringify(updatedBids)
        );
      } catch (error) {
        console.error("Error saving bids:", error);
      }
    },
    [request.id]
  );

  const handleSubmitBid = () => {
    if (!newBid.price || newBid.price <= 0) {
      showError("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É");
      return;
    }

    setLoading(true);

    try {
      const bid = {
        id: `bid_${Date.now()}`,
        chefId: localStorage.getItem("chefId") || "demo-chef-1",
        chefName: localStorage.getItem("chefName") || "–ü–æ–≤–∞—Ä",
        chefAvatar: localStorage.getItem("chefAvatar") || "üë®‚Äçüç≥",
        price: parseInt(newBid.price),
        message: newBid.message,
        estimatedTime: newBid.estimatedTime,
        specialOffers: newBid.specialOffers,
        createdAt: new Date().toISOString(),
        status: "pending", // pending, accepted, rejected
      };

      const updatedBids = [...bids, bid];
      setBids(updatedBids);
      saveBids(updatedBids);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
      const clientNotification = {
        id: `notification_${Date.now()}`,
        type: "help_guest_bid",
        title: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–≤–∞—Ä–∞",
        message: `${bid.chefName} –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–≤–æ—é —Ü–µ–Ω—É: ${bid.price}‚ÇΩ`,
        requestId: request.id,
        chefId: bid.chefId,
        chefName: bid.chefName,
        price: bid.price,
        createdAt: new Date().toISOString(),
        read: false,
      };

      const clientNotifications = JSON.parse(
        localStorage.getItem("clientNotifications") || "[]"
      );
      clientNotifications.unshift(clientNotification);
      localStorage.setItem(
        "clientNotifications",
        JSON.stringify(clientNotifications)
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
      window.dispatchEvent(
        new CustomEvent("clientNotificationAdded", {
          detail: clientNotification,
        })
      );

      setNewBid({
        price: request?.budget || 0,
        message: "",
        estimatedTime: "",
        specialOffers: "",
      });

      showSuccess("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É");
    } catch (error) {
      console.error("Error submitting bid:", error);
      showError("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏");
    } finally {
      setLoading(false);
    }
  };

  const handleAcceptBid = (bidId) => {
    try {
      const updatedBids = bids.map((bid) =>
        bid.id === bidId
          ? { ...bid, status: "accepted" }
          : { ...bid, status: "rejected" }
      );

      setBids(updatedBids);
      saveBids(updatedBids);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–≤–∞—Ä–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
      const acceptedBid = updatedBids.find((bid) => bid.id === bidId);
      const chefNotification = {
        id: `notification_${Date.now()}`,
        type: "help_guest_bid_accepted",
        title: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
        message: `–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ ${acceptedBid.price}‚ÇΩ`,
        requestId: request.id,
        clientId: request.clientId,
        price: acceptedBid.price,
        createdAt: new Date().toISOString(),
        read: false,
      };

      const chefNotifications = JSON.parse(
        localStorage.getItem("chefNotifications") || "[]"
      );
      chefNotifications.unshift(chefNotification);
      localStorage.setItem(
        "chefNotifications",
        JSON.stringify(chefNotifications)
      );

      window.dispatchEvent(
        new CustomEvent("chefNotificationAdded", {
          detail: chefNotification,
        })
      );

      showSuccess("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ–≤–∞—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω");
    } catch (error) {
      console.error("Error accepting bid:", error);
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏");
    }
  };

  const handleRejectBid = (bidId) => {
    try {
      const updatedBids = bids.map((bid) =>
        bid.id === bidId ? { ...bid, status: "rejected" } : bid
      );

      setBids(updatedBids);
      saveBids(updatedBids);
      showSuccess("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
    } catch (error) {
      console.error("Error rejecting bid:", error);
      showError("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏");
    }
  };

  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className="help-guest-bidding-overlay" onClick={onClose}>
      <div
        className="help-guest-bidding-modal"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="help-guest-bidding-header">
          <h3>üí∞ –¢–æ—Ä–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É</h3>
          <button onClick={onClose} className="back-button">
            ‚úï
          </button>
        </div>

        <div className="help-guest-bidding-content">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ */}
          <div className="request-info">
            <h4>üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞</h4>
            <div className="request-details">
              <p>
                <strong>–ë—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</strong> {request.budget}‚ÇΩ
              </p>
              <p>
                <strong>–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</strong>{" "}
                {new Date(request.eventDate).toLocaleDateString("ru-RU")}
              </p>
              <p>
                <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</strong> {request.guestCount}
              </p>
              <p>
                <strong>–ê–¥—Ä–µ—Å:</strong> {request.address}
              </p>
              {request.specialRequests && (
                <p>
                  <strong>–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</strong> {request.specialRequests}
                </p>
              )}
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (–¥–ª—è –ø–æ–≤–∞—Ä–æ–≤) */}
          {isChef && (
            <div className="bid-form">
              <h4>üí° –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</h4>
              <div className="form-group">
                <label>–í–∞—à–∞ —Ü–µ–Ω–∞ (‚ÇΩ):</label>
                <input
                  type="number"
                  value={newBid.price}
                  onChange={(e) =>
                    setNewBid((prev) => ({ ...prev, price: e.target.value }))
                  }
                  min="1"
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É"
                />
              </div>

              <div className="form-group">
                <label>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
                <input
                  type="text"
                  value={newBid.estimatedTime}
                  onChange={(e) =>
                    setNewBid((prev) => ({
                      ...prev,
                      estimatedTime: e.target.value,
                    }))
                  }
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2-3 —á–∞—Å–∞"
                />
              </div>

              <div className="form-group">
                <label>–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É:</label>
                <textarea
                  value={newBid.message}
                  onChange={(e) =>
                    setNewBid((prev) => ({ ...prev, message: e.target.value }))
                  }
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ –ø–æ–¥—Ö–æ–¥–µ..."
                  rows={3}
                />
              </div>

              <div className="form-group">
                <label>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</label>
                <textarea
                  value={newBid.specialOffers}
                  onChange={(e) =>
                    setNewBid((prev) => ({
                      ...prev,
                      specialOffers: e.target.value,
                    }))
                  }
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, —Å–∫–∏–¥–∫–∏..."
                  rows={2}
                />
              </div>

              <button
                onClick={handleSubmitBid}
                className="submit-bid-btn"
                disabled={loading}
              >
                {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}
              </button>
            </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
          <div className="bids-list">
            <h4>üìä –ó–∞—è–≤–∫–∏ –ø–æ–≤–∞—Ä–æ–≤</h4>
            {bids.length === 0 ? (
              <div className="no-bids">
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–≤–∞—Ä–æ–≤</p>
              </div>
            ) : (
              <div className="bids-container">
                {bids.map((bid) => (
                  <div key={bid.id} className={`bid-card ${bid.status}`}>
                    <div className="bid-header">
                      <div className="chef-info">
                        <span className="chef-avatar">{bid.chefAvatar}</span>
                        <div>
                          <h5>{bid.chefName}</h5>
                          <p className="bid-time">
                            {formatTime(bid.createdAt)}
                          </p>
                        </div>
                      </div>
                      <div className="bid-price">
                        <span className="price">{bid.price}‚ÇΩ</span>
                        <span className={`status ${bid.status}`}>
                          {bid.status === "pending" && "‚è≥ –û–∂–∏–¥–∞–µ—Ç"}
                          {bid.status === "accepted" && "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞"}
                          {bid.status === "rejected" && "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"}
                        </span>
                      </div>
                    </div>

                    <div className="bid-details">
                      {bid.estimatedTime && (
                        <p>
                          <strong>–í—Ä–µ–º—è:</strong> {bid.estimatedTime}
                        </p>
                      )}
                      {bid.message && (
                        <p>
                          <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {bid.message}
                        </p>
                      )}
                      {bid.specialOffers && (
                        <p>
                          <strong>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</strong> {bid.specialOffers}
                        </p>
                      )}
                    </div>

                    {!isChef && bid.status === "pending" && (
                      <div className="bid-actions">
                        <button
                          onClick={() => handleAcceptBid(bid.id)}
                          className="accept-btn"
                        >
                          ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                        </button>
                        <button
                          onClick={() => handleRejectBid(bid.id)}
                          className="reject-btn"
                        >
                          ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                        </button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default HelpGuestBidding;

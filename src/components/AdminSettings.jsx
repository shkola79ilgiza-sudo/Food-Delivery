import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AdminSettings = () => {
  const [settings, setSettings] = useState({
    commissionRate: 10,
    minOrderAmount: 500,
    maxOrderAmount: 10000,
    deliveryRadius: 10,
    workingHours: {
      start: '09:00',
      end: '22:00'
    },
    notifications: {
      email: true,
      sms: false,
      push: true
    },
    system: {
      maintenanceMode: false,
      autoApproveChefs: false,
      requirePhotoVerification: true
    }
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('authToken');
    const role = localStorage.getItem('role');
    
    if (!token || role !== 'admin') {
      navigate('/admin/login');
      return;
    }

    loadSettings();
  }, [navigate]);

  const loadSettings = () => {
    setLoading(true);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    const savedSettings = localStorage.getItem('adminSettings');
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
    
    setLoading(false);
  };

  const saveSettings = async () => {
    setSaving(true);
    setMessage('');
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (settings.commissionRate < 0 || settings.commissionRate > 50) {
        setMessage('–ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 50%');
        return;
      }
      
      if (settings.minOrderAmount < 0) {
        setMessage('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π');
        return;
      }
      
      if (settings.maxOrderAmount <= settings.minOrderAmount) {
        setMessage('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π');
        return;
      }
      
      if (settings.deliveryRadius < 1 || settings.deliveryRadius > 50) {
        setMessage('–†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 –∫–º');
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      localStorage.setItem('adminSettings', JSON.stringify(settings));
      
      setMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      setTimeout(() => setMessage(''), 3000);
      
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setSaving(false);
    }
  };

  const handleInputChange = (section, field, value) => {
    setSettings(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleNestedInputChange = (section, subsection, field, value) => {
    setSettings(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [subsection]: {
          ...prev[section][subsection],
          [field]: value
        }
      }
    }));
  };

  const resetToDefaults = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
      setSettings({
        commissionRate: 10,
        minOrderAmount: 500,
        maxOrderAmount: 10000,
        deliveryRadius: 10,
        workingHours: {
          start: '09:00',
          end: '22:00'
        },
        notifications: {
          email: true,
          sms: false,
          push: true
        },
        system: {
          maintenanceMode: false,
          autoApproveChefs: false,
          requirePhotoVerification: true
        }
      });
    }
  };

  if (loading) {
    return (
      <div className="admin-settings">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</div>
      </div>
    );
  }

  return (
    <div className="admin-settings">
      <div className="page-header">
        <h1>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h1>
        <div className="header-actions">
          <button onClick={resetToDefaults} className="reset-button">
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
          </button>
          <button 
            onClick={saveSettings} 
            className="save-button"
            disabled={saving}
          >
            {saving ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
        </div>
      </div>

      {message && (
        <div className={`message ${message.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
          {message}
        </div>
      )}

      <div className="settings-content">
        {/* –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="settings-section">
          <h2>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <div className="settings-grid">
            <div className="setting-item">
              <label htmlFor="commissionRate">
                –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (%)
              </label>
              <input
                id="commissionRate"
                type="number"
                min="0"
                max="50"
                step="0.1"
                value={settings.commissionRate}
                onChange={(e) => handleInputChange('commissionRate', 'commissionRate', parseFloat(e.target.value) || 0)}
              />
              <small>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</small>
            </div>

            <div className="setting-item">
              <label htmlFor="minOrderAmount">
                –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (‚ÇΩ)
              </label>
              <input
                id="minOrderAmount"
                type="number"
                min="0"
                step="50"
                value={settings.minOrderAmount}
                onChange={(e) => handleInputChange('minOrderAmount', 'minOrderAmount', parseInt(e.target.value) || 0)}
              />
            </div>

            <div className="setting-item">
              <label htmlFor="maxOrderAmount">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (‚ÇΩ)
              </label>
              <input
                id="maxOrderAmount"
                type="number"
                min="0"
                step="100"
                value={settings.maxOrderAmount}
                onChange={(e) => handleInputChange('maxOrderAmount', 'maxOrderAmount', parseInt(e.target.value) || 0)}
              />
            </div>
          </div>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
        <div className="settings-section">
          <h2>üöö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
          <div className="settings-grid">
            <div className="setting-item">
              <label htmlFor="deliveryRadius">
                –†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–º)
              </label>
              <input
                id="deliveryRadius"
                type="number"
                min="1"
                max="50"
                value={settings.deliveryRadius}
                onChange={(e) => handleInputChange('deliveryRadius', 'deliveryRadius', parseInt(e.target.value) || 1)}
              />
            </div>

            <div className="setting-item">
              <label htmlFor="workingHoursStart">
                –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
              </label>
              <input
                id="workingHoursStart"
                type="time"
                value={settings.workingHours.start}
                onChange={(e) => handleNestedInputChange('workingHours', 'workingHours', 'start', e.target.value)}
              />
            </div>

            <div className="setting-item">
              <label htmlFor="workingHoursEnd">
                –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã
              </label>
              <input
                id="workingHoursEnd"
                type="time"
                value={settings.workingHours.end}
                onChange={(e) => handleNestedInputChange('workingHours', 'workingHours', 'end', e.target.value)}
              />
            </div>
          </div>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <div className="settings-section">
          <h2>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
          <div className="settings-grid">
            <div className="setting-item checkbox">
              <label>
                <input
                  type="checkbox"
                  checked={settings.notifications.email}
                  onChange={(e) => handleNestedInputChange('notifications', 'notifications', 'email', e.target.checked)}
                />
                Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </label>
            </div>

            <div className="setting-item checkbox">
              <label>
                <input
                  type="checkbox"
                  checked={settings.notifications.sms}
                  onChange={(e) => handleNestedInputChange('notifications', 'notifications', 'sms', e.target.checked)}
                />
                SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </label>
            </div>

            <div className="setting-item checkbox">
              <label>
                <input
                  type="checkbox"
                  checked={settings.notifications.push}
                  onChange={(e) => handleNestedInputChange('notifications', 'notifications', 'push', e.target.checked)}
                />
                Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </label>
            </div>
          </div>
        </div>

        {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="settings-section">
          <h2>üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <div className="settings-grid">
            <div className="setting-item checkbox">
              <label>
                <input
                  type="checkbox"
                  checked={settings.system.maintenanceMode}
                  onChange={(e) => handleNestedInputChange('system', 'system', 'maintenanceMode', e.target.checked)}
                />
                –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
              </label>
              <small>–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–∞–π—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</small>
            </div>

            <div className="setting-item checkbox">
              <label>
                <input
                  type="checkbox"
                  checked={settings.system.autoApproveChefs}
                  onChange={(e) => handleNestedInputChange('system', 'system', 'autoApproveChefs', e.target.checked)}
                />
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–≤–∞—Ä–æ–≤
              </label>
              <small>–ü–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</small>
            </div>

            <div className="setting-item checkbox">
              <label>
                <input
                  type="checkbox"
                  checked={settings.system.requirePhotoVerification}
                  onChange={(e) => handleNestedInputChange('system', 'system', 'requirePhotoVerification', e.target.checked)}
                />
                –¢—Ä–µ–±–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ–æ—Ç–æ
              </label>
              <small>–ü–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</small>
            </div>
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="settings-section">
          <h2>üóëÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="danger-actions">
            <button 
              onClick={() => {
                if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
                  localStorage.clear();
                  window.location.reload();
                }
              }}
              className="danger-button"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            </button>
            
            <button 
              onClick={() => {
                if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
                  const data = {
                    users: JSON.parse(localStorage.getItem('allUsers') || '[]'),
                    orders: JSON.parse(localStorage.getItem('clientOrders') || '[]'),
                    settings: settings
                  };
                  
                  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `admin-export-${new Date().toISOString().split('T')[0]}.json`;
                  a.click();
                  URL.revokeObjectURL(url);
                }
              }}
              className="export-button"
            >
              üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminSettings;

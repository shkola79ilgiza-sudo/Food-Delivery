import React, { useState, useEffect } from 'react';
import { useToast } from '../contexts/ToastContext';
import '../App.css';

const ChefSelection = ({ onChefSelect, onClose }) => {
  const { showSuccess, showError } = useToast();
  const [chefs, setChefs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedChef, setSelectedChef] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filter, setFilter] = useState('all'); // all, available, busy, offline

  useEffect(() => {
    loadChefs();
  }, []);

  const loadChefs = () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤–∞—Ä–æ–≤ –∏–∑ localStorage
      const savedChefs = JSON.parse(localStorage.getItem('registeredChefs') || '[]');
      
      // –ï—Å–ª–∏ –ø–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–≤–∞—Ä–æ–≤
      if (savedChefs.length === 0) {
        const demoChefs = [
          {
            id: 'chef-1',
            name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            email: 'anna@chef.com',
            phone: '+7 (999) 123-45-67',
            specialties: ['–†—É—Å—Å–∫–∞—è –∫—É—Ö–Ω—è', '–í—ã–ø–µ—á–∫–∞', '–î–µ—Å–µ—Ä—Ç—ã'],
            rating: 4.8,
            reviews: 127,
            experience: '5 –ª–µ—Ç',
            location: '–ú–æ—Å–∫–≤–∞, —Ü–µ–Ω—Ç—Ä',
            status: 'available', // available, busy, offline
            avatar: 'üë©‚Äçüç≥',
            description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–µ –∏ –¥–æ–º–∞—à–Ω–µ–π –≤—ã–ø–µ—á–∫–µ',
            priceRange: '$$',
            deliveryTime: '30-45 –º–∏–Ω',
            cuisines: ['–†—É—Å—Å–∫–∞—è', '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è', '–î–µ—Å–µ—Ä—Ç—ã'],
            dishes: ['–ë–æ—Ä—â', '–ü–µ–ª—å–º–µ–Ω–∏', '–ë–ª–∏–Ω—ã', '–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω'],
            workingHours: '9:00 - 22:00',
            lastActive: new Date().toISOString()
          },
          {
            id: 'chef-2',
            name: '–ú–∞—Ö–º—É–¥ –ê–ª–∏–µ–≤',
            email: 'mahmud@chef.com',
            phone: '+7 (999) 234-56-78',
            specialties: ['–£–∑–±–µ–∫—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ü–ª–æ–≤', '–®–∞—à–ª—ã–∫'],
            rating: 4.9,
            reviews: 89,
            experience: '8 –ª–µ—Ç',
            location: '–ú–æ—Å–∫–≤–∞, —é–≥',
            status: 'available',
            avatar: 'üë®‚Äçüç≥',
            description: '–ú–∞—Å—Ç–µ—Ä —É–∑–±–µ–∫—Å–∫–æ–π –∫—É—Ö–Ω–∏, –≥–æ—Ç–æ–≤–ª—é –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π –ø–ª–æ–≤ –∏ —à–∞—à–ª—ã–∫',
            priceRange: '$$$',
            deliveryTime: '45-60 –º–∏–Ω',
            cuisines: ['–£–∑–±–µ–∫—Å–∫–∞—è', '–°—Ä–µ–¥–Ω–µ–∞–∑–∏–∞—Ç—Å–∫–∞—è', '–ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞'],
            dishes: ['–ü–ª–æ–≤', '–®–∞—à–ª—ã–∫', '–ú–∞–Ω—Ç—ã', '–°–∞–º—Å–∞'],
            workingHours: '10:00 - 23:00',
            lastActive: new Date().toISOString()
          },
          {
            id: 'chef-3',
            name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            email: 'maria@chef.com',
            phone: '+7 (999) 345-67-89',
            specialties: ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ü–∞—Å—Ç–∞', '–ü–∏—Ü—Ü–∞'],
            rating: 4.7,
            reviews: 156,
            experience: '6 –ª–µ—Ç',
            location: '–ú–æ—Å–∫–≤–∞, –∑–∞–ø–∞–¥',
            status: 'busy',
            avatar: 'üë©‚Äçüç≥',
            description: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –ª—é–±–æ–≤—å—é, —Å–≤–µ–∂–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã',
            priceRange: '$$',
            deliveryTime: '25-40 –º–∏–Ω',
            cuisines: ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', '–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è'],
            dishes: ['–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞', '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–†–∏–∑–æ—Ç—Ç–æ', '–¢–∏—Ä–∞–º–∏—Å—É'],
            workingHours: '11:00 - 24:00',
            lastActive: new Date(Date.now() - 10 * 60 * 1000).toISOString() // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          },
          {
            id: 'chef-4',
            name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
            email: 'dmitry@chef.com',
            phone: '+7 (999) 456-78-90',
            specialties: ['–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–°—É—à–∏', '–†–æ–ª–ª—ã'],
            rating: 4.6,
            reviews: 203,
            experience: '4 –≥–æ–¥–∞',
            location: '–ú–æ—Å–∫–≤–∞, –≤–æ—Å—Ç–æ–∫',
            status: 'offline',
            avatar: 'üë®‚Äçüç≥',
            description: '–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, —Å–≤–µ–∂–∏–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
            priceRange: '$$$$',
            deliveryTime: '40-55 –º–∏–Ω',
            cuisines: ['–Ø–ø–æ–Ω—Å–∫–∞—è', '–ê–∑–∏–∞—Ç—Å–∫–∞—è'],
            dishes: ['–°—É—à–∏', '–†–æ–ª–ª—ã', '–°–∞—à–∏–º–∏', '–†–∞–º–µ–Ω'],
            workingHours: '12:00 - 02:00',
            lastActive: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString() // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          }
        ];
        
        localStorage.setItem('registeredChefs', JSON.stringify(demoChefs));
        setChefs(demoChefs);
      } else {
        setChefs(savedChefs);
      }
    } catch (error) {
      console.error('Error loading chefs:', error);
      showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤–∞—Ä–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const filteredChefs = chefs.filter(chef => {
    const matchesSearch = chef.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         chef.specialties.some(s => s.toLowerCase().includes(searchTerm.toLowerCase())) ||
                         chef.cuisines.some(c => c.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesFilter = filter === 'all' || chef.status === filter;
    
    return matchesSearch && matchesFilter;
  });

  const getStatusColor = (status) => {
    switch (status) {
      case 'available': return '#28a745';
      case 'busy': return '#ffc107';
      case 'offline': return '#6c757d';
      default: return '#6c757d';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'available': return '–î–æ—Å—Ç—É–ø–µ–Ω';
      case 'busy': return '–ó–∞–Ω—è—Ç';
      case 'offline': return '–û—Ñ–ª–∞–π–Ω';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getPriceRangeText = (priceRange) => {
    switch (priceRange) {
      case '$': return '–ë—é–¥–∂–µ—Ç–Ω–æ';
      case '$$': return '–°—Ä–µ–¥–Ω–µ';
      case '$$$': return '–î–æ—Ä–æ–≥–æ';
      case '$$$$': return '–ü—Ä–µ–º–∏—É–º';
      default: return '–°—Ä–µ–¥–Ω–µ';
    }
  };

  const handleChefSelect = (chef) => {
    setSelectedChef(chef);
    if (onChefSelect) {
      onChefSelect(chef);
    }
    showSuccess(`–í—ã–±—Ä–∞–Ω –ø–æ–≤–∞—Ä: ${chef.name}`);
  };

  if (loading) {
    return (
      <div className="chef-selection-overlay">
        <div className="chef-selection-modal">
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤–∞—Ä–æ–≤...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="chef-selection-overlay" onClick={onClose}>
      <div className="chef-selection-modal" onClick={(e) => e.stopPropagation()}>
        <div className="chef-selection-header">
          <h3>üë®‚Äçüç≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–∞—Ä–∞</h3>
          <button onClick={onClose} className="back-button">‚úï</button>
        </div>

        <div className="chef-selection-content">
          {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="chef-selection-filters">
            <div className="search-box">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫—É—Ö–Ω–µ..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>
            
            <div className="filter-buttons">
              <button 
                className={filter === 'all' ? 'active' : ''}
                onClick={() => setFilter('all')}
              >
                –í—Å–µ ({chefs.length})
              </button>
              <button 
                className={filter === 'available' ? 'active' : ''}
                onClick={() => setFilter('available')}
              >
                –î–æ—Å—Ç—É–ø–Ω—ã ({chefs.filter(c => c.status === 'available').length})
              </button>
              <button 
                className={filter === 'busy' ? 'active' : ''}
                onClick={() => setFilter('busy')}
              >
                –ó–∞–Ω—è—Ç—ã ({chefs.filter(c => c.status === 'busy').length})
              </button>
              <button 
                className={filter === 'offline' ? 'active' : ''}
                onClick={() => setFilter('offline')}
              >
                –û—Ñ–ª–∞–π–Ω ({chefs.filter(c => c.status === 'offline').length})
              </button>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –ø–æ–≤–∞—Ä–æ–≤ */}
          <div className="chefs-list">
            {filteredChefs.length === 0 ? (
              <div className="empty-state">
                <p>–ü–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              </div>
            ) : (
              filteredChefs.map(chef => (
                <div key={chef.id} className="chef-card">
                  <div className="chef-card-header">
                    <div className="chef-avatar">{chef.avatar}</div>
                    <div className="chef-info">
                      <h4>{chef.name}</h4>
                      <p className="chef-location">{chef.location}</p>
                    </div>
                    <div className="chef-status">
                      <span 
                        className="status-badge"
                        style={{ backgroundColor: getStatusColor(chef.status) }}
                      >
                        {getStatusText(chef.status)}
                      </span>
                    </div>
                  </div>

                  <div className="chef-card-body">
                    <p className="chef-description">{chef.description}</p>
                    
                    <div className="chef-specialties">
                      <strong>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong>
                      <div className="specialties-tags">
                        {chef.specialties.map((specialty, index) => (
                          <span key={index} className="specialty-tag">{specialty}</span>
                        ))}
                      </div>
                    </div>

                    <div className="chef-details">
                      <div className="detail-row">
                        <span>‚≠ê –†–µ–π—Ç–∏–Ω–≥: {chef.rating} ({chef.reviews} –æ—Ç–∑—ã–≤–æ–≤)</span>
                        <span>üí∞ {getPriceRangeText(chef.priceRange)}</span>
                      </div>
                      <div className="detail-row">
                        <span>‚è±Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞: {chef.deliveryTime}</span>
                        <span>üïí –†–∞–±–æ—Ç–∞–µ—Ç: {chef.workingHours}</span>
                      </div>
                    </div>

                    <div className="chef-dishes">
                      <strong>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞:</strong>
                      <div className="dishes-tags">
                        {chef.dishes.slice(0, 4).map((dish, index) => (
                          <span key={index} className="dish-tag">{dish}</span>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="chef-card-actions">
                    <button 
                      className="select-chef-btn"
                      onClick={() => handleChefSelect(chef)}
                      disabled={chef.status === 'offline'}
                    >
                      {chef.status === 'offline' ? '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : '–í—ã–±—Ä–∞—Ç—å –ø–æ–≤–∞—Ä–∞'}
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChefSelection;

import React, { useState, useEffect, useCallback } from 'react';
import { useToast } from '../contexts/ToastContext';
import { updateOrderStatus } from '../api';
import '../App.css';

function ChefOrderDetails({ orderId, onClose, onStatusUpdate }) {
  const { showSuccess, showError } = useToast();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  const markNotificationAsRead = useCallback((orderId) => {
    try {
      const notifications = JSON.parse(localStorage.getItem('chefNotifications') || '[]');
      const updatedNotifications = notifications.map(notification => {
        if (notification.orderId === orderId && !notification.read) {
          return { ...notification, read: true };
        }
        return notification;
      });
      localStorage.setItem('chefNotifications', JSON.stringify(updatedNotifications));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      window.dispatchEvent(new CustomEvent('chefNotificationsUpdated'));
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  }, []);

  const loadOrderDetails = useCallback(async () => {
    try {
      setLoading(true);
      
      // –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ localStorage
      const clientOrders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      const foundOrder = clientOrders.find(o => o.id === orderId);
      
      if (foundOrder) {
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑:', foundOrder);
        console.log('–°—É–º–º—ã –∑–∞–∫–∞–∑–∞:', {
          itemsTotal: foundOrder.itemsTotal,
          subtotal: foundOrder.subtotal,
          deliveryFee: foundOrder.deliveryFee,
          deliveryCost: foundOrder.deliveryCost,
          total: foundOrder.total,
          transaction: foundOrder.transaction,
          payment: foundOrder.payment
        });
        console.log('–ö–ª–∏–µ–Ω—Ç:', foundOrder.customer);
        console.log('–î–æ—Å—Ç–∞–≤–∫–∞:', foundOrder.delivery);
        console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', foundOrder.comment);
        console.log('–ü—Ä–æ–º–æ–∫–æ–¥:', foundOrder.promo);
        console.log('–°–∫–∏–¥–∫–∞:', foundOrder.discount);
        console.log('–°—Ç–∞—Ç—É—Å:', foundOrder.status);
        console.log('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', foundOrder.createdAt);
        setOrder(foundOrder);
        
        // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–∞–∑–∞
        markNotificationAsRead(orderId);
      } else {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderId);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', clientOrders.map(o => o.id));
        showError(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        onClose();
      }
    } catch (error) {
      console.error('Error loading order details:', error);
      showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
      onClose();
    } finally {
      setLoading(false);
    }
  }, [orderId, showError, markNotificationAsRead, onClose]);

  useEffect(() => {
    loadOrderDetails();
  }, [loadOrderDetails]);

  const handleStatusUpdate = async (newStatus) => {
    try {
      setUpdating(true);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api.js –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      await updateOrderStatus(orderId, newStatus, order?.items?.[0]?.chefId || 'unknown');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setOrder(prev => ({ ...prev, status: newStatus }));
      
      showSuccess(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${getStatusText(newStatus)}`);
      
      if (onStatusUpdate) {
        onStatusUpdate(orderId, newStatus);
      }
    } catch (error) {
      console.error('Error updating order status:', error);
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
      setUpdating(false);
    }
  };


  const getStatusText = (status) => {
    const statusMap = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'pending_confirmation': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'pending_payment': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      'ready': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
      'delivering': '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
  };

  const getStatusColor = (status) => {
    const colorMap = {
      'pending': '#ff9800',
      'pending_confirmation': '#ff9800',
      'pending_payment': '#ff5722',
      'confirmed': '#2196f3',
      'preparing': '#ff5722',
      'ready': '#4caf50',
      'delivering': '#9c27b0',
      'delivered': '#8bc34a',
      'cancelled': '#f44336'
    };
    return colorMap[status] || '#666';
  };

  const formatTime = (timeString) => {
    try {
      const date = new Date(timeString);
      return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
  };

  const formatDeliveryDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        weekday: 'long'
      });
    } catch {
      return dateString;
    }
  };

  const getDeliveryUrgency = (deliveryDate, deliveryTime) => {
    if (!deliveryDate || !deliveryTime) return null;
    
    try {
      const now = new Date();
      const delivery = new Date(`${deliveryDate} ${deliveryTime}`);
      const diffHours = (delivery - now) / (1000 * 60 * 60);
      
      if (diffHours < 1) {
        return <span className="urgency-urgent">üî• –°–†–û–ß–ù–û! –ú–µ–Ω–µ–µ —á–∞—Å–∞ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏</span>;
      } else if (diffHours < 3) {
        return <span className="urgency-high">‚ö†Ô∏è –°—Ä–æ—á–Ω–æ! –ú–µ–Ω–µ–µ 3 —á–∞—Å–æ–≤ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏</span>;
      } else if (diffHours < 24) {
        return <span className="urgency-medium">‚è∞ –°–µ–≥–æ–¥–Ω—è –¥–æ {deliveryTime}</span>;
      } else {
        return <span className="urgency-low">üìÖ {formatDeliveryDate(deliveryDate)} –≤ {deliveryTime}</span>;
      }
    } catch {
      return <span className="urgency-unknown">‚ùì –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>;
    }
  };

  // AI-–ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º
  const getAITimerHint = (deliveryDate, deliveryTime) => {
    if (!deliveryDate || !deliveryTime) return null;
    
    try {
      const now = new Date();
      const delivery = new Date(`${deliveryDate} ${deliveryTime}`);
      const diffMinutes = Math.round((delivery - now) / (1000 * 60));
      
      if (diffMinutes > 0 && diffMinutes < 60) {
        return (
          <div className="ai-timer-hint">
            <div className="ai-icon">ü§ñ</div>
            <div className="ai-message">
              <strong>AI-–ø–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {diffMinutes} –º–∏–Ω. –Ω–∞ –∑–∞–∫–∞–∑ #{order.id}
            </div>
          </div>
        );
      }
    } catch {
      return null;
    }
    return null;
  };

  const getPaymentMethodText = (method) => {
    const methods = {
      'card': 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      'cash': 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
      'online': 'üåê –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞',
      'apple_pay': 'üçé Apple Pay',
      'google_pay': 'ü§ñ Google Pay'
    };
    return methods[method] || method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const getPaymentStatus = (status) => {
    const statuses = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
      'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ',
      'failed': '‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
      'refunded': '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç'
    };
    return statuses[status] || status || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const getDeliveryReadinessStatus = (orderStatus) => {
    const statuses = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'confirmed': 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      'preparing': 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      'ready': '‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
      'delivering': 'üöö –í –ø—É—Ç–∏',
      'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[orderStatus] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  if (loading) {
    return (
      <div className="chef-order-details-modal-overlay">
        <div className="chef-order-details-modal">
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞...</p>
            <p style={{ fontSize: '14px', color: '#666', marginTop: '10px' }}>
              ID –∑–∞–∫–∞–∑–∞: {orderId}
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="chef-order-details-modal-overlay">
        <div className="chef-order-details-modal">
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <p>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            <p style={{ fontSize: '14px', color: '#666', marginTop: '10px' }}>
              ID –∑–∞–∫–∞–∑–∞: {orderId}
            </p>
            <p style={{ fontSize: '12px', color: '#999', marginTop: '5px' }}>
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            </p>
            <button onClick={onClose} className="back-button">
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="chef-order-details-modal-overlay" onClick={onClose}>
      <div className="chef-order-details-modal" onClick={(e) => e.stopPropagation()}>
        <div className="chef-order-details-header">
          <h3>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}</h3>
          <button onClick={onClose} className="back-button">
            ‚úï
          </button>
        </div>

        <div className="chef-order-details-content">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
          <div className="order-section">
            <h4>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h4>
            <div className="order-info-grid">
              <div className="info-item">
                <strong>–ò–º—è:</strong> {order.customer?.name || order.clientName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
              <div className="info-item">
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.customer?.phone || order.clientPhone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
              <div className="info-item">
                <strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {order.delivery?.address || order.deliveryAddress || (order.delivery?.type === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
              </div>
              <div className="info-item">
                <strong>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</strong> {formatTime(order.createdAt)}
              </div>
            </div>
          </div>

          {/* –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ */}
          <div className="order-section">
            <h4>‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</h4>
            <div className="delivery-time-info">
              <div className="delivery-time-main">
                <div className="delivery-date">
                  <strong>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {formatDeliveryDate(order.delivery?.date)}
                </div>
                <div className="delivery-time">
                  <strong>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {order.delivery?.time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </div>
                <div className="delivery-type">
                  <strong>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {order.delivery?.type === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'}
                </div>
              </div>
              <div className="delivery-urgency">
                {getDeliveryUrgency(order.delivery?.date, order.delivery?.time)}
              </div>
              {/* AI-–ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º */}
              {getAITimerHint(order.delivery?.date, order.delivery?.time)}
            </div>
          </div>

          {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
          <div className="order-section">
            <h4>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h4>
            <div className="payment-info">
              <div className="payment-method">
                <strong>–°–ø–æ—Å–æ–±:</strong> {getPaymentMethodText(order.payment?.method)}
              </div>
              <div className="payment-status">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {getPaymentStatus(order.payment?.status)}
              </div>
            </div>
          </div>

          {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          {(order.comment || order.specialInstructions) && (
            <div className="order-section">
              <h4>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h4>
              <div className="comments-info">
                {order.comment && (
                  <div className="comment-item">
                    <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</strong>
                    <p>{order.comment}</p>
                  </div>
                )}
                {order.specialInstructions && (
                  <div className="comment-item">
                    <strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</strong>
                    <p>{order.specialInstructions}</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
          {order.comment && (
            <div className="order-section">
              <h4>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</h4>
              <div className="order-comment">
                <p>{order.comment}</p>
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ */}
          <div className="order-section">
            <h4>üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞</h4>
            <div className="delivery-info">
              <div className="delivery-code">
                <strong>–ö–æ–¥ –∑–∞–∫–∞–∑–∞:</strong> #{order.id}
              </div>
              <div className="delivery-address">
                <strong>–ê–¥—Ä–µ—Å:</strong> {order.delivery?.address || order.deliveryAddress || (order.delivery?.type === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
              </div>
              <div className="delivery-contact">
                <strong>–ö–æ–Ω—Ç–∞–∫—Ç:</strong> {order.customer?.name || order.clientName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} - {order.customer?.phone || order.clientPhone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
              <div className="delivery-status">
                <strong>–°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</strong> {getDeliveryReadinessStatus(order.status)}
              </div>
            </div>
          </div>

          {/* –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ */}
          <div className="order-section">
            <h4>üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</h4>
            <div 
              className="order-status"
              style={{ 
                backgroundColor: getStatusColor(order.status),
                color: 'white',
                padding: '8px 16px',
                borderRadius: '20px',
                display: 'inline-block',
                fontWeight: 'bold'
              }}
            >
              {getStatusText(order.status)}
            </div>
          </div>

          {/* –ë–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ */}
          <div className="order-section">
            <h4>üçΩÔ∏è –ë–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ</h4>
            <div className="order-items">
              {order.items && order.items.length > 0 ? (
                order.items.map((item, index) => (
                  <div key={index} className="order-item">
                    <div className="item-info">
                      <div className="item-name">{item.name}</div>
                      <div className="item-description">{item.description}</div>
                    </div>
                    <div className="item-details">
                      <div className="item-quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</div>
                      <div className="item-price">{item.price}‚ÇΩ –∑–∞ —à—Ç.</div>
                      <div className="item-total">–ò—Ç–æ–≥–æ: {item.price * item.quantity}‚ÇΩ</div>
                    </div>
                  </div>
                ))
              ) : (
                <p>–ù–µ—Ç –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–µ</p>
              )}
            </div>
          </div>

          {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ */}
          <div className="order-section">
            <h4>üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞</h4>
            <div className="order-total">
              <div className="total-line">
                <span>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª—é–¥:</span>
                <span>{order.itemsTotal || order.subtotal || (order.items ? order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0) : 0)}‚ÇΩ</span>
              </div>
              <div className="total-line">
                <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                <span>{order.deliveryFee || order.deliveryCost || 0}‚ÇΩ</span>
              </div>
              {(order.discount || 0) > 0 && (
                <div className="total-line discount">
                  <span>–°–∫–∏–¥–∫–∞:</span>
                  <span>-{order.discount}‚ÇΩ</span>
                </div>
              )}
              {order.promo && (
                <div className="total-line promo">
                  <span>–ü—Ä–æ–º–æ–∫–æ–¥:</span>
                  <span>{order.promo}</span>
                </div>
              )}
              <div className="total-line final">
                <span><strong>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</strong></span>
                <span><strong>{order.total || order.payment?.total || 0}‚ÇΩ</strong></span>
              </div>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
          <div className="order-section">
            <h4>üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h4>
            <div className="transaction-info">
              <div className="transaction-item">
                <strong>–û–±—â–∞—è —Å—É–º–º–∞:</strong> {order.transaction?.totalAmount || order.payment?.total || order.total || 0}‚ÇΩ
              </div>
              <div className="transaction-item">
                <strong>–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (10%):</strong> {order.transaction?.commission || order.payment?.commission || Math.round((order.total || 0) * 0.1)}‚ÇΩ
              </div>
              <div className="transaction-item">
                <strong>–ö –ø–æ–ª—É—á–µ–Ω–∏—é –ø–æ–≤–∞—Ä–æ–º:</strong> {order.transaction?.chefAmount || order.payment?.chefAmount || Math.round((order.total || 0) * 0.9)}‚ÇΩ
              </div>
              <div className="transaction-item">
                <strong>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</strong> {order.transaction?.status === 'reserved' ? '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ' : order.transaction?.status || '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'}
              </div>
              <div className="transaction-item">
                <strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> {order.payment?.method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è –ø–æ–≤–∞—Ä–∞ */}
          <div className="order-section">
            <h4>‚ö° –î–µ–π—Å—Ç–≤–∏—è</h4>
            <div className="chef-actions">
              {(order.status === 'pending' || order.status === 'pending_confirmation' || order.status === 'pending_payment') && (
                <>
                  <button 
                    onClick={() => handleStatusUpdate('confirmed')}
                    disabled={updating}
                    className="action-btn confirm-btn"
                  >
                    ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
                  </button>
                  <button 
                    onClick={() => handleStatusUpdate('cancelled')}
                    disabled={updating}
                    className="action-btn cancel-btn"
                  >
                    ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                  </button>
                </>
              )}
              
              {order.status === 'confirmed' && (
                <button 
                  onClick={() => handleStatusUpdate('preparing')}
                  disabled={updating}
                  className="action-btn preparing-btn"
                >
                  üë®‚Äçüç≥ –ù–∞—á–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
                </button>
              )}
              
              {order.status === 'preparing' && (
                <button 
                  onClick={() => handleStatusUpdate('ready')}
                  disabled={updating}
                  className="action-btn ready-btn"
                >
                  ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ
                </button>
              )}
              
              {order.status === 'ready' && (
                <button 
                  onClick={() => handleStatusUpdate('delivering')}
                  disabled={updating}
                  className="action-btn delivering-btn"
                >
                  üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
                </button>
              )}
              
              {order.status === 'delivering' && (
                <button 
                  onClick={() => handleStatusUpdate('delivered')}
                  disabled={updating}
                  className="action-btn delivered-btn"
                >
                  ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ChefOrderDetails;

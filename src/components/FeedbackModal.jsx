import React, { useState } from 'react';
import { useToast } from '../contexts/ToastContext';

const FeedbackModal = ({ orderId, onClose, onSubmit }) => {
  const [rating, setRating] = useState(0);
  const [review, setReview] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const { showSuccess, showError } = useToast();

  const handleSubmit = async () => {
    if (rating === 0) {
      showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É');
      return;
    }

    if (review.trim().length < 10) {
      showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
      return;
    }

    setSubmitting(true);

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ localStorage
      const feedback = {
        id: `feedback-${Date.now()}`,
        orderId,
        rating,
        review: review.trim(),
        date: new Date().toISOString(),
        clientId: localStorage.getItem('clientId') || 'demo_client'
      };

      const existingFeedback = JSON.parse(localStorage.getItem('orderFeedback') || '[]');
      existingFeedback.push(feedback);
      localStorage.setItem('orderFeedback', JSON.stringify(existingFeedback));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–≤–∞—Ä–∞
      updateChefRating(orderId, rating);

      showSuccess('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!');
      
      if (onSubmit) {
        onSubmit(feedback);
      }
      
      onClose();
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
      console.error('Feedback error:', error);
    } finally {
      setSubmitting(false);
    }
  };

  const updateChefRating = (orderId, newRating) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      const order = orders.find(o => o.id === orderId);
      
      if (order && order.items && order.items.length > 0) {
        const chefId = order.items[0].chefId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–≤–∞—Ä–∞
        const chefRatings = JSON.parse(localStorage.getItem('chefRatings') || '{}');
        if (!chefRatings[chefId]) {
          chefRatings[chefId] = { total: 0, count: 0, average: 0 };
        }
        
        chefRatings[chefId].total += newRating;
        chefRatings[chefId].count += 1;
        chefRatings[chefId].average = chefRatings[chefId].total / chefRatings[chefId].count;
        
        localStorage.setItem('chefRatings', JSON.stringify(chefRatings));
      }
    } catch (error) {
      console.error('Error updating chef rating:', error);
    }
  };

  const StarRating = ({ rating, onRatingChange }) => {
    return (
      <div className="star-rating">
        {[1, 2, 3, 4, 5].map((star) => (
          <button
            key={star}
            type="button"
            className={`star ${star <= rating ? 'filled' : ''}`}
            onClick={() => onRatingChange(star)}
            onMouseEnter={() => onRatingChange(star)}
          >
            ‚≠ê
          </button>
        ))}
      </div>
    );
  };

  return (
    <div className="feedback-modal-overlay">
      <div className="feedback-modal">
        <div className="feedback-header">
          <h2>üçΩÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑</h2>
          <button onClick={onClose} className="close-btn">‚úï</button>
        </div>

        <div className="feedback-content">
          <div className="rating-section">
            <h3>–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ?</h3>
            <StarRating 
              rating={rating} 
              onRatingChange={setRating}
            />
            <div className="rating-text">
              {rating === 0 && '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É'}
              {rating === 1 && 'üòû –û—á–µ–Ω—å –ø–ª–æ—Ö–æ'}
              {rating === 2 && 'üòï –ü–ª–æ—Ö–æ'}
              {rating === 3 && 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ'}
              {rating === 4 && 'üòä –•–æ—Ä–æ—à–æ'}
              {rating === 5 && 'üòç –û—Ç–ª–∏—á–Ω–æ!'}
            </div>
          </div>

          <div className="review-section">
            <h3>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏</h3>
            <textarea
              value={review}
              onChange={(e) => setReview(e.target.value)}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å..."
              className="review-textarea"
              rows="4"
            />
            <div className="character-count">
              {review.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
            </div>
          </div>

          <div className="feedback-actions">
            <button 
              onClick={onClose}
              className="cancel-btn"
              disabled={submitting}
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            </button>
            <button 
              onClick={handleSubmit}
              className="submit-btn"
              disabled={submitting || rating === 0 || review.trim().length < 10}
            >
              {submitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FeedbackModal;

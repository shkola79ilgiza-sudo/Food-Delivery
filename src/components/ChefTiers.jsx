import React, { useState, useEffect, useCallback } from "react";
import { useToast } from "../contexts/ToastContext";

const ChefTiers = ({ chefId, onTierChange }) => {
  const { showSuccess, showError } = useToast();
  const [currentTier, setCurrentTier] = useState("free");
  const [tierData, setTierData] = useState({});
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [selectedTier, setSelectedTier] = useState("");

  const tiers = {
    free: {
      name: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
      icon: "üÜì",
      price: 0,
      color: "#6c757d",
      features: [
        "–î–æ 10 –±–ª—é–¥ –≤ –º–µ–Ω—é",
        "–ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "–ö–æ–º–∏—Å—Å–∏—è 20% —Å –∑–∞–∫–∞–∑–∞",
        "–û–±—ã—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
      ],
      limits: {
        maxDishes: 10,
        maxOrdersPerDay: 20,
        commissionRate: 0.2,
        prioritySupport: false,
        analytics: "basic",
        promotion: "standard",
      },
    },
    pro: {
      name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
      icon: "‚≠ê",
      price: 1999,
      color: "#007bff",
      features: [
        "–î–æ 50 –±–ª—é–¥ –≤ –º–µ–Ω—é",
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "–ö–æ–º–∏—Å—Å–∏—è 15% —Å –∑–∞–∫–∞–∑–∞",
        "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã",
        "SLA –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
      ],
      limits: {
        maxDishes: 50,
        maxOrdersPerDay: 100,
        commissionRate: 0.15,
        prioritySupport: true,
        analytics: "advanced",
        promotion: "priority",
        slotsCalendar: true,
        slaMonitoring: true,
      },
    },
    business: {
      name: "–ë–∏–∑–Ω–µ—Å",
      icon: "üíé",
      price: 4999,
      color: "#28a745",
      features: [
        "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥",
        "–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã",
        "VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7",
        "–ö–æ–º–∏—Å—Å–∏—è 10% —Å –∑–∞–∫–∞–∑–∞",
        "–¢–æ–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
        "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro",
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
        "–ë–µ–ª—ã–π –ª–µ–π–±–ª",
      ],
      limits: {
        maxDishes: -1, // –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        maxOrdersPerDay: -1, // –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        commissionRate: 0.1,
        prioritySupport: true,
        analytics: "enterprise",
        promotion: "top",
        slotsCalendar: true,
        slaMonitoring: true,
        personalManager: true,
        integrations: true,
        whiteLabel: true,
      },
    },
  };

  const loadChefTier = useCallback(() => {
    try {
      const savedTier = localStorage.getItem(`chef_tier_${chefId}`) || "free";
      const savedTierData = JSON.parse(
        localStorage.getItem(`chef_tier_data_${chefId}`) || "{}"
      );

      setCurrentTier(savedTier);
      setTierData(savedTierData);
    } catch (error) {
      console.error("Error loading chef tier:", error);
      setCurrentTier("free");
      setTierData({});
    }
  }, [chefId]);

  useEffect(() => {
    loadChefTier();
  }, [loadChefTier]);

  const upgradeTier = (newTier) => {
    try {
      const tierInfo = tiers[newTier];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
      localStorage.setItem(`chef_tier_${chefId}`, newTier);
      localStorage.setItem(
        `chef_tier_data_${chefId}`,
        JSON.stringify({
          tier: newTier,
          upgradedAt: new Date().toISOString(),
          expiresAt: new Date(
            Date.now() + 30 * 24 * 60 * 60 * 1000
          ).toISOString(), // 30 –¥–Ω–µ–π
          paymentStatus: "pending",
        })
      );

      setCurrentTier(newTier);
      setTierData({
        tier: newTier,
        upgradedAt: new Date().toISOString(),
        expiresAt: new Date(
          Date.now() + 30 * 24 * 60 * 60 * 1000
        ).toISOString(),
        paymentStatus: "pending",
      });

      if (onTierChange) {
        onTierChange(newTier, tierInfo);
      }

      showSuccess(`–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${tierInfo.name}"!`);
      setShowUpgradeModal(false);
    } catch (error) {
      console.error("Error upgrading tier:", error);
      showError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞");
    }
  };

  const getCurrentTierInfo = () => tiers[currentTier];
  const getTierProgress = () => {
    const tierInfo = getCurrentTierInfo();
    const limits = tierInfo.limits;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä–∞
    const chefDishes = JSON.parse(
      localStorage.getItem(`demo_menu_${chefId}`) || "[]"
    );
    const chefOrders = JSON.parse(
      localStorage.getItem("clientOrders") || "[]"
    ).filter((order) => order.chefId === chefId);

    const todayOrders = chefOrders.filter((order) => {
      const orderDate = new Date(order.createdAt || order.timestamp);
      const today = new Date();
      return orderDate.toDateString() === today.toDateString();
    });

    return {
      dishesUsed: chefDishes.length,
      dishesLimit: limits.maxDishes,
      ordersToday: todayOrders.length,
      ordersLimit: limits.maxOrdersPerDay,
      commissionRate: limits.commissionRate,
    };
  };

  const progress = getTierProgress();

  return (
    <div
      style={{
        background: "rgba(255, 255, 255, 0.95)",
        borderRadius: "15px",
        padding: "20px",
        marginBottom: "20px",
        boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
        backdropFilter: "blur(10px)",
        border: "1px solid rgba(255, 255, 255, 0.2)",
      }}
    >
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "20px",
        }}
      >
        <h3
          style={{
            color: "#2D5016",
            margin: 0,
            display: "flex",
            alignItems: "center",
            gap: "10px",
          }}
        >
          üíé –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
        </h3>
        <button
          onClick={() => setShowUpgradeModal(true)}
          style={{
            background: "#007bff",
            color: "white",
            border: "none",
            borderRadius: "8px",
            padding: "10px 20px",
            fontSize: "14px",
            fontWeight: "bold",
            cursor: "pointer",
            display: "flex",
            alignItems: "center",
            gap: "8px",
          }}
        >
          ‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ
        </button>
      </div>

      {/* –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ */}
      <div
        style={{
          background: getCurrentTierInfo().color + "15",
          border: `2px solid ${getCurrentTierInfo().color}`,
          borderRadius: "12px",
          padding: "20px",
          marginBottom: "20px",
        }}
      >
        <div
          style={{
            display: "flex",
            alignItems: "center",
            gap: "15px",
            marginBottom: "15px",
          }}
        >
          <span style={{ fontSize: "32px" }}>{getCurrentTierInfo().icon}</span>
          <div>
            <h4
              style={{
                color: getCurrentTierInfo().color,
                margin: 0,
                fontSize: "20px",
                fontWeight: "bold",
              }}
            >
              {getCurrentTierInfo().name}
            </h4>
            <p
              style={{
                margin: "5px 0 0 0",
                fontSize: "14px",
                color: "#666",
              }}
            >
              {getCurrentTierInfo().price === 0
                ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
                : `${getCurrentTierInfo().price}‚ÇΩ/–º–µ—Å—è—Ü`}
            </p>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */}
        <div style={{ marginBottom: "15px" }}>
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              marginBottom: "8px",
            }}
          >
            <span style={{ fontSize: "14px", fontWeight: "bold" }}>
              –ë–ª—é–¥–∞ –≤ –º–µ–Ω—é
            </span>
            <span style={{ fontSize: "14px", color: "#666" }}>
              {progress.dishesUsed} /{" "}
              {progress.dishesLimit === -1 ? "‚àû" : progress.dishesLimit}
            </span>
          </div>
          {progress.dishesLimit !== -1 && (
            <div
              style={{
                width: "100%",
                height: "8px",
                backgroundColor: "#e0e0e0",
                borderRadius: "4px",
                overflow: "hidden",
              }}
            >
              <div
                style={{
                  width: `${Math.min(
                    (progress.dishesUsed / progress.dishesLimit) * 100,
                    100
                  )}%`,
                  height: "100%",
                  backgroundColor: getCurrentTierInfo().color,
                  transition: "width 0.3s ease",
                }}
              />
            </div>
          )}
        </div>

        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: "8px",
          }}
        >
          <span style={{ fontSize: "14px", fontWeight: "bold" }}>
            –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è
          </span>
          <span style={{ fontSize: "14px", color: "#666" }}>
            {progress.ordersToday} /{" "}
            {progress.ordersLimit === -1 ? "‚àû" : progress.ordersLimit}
          </span>
        </div>
        {progress.ordersLimit !== -1 && (
          <div
            style={{
              width: "100%",
              height: "8px",
              backgroundColor: "#e0e0e0",
              borderRadius: "4px",
              overflow: "hidden",
              marginBottom: "15px",
            }}
          >
            <div
              style={{
                width: `${Math.min(
                  (progress.ordersToday / progress.ordersLimit) * 100,
                  100
                )}%`,
                height: "100%",
                backgroundColor: getCurrentTierInfo().color,
                transition: "width 0.3s ease",
              }}
            />
          </div>
        )}

        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <span style={{ fontSize: "14px", fontWeight: "bold" }}>
            –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
          </span>
          <span
            style={{
              fontSize: "16px",
              fontWeight: "bold",
              color: getCurrentTierInfo().color,
            }}
          >
            {Math.round(progress.commissionRate * 100)}%
          </span>
        </div>
      </div>

      {/* –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞ */}
      <div style={{ marginBottom: "20px" }}>
        <h4 style={{ color: "#2D5016", marginBottom: "15px" }}>
          üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞
        </h4>
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
            gap: "10px",
          }}
        >
          {getCurrentTierInfo().features.map((feature, index) => (
            <div
              key={index}
              style={{
                padding: "10px 15px",
                background: "#f8f9fa",
                borderRadius: "8px",
                border: "1px solid #e0e0e0",
                fontSize: "14px",
                display: "flex",
                alignItems: "center",
                gap: "8px",
              }}
            >
              <span style={{ color: getCurrentTierInfo().color }}>‚úì</span>
              {feature}
            </div>
          ))}
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ */}
      <div
        style={{
          background: "#e8f5e8",
          borderRadius: "10px",
          padding: "15px",
          marginBottom: "20px",
        }}
      >
        <h4 style={{ color: "#2D5016", marginBottom: "10px" }}>
          üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
        </h4>
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(150px, 1fr))",
            gap: "15px",
            fontSize: "14px",
          }}
        >
          <div>
            <div style={{ color: "#666", fontSize: "12px" }}>
              –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü
            </div>
            <div style={{ fontWeight: "bold", color: "#2D5016" }}>
              {
                JSON.parse(localStorage.getItem("clientOrders") || "[]")
                  .filter((order) => order.chefId === chefId)
                  .filter((order) => {
                    const orderDate = new Date(
                      order.createdAt || order.timestamp
                    );
                    const monthAgo = new Date();
                    monthAgo.setMonth(monthAgo.getMonth() - 1);
                    return orderDate > monthAgo;
                  }).length
              }
            </div>
          </div>
          <div>
            <div style={{ color: "#666", fontSize: "12px" }}>–û–±—â–∏–π –¥–æ—Ö–æ–¥</div>
            <div style={{ fontWeight: "bold", color: "#2D5016" }}>
              {JSON.parse(localStorage.getItem("clientOrders") || "[]")
                .filter((order) => order.chefId === chefId)
                .reduce((sum, order) => sum + (order.total || 0), 0)}
              ‚ÇΩ
            </div>
          </div>
          <div>
            <div style={{ color: "#666", fontSize: "12px" }}>
              –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            </div>
            <div style={{ fontWeight: "bold", color: "#2D5016" }}>
              {Math.round(
                JSON.parse(localStorage.getItem("clientOrders") || "[]")
                  .filter((order) => order.chefId === chefId)
                  .reduce((sum, order) => sum + (order.total || 0), 0) *
                  progress.commissionRate
              )}
              ‚ÇΩ
            </div>
          </div>
          <div>
            <div style={{ color: "#666", fontSize: "12px" }}>–í–∞—à –¥–æ—Ö–æ–¥</div>
            <div style={{ fontWeight: "bold", color: "#2D5016" }}>
              {Math.round(
                JSON.parse(localStorage.getItem("clientOrders") || "[]")
                  .filter((order) => order.chefId === chefId)
                  .reduce((sum, order) => sum + (order.total || 0), 0) *
                  (1 - progress.commissionRate)
              )}
              ‚ÇΩ
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ */}
      {showUpgradeModal && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0, 0, 0, 0.7)",
            zIndex: 1000,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            padding: "20px",
          }}
        >
          <div
            style={{
              backgroundColor: "white",
              borderRadius: "20px",
              maxWidth: "800px",
              width: "100%",
              maxHeight: "90vh",
              overflow: "hidden",
              boxShadow: "0 20px 60px rgba(0, 0, 0, 0.3)",
            }}
          >
            <div
              style={{
                padding: "20px 25px",
                borderBottom: "1px solid #e0e0e0",
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
                background: "linear-gradient(135deg, #007bff 0%, #0056b3 100%)",
                color: "white",
              }}
            >
              <h2 style={{ margin: 0, fontSize: "20px", fontWeight: "600" }}>
                üíé –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
              </h2>
              <button
                onClick={() => setShowUpgradeModal(false)}
                style={{
                  background: "rgba(255, 255, 255, 0.2)",
                  border: "none",
                  color: "white",
                  fontSize: "20px",
                  cursor: "pointer",
                  padding: "5px 10px",
                  borderRadius: "5px",
                }}
              >
                ‚úï
              </button>
            </div>

            <div
              style={{ padding: "25px", maxHeight: "60vh", overflowY: "auto" }}
            >
              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                  gap: "20px",
                }}
              >
                {Object.entries(tiers).map(([tierKey, tier]) => (
                  <div
                    key={tierKey}
                    onClick={() => setSelectedTier(tierKey)}
                    style={{
                      padding: "20px",
                      borderRadius: "15px",
                      border:
                        selectedTier === tierKey
                          ? `3px solid ${tier.color}`
                          : "2px solid #e0e0e0",
                      background:
                        selectedTier === tierKey ? `${tier.color}15` : "white",
                      cursor: "pointer",
                      transition: "all 0.3s ease",
                      position: "relative",
                    }}
                    onMouseEnter={(e) => {
                      if (selectedTier !== tierKey) {
                        e.target.style.transform = "translateY(-5px)";
                        e.target.style.boxShadow =
                          "0 8px 25px rgba(0,0,0,0.15)";
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (selectedTier !== tierKey) {
                        e.target.style.transform = "translateY(0)";
                        e.target.style.boxShadow = "none";
                      }
                    }}
                  >
                    {currentTier === tierKey && (
                      <div
                        style={{
                          position: "absolute",
                          top: "10px",
                          right: "10px",
                          background: tier.color,
                          color: "white",
                          padding: "4px 8px",
                          borderRadius: "12px",
                          fontSize: "12px",
                          fontWeight: "bold",
                        }}
                      >
                        –¢–ï–ö–£–©–ò–ô
                      </div>
                    )}

                    <div style={{ textAlign: "center", marginBottom: "15px" }}>
                      <div style={{ fontSize: "32px", marginBottom: "8px" }}>
                        {tier.icon}
                      </div>
                      <h3
                        style={{
                          color: tier.color,
                          margin: 0,
                          fontSize: "18px",
                          fontWeight: "bold",
                        }}
                      >
                        {tier.name}
                      </h3>
                      <div
                        style={{
                          fontSize: "24px",
                          fontWeight: "bold",
                          color: tier.color,
                          marginTop: "5px",
                        }}
                      >
                        {tier.price === 0 ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" : `${tier.price}‚ÇΩ/–º–µ—Å`}
                      </div>
                    </div>

                    <div style={{ marginBottom: "15px" }}>
                      {tier.features.map((feature, index) => (
                        <div
                          key={index}
                          style={{
                            padding: "6px 0",
                            fontSize: "14px",
                            display: "flex",
                            alignItems: "center",
                            gap: "8px",
                          }}
                        >
                          <span style={{ color: tier.color }}>‚úì</span>
                          {feature}
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>

              {selectedTier && (
                <div
                  style={{
                    marginTop: "25px",
                    padding: "20px",
                    background: "#f8f9fa",
                    borderRadius: "10px",
                    textAlign: "center",
                  }}
                >
                  <h4 style={{ marginBottom: "15px", color: "#333" }}>
                    –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tiers[selectedTier].name}
                  </h4>
                  <div
                    style={{
                      display: "flex",
                      gap: "15px",
                      justifyContent: "center",
                    }}
                  >
                    <button
                      onClick={() => setShowUpgradeModal(false)}
                      style={{
                        background: "#6c757d",
                        color: "white",
                        border: "none",
                        borderRadius: "8px",
                        padding: "12px 24px",
                        fontSize: "14px",
                        fontWeight: "bold",
                        cursor: "pointer",
                      }}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                    <button
                      onClick={() => upgradeTier(selectedTier)}
                      style={{
                        background: tiers[selectedTier].color,
                        color: "white",
                        border: "none",
                        borderRadius: "8px",
                        padding: "12px 24px",
                        fontSize: "14px",
                        fontWeight: "bold",
                        cursor: "pointer",
                      }}
                    >
                      –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChefTiers;

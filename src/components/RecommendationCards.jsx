// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç AI-—Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –≤ —Å—Ç–∏–ª–µ "–°–æ–≤–µ—Ç –¥–Ω—è"

import React, { useState, useEffect } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import '../App.css';

const RecommendationCards = ({ userOrderHistory = [], userPreferences = {} }) => {
  const { t } = useLanguage();
  const [recommendations, setRecommendations] = useState([]);
  const [currentCard, setCurrentCard] = useState(0);
  const [isVisible, setIsVisible] = useState(true);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
    const generateRecommendations = () => {
      const recs = [];
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
      const recentOrders = userOrderHistory.slice(-10);
      const totalCalories = recentOrders.reduce((sum, order) => sum + (order.calories || 0), 0);
      const avgCalories = totalCalories / recentOrders.length || 0;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
      const categoryCount = {};
      recentOrders.forEach(order => {
        if (order.category) {
          categoryCount[order.category] = (categoryCount[order.category] || 0) + 1;
        }
      });
      
      const mostOrderedCategory = Object.keys(categoryCount).reduce((a, b) => 
        categoryCount[a] > categoryCount[b] ? a : b, 'main'
      );
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1: –ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π
      if (avgCalories > 800) {
        recs.push({
          id: 1,
          type: 'calorie_balance',
          icon: 'ü•ó',
          title: '–ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π',
          message: `–í—ã —á–∞—Å—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ –±–ª—é–¥–∞ (${Math.round(avgCalories)} –∫–∫–∞–ª). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∞–ª–∞—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞!`,
          action: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–ª–∞—Ç—ã',
          color: '#4CAF50',
          priority: 'high'
        });
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2: –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
      if (Object.keys(categoryCount).length < 3) {
        recs.push({
          id: 2,
          type: 'variety',
          icon: 'üåà',
          title: '–ë–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥! –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –≤–µ–≥–∞–Ω—Å–∫–∏–µ –∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.',
          action: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–µ–Ω—é',
          color: '#FF9800',
          priority: 'medium'
        });
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3: –î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
      if (userPreferences.diabeticFriendly) {
        recs.push({
          id: 3,
          type: 'diabetic',
          icon: 'üçØ',
          title: '–î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é',
          message: '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ —Å –Ω–∏–∑–∫–∏–º –≥–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –∏ –∑–∞–º–µ–Ω–∏—Ç–µ–ª—è–º–∏ —Å–∞—Ö–∞—Ä–∞.',
          action: '–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é',
          color: '#9C27B0',
          priority: 'high'
        });
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 4: –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const currentMonth = new Date().getMonth();
      if (currentMonth >= 5 && currentMonth <= 8) { // –õ–µ—Ç–æ
        recs.push({
          id: 4,
          type: 'seasonal',
          icon: '‚òÄÔ∏è',
          title: '–õ–µ—Ç–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
          message: '–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ –ª–µ–≥–∫–∏–µ –±–ª—é–¥–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∂–∞—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã!',
          action: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ—Ç–Ω–µ–µ –º–µ–Ω—é',
          color: '#FF5722',
          priority: 'medium'
        });
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 5: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞
      recs.push({
        id: 5,
        type: 'popular',
        icon: 'üî•',
        title: '–ü–æ–ø—É–ª—è—Ä–Ω–æ —Å–µ–≥–æ–¥–Ω—è',
        message: '–ë–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å - —Å–∞–º—ã–µ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º—ã–µ –±–ª—é–¥–∞ —Å–µ–≥–æ–¥–Ω—è!',
        action: '–ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å',
        color: '#F44336',
        priority: 'low'
      });
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 6: –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
      const unhealthyCount = recentOrders.filter(order => 
        order.category === 'fast_food' || order.category === 'desserts'
      ).length;
      
      if (unhealthyCount > recentOrders.length * 0.5) {
        recs.push({
          id: 6,
          type: 'healthy',
          icon: 'üí™',
          title: '–ó–¥–æ—Ä–æ–≤—ã–π –≤—ã–±–æ—Ä',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –±–ª—é–¥–∞ –Ω–∞ –ø–∞—Ä—É –∏ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.',
          action: '–ó–¥–æ—Ä–æ–≤—ã–µ –±–ª—é–¥–∞',
          color: '#8BC34A',
          priority: 'high'
        });
      }
      
      setRecommendations(recs);
    };
    
    generateRecommendations();
  }, [userOrderHistory, userPreferences]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  useEffect(() => {
    if (recommendations.length > 1) {
      const interval = setInterval(() => {
        setCurrentCard((prev) => (prev + 1) % recommendations.length);
      }, 5000);
      
      return () => clearInterval(interval);
    }
  }, [recommendations.length]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  const handleAction = (recommendation) => {
    console.log('Action clicked:', recommendation.action);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  const handleClose = () => {
    setIsVisible(false);
  };

  if (!isVisible || recommendations.length === 0) {
    return null;
  }

  const currentRec = recommendations[currentCard];

  return (
    <div className="recommendation-cards-container">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div 
        className="recommendation-card"
        style={{
          background: `linear-gradient(135deg, ${currentRec.color}15, ${currentRec.color}05)`,
          border: `2px solid ${currentRec.color}30`,
          borderRadius: '16px',
          padding: '20px',
          margin: '10px 0',
          position: 'relative',
          overflow: 'hidden',
          animation: 'slideInFromRight 0.5s ease-out'
        }}
      >
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button
          onClick={handleClose}
          style={{
            position: 'absolute',
            top: '10px',
            right: '10px',
            background: 'rgba(255,255,255,0.8)',
            border: 'none',
            borderRadius: '50%',
            width: '30px',
            height: '30px',
            cursor: 'pointer',
            fontSize: '16px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          √ó
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π */}
        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
          <span style={{ fontSize: '24px', marginRight: '10px' }}>
            {currentRec.icon}
          </span>
          <h3 style={{ 
            margin: 0, 
            color: currentRec.color, 
            fontSize: '18px',
            fontWeight: 'bold'
          }}>
            {currentRec.title}
          </h3>
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ */}
          <div style={{
            marginLeft: 'auto',
            width: '8px',
            height: '8px',
            borderRadius: '50%',
            backgroundColor: currentRec.priority === 'high' ? '#F44336' : 
                           currentRec.priority === 'medium' ? '#FF9800' : '#4CAF50'
          }} />
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
        <p style={{ 
          margin: '0 0 16px 0', 
          color: '#333', 
          fontSize: '14px',
          lineHeight: '1.4'
        }}>
          {currentRec.message}
        </p>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
        <button
          onClick={() => handleAction(currentRec)}
          style={{
            background: currentRec.color,
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            padding: '10px 20px',
            fontSize: '14px',
            fontWeight: 'bold',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            boxShadow: `0 2px 8px ${currentRec.color}40`
          }}
          onMouseOver={(e) => {
            e.target.style.transform = 'translateY(-2px)';
            e.target.style.boxShadow = `0 4px 12px ${currentRec.color}60`;
          }}
          onMouseOut={(e) => {
            e.target.style.transform = 'translateY(0)';
            e.target.style.boxShadow = `0 2px 8px ${currentRec.color}40`;
          }}
        >
          {currentRec.action}
        </button>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ */}
        {recommendations.length > 1 && (
          <div style={{ 
            display: 'flex', 
            justifyContent: 'center', 
            marginTop: '16px',
            gap: '6px'
          }}>
            {recommendations.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentCard(index)}
                style={{
                  width: '8px',
                  height: '8px',
                  borderRadius: '50%',
                  border: 'none',
                  background: index === currentCard ? currentRec.color : '#ddd',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
              />
            ))}
          </div>
        )}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏) */}
      {recommendations.length > 1 && (
        <div style={{ 
          display: 'flex', 
          gap: '8px', 
          marginTop: '10px',
          overflowX: 'auto',
          paddingBottom: '5px'
        }}>
          {recommendations
            .filter((_, index) => index !== currentCard)
            .slice(0, 3)
            .map((rec, index) => (
              <div
                key={rec.id}
                onClick={() => setCurrentCard(recommendations.indexOf(rec))}
                style={{
                  minWidth: '120px',
                  padding: '12px',
                  background: `linear-gradient(135deg, ${rec.color}10, ${rec.color}05)`,
                  border: `1px solid ${rec.color}20`,
                  borderRadius: '12px',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  textAlign: 'center'
                }}
                onMouseOver={(e) => {
                  e.target.style.transform = 'translateY(-2px)';
                  e.target.style.boxShadow = `0 4px 8px ${rec.color}30`;
                }}
                onMouseOut={(e) => {
                  e.target.style.transform = 'translateY(0)';
                  e.target.style.boxShadow = 'none';
                }}
              >
                <div style={{ fontSize: '20px', marginBottom: '4px' }}>
                  {rec.icon}
                </div>
                <div style={{ 
                  fontSize: '12px', 
                  fontWeight: 'bold', 
                  color: rec.color,
                  marginBottom: '4px'
                }}>
                  {rec.title}
                </div>
                <div style={{ 
                  fontSize: '10px', 
                  color: '#666',
                  lineHeight: '1.2'
                }}>
                  {rec.message.substring(0, 50)}...
                </div>
              </div>
            ))}
        </div>
      )}
    </div>
  );
};

export default RecommendationCards;

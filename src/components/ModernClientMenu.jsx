import React, { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { getAvailableDishes } from "../api/adapter";
import { useLanguage } from "../contexts/LanguageContext";
import { useToast } from "../contexts/ToastContext";
import SideCart from "./SideCart";
import ModernDishCard from "./ModernDishCard";
import StickyCategories from "./StickyCategories";
import ModernFilters from "./ModernFilters";

const ModernClientMenu = () => {
  const [dishes, setDishes] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [showFilters, setShowFilters] = useState(false);
  const [sideCartOpen, setSideCartOpen] = useState(false);

  // –§–∏–ª—å—Ç—Ä—ã
  const [filters, setFilters] = useState({
    cuisine: "all",
    halal: false,
    diet: "all",
    priceRange: { min: 0, max: 5000 },
    cookingTime: "all",
    allergens: [],
    vegetarian: false,
    spicy: false,
    new: false,
  });

  const navigate = useNavigate();
  const { t } = useLanguage();
  const { showSuccess, showError } = useToast();

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categories = [
    { id: "main", name: "–û—Å–Ω–æ–≤–Ω—ã–µ", icon: "üçΩÔ∏è" },
    { id: "salads", name: "–°–∞–ª–∞—Ç—ã", icon: "ü•ó" },
    { id: "soups", name: "–°—É–ø—ã", icon: "üç≤" },
    { id: "desserts", name: "–î–µ—Å–µ—Ä—Ç—ã", icon: "üç∞" },
    { id: "beverages", name: "–ù–∞–ø–∏—Ç–∫–∏", icon: "ü•§" },
    { id: "bakery", name: "–í—ã–ø–µ—á–∫–∞", icon: "ü•ñ" },
    { id: "tatar", name: "–¢–∞—Ç–∞—Ä—Å–∫–∞—è", icon: "ü•ò" },
    { id: "halal", name: "–•–∞–ª—è–ª—å", icon: "üïå" },
    { id: "diet", name: "–î–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ", icon: "ü•ó" },
    { id: "preparations", name: "–ó–∞–≥–æ—Ç–æ–≤–∫–∏", icon: "ü•ò" },
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª—é–¥
  const loadDishes = useCallback(async () => {
    try {
      setLoading(true);
      const data = await getAvailableDishes();

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç –±–ª—é–¥
      if (!data || data.length === 0) {
        const demoDishes = [
          {
            id: 1,
            name: "–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
            description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–º–µ—Ç–∞–Ω–æ–π",
            price: 350,
            weight: "400–≥",
            image: "/images/borscht.jpg",
            category: "MAIN_COURSE",
            rating: 4.8,
            reviewsCount: 24,
            isNew: true,
            isPopular: true,
            isVegetarian: false,
            isSpicy: false,
          },
          {
            id: 2,
            name: "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π",
            description: "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º",
            price: 420,
            weight: "300–≥",
            image: "/images/caesar.jpg",
            category: "SALAD",
            rating: 4.6,
            reviewsCount: 18,
            isNew: false,
            isPopular: true,
            isVegetarian: false,
            isSpicy: false,
          },
          {
            id: 3,
            name: "–¢–∏—Ä–∞–º–∏—Å—É",
            description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç —Å –∫–æ—Ñ–µ –∏ –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ",
            price: 280,
            weight: "150–≥",
            image: "/images/tiramisu.jpg",
            category: "DESSERT",
            rating: 4.9,
            reviewsCount: 31,
            isNew: false,
            isPopular: true,
            isVegetarian: true,
            isSpicy: false,
          },
          {
            id: 4,
            name: "–¢–æ–º –Ø–º",
            description: "–û—Å—Ç—Ä—ã–π —Ç–∞–π—Å–∫–∏–π —Å—É–ø —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ –∏ –≥—Ä–∏–±–∞–º–∏",
            price: 450,
            weight: "350–≥",
            image: "/images/tom-yam.jpg",
            category: "SOUP",
            rating: 4.7,
            reviewsCount: 15,
            isNew: true,
            isPopular: false,
            isVegetarian: false,
            isSpicy: true,
          },
          {
            id: 5,
            name: "–°—Ç–µ–π–∫ —Ä–∏–±–∞–π",
            description: "–°–æ—á–Ω—ã–π –≥–æ–≤—è–∂–∏–π —Å—Ç–µ–π–∫ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∂–∞—Ä–∫–∏",
            price: 890,
            weight: "250–≥",
            image: "/images/ribeye.jpg",
            category: "MAIN_COURSE",
            rating: 4.9,
            reviewsCount: 42,
            isNew: false,
            isPopular: true,
            isVegetarian: false,
            isSpicy: false,
          },
          {
            id: 6,
            name: "–°–º—É–∑–∏ —è–≥–æ–¥–Ω—ã–π",
            description: "–û—Ö–ª–∞–∂–¥–∞—é—â–∏–π —Å–º—É–∑–∏ –∏–∑ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —è–≥–æ–¥",
            price: 180,
            weight: "300–º–ª",
            image: "/images/smoothie.jpg",
            category: "BEVERAGE",
            rating: 4.5,
            reviewsCount: 12,
            isNew: true,
            isPopular: false,
            isVegetarian: true,
            isSpicy: false,
          },
        ];
        setDishes(demoDishes);
      } else {
        setDishes(data);
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥");
      showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é");
    } finally {
      setLoading(false);
    }
  }, [showError]);

  useEffect(() => {
    loadDishes();
  }, [loadDishes]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–ª—é–¥
  const filteredDishes = (dishes || []).filter((dish) => {
    // –ü–æ–∏—Å–∫
    if (
      searchQuery &&
      !dish.name.toLowerCase().includes(searchQuery.toLowerCase())
    ) {
      return false;
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if (selectedCategory) {
      const categoryMap = {
        main: "MAIN_COURSE",
        salads: "SALAD",
        soups: "SOUP",
        desserts: "DESSERT",
        beverages: "BEVERAGE",
        bakery: "DESSERT",
        tatar: "MAIN_COURSE",
        halal: "MAIN_COURSE",
        diet: "MAIN_COURSE",
        preparations: "SEMI_FINISHED",
      };

      if (dish.category !== categoryMap[selectedCategory]) {
        return false;
      }
    }

    // –¶–µ–Ω–∞
    if (
      dish.price < filters.priceRange.min ||
      dish.price > filters.priceRange.max
    ) {
      return false;
    }

    // –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ
    if (filters.vegetarian && !dish.isVegetarian) {
      return false;
    }

    // –û—Å—Ç—Ä–æ–µ
    if (filters.spicy && !dish.isSpicy) {
      return false;
    }

    // –ù–æ–≤–∏–Ω–∫–∏
    if (filters.new && !dish.isNew) {
      return false;
    }

    return true;
  });

  // –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
  const handleAddToCart = (dish) => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === dish.id);
      if (existingItem) {
        return prevCart.map((item) =>
          item.id === dish.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        return [...prevCart, { ...dish, quantity: 1 }];
      }
    });
    showSuccess(`${dish.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
  };

  const handleRemoveFromCart = (dishId) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== dishId));
  };

  const handleUpdateQuantity = (dishId, newQuantity) => {
    if (newQuantity <= 0) {
      handleRemoveFromCart(dishId);
    } else {
      setCart((prevCart) =>
        prevCart.map((item) =>
          item.id === dishId ? { ...item, quantity: newQuantity } : item
        )
      );
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
  };

  const handleClearFilters = () => {
    setFilters({
      cuisine: "all",
      halal: false,
      diet: "all",
      priceRange: { min: 0, max: 5000 },
      cookingTime: "all",
      allergens: [],
      vegetarian: false,
      spicy: false,
      new: false,
    });
    setSelectedCategory(null);
    setSearchQuery("");
  };

  const handleRefresh = () => {
    loadDishes();
  };

  const handleLogout = () => {
    localStorage.removeItem("authToken");
    localStorage.removeItem("role");
    localStorage.removeItem("clientId");
    navigate("/");
  };

  return (
    <div className="modern-menu-container">
      {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å–≤–µ—Ä—Ö—É */}
      <nav className="modern-top-nav">
        <div className="nav-brand">
          <span className="brand-icon">üçΩÔ∏è</span>
          <span className="brand-text">Food Delivery</span>
        </div>

        <div className="nav-search">
          <div className="search-input-container">
            <span className="search-icon">üîç</span>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –±–ª—é–¥..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="modern-search-input"
            />
          </div>
        </div>

        <div className="nav-actions">
          <button className="cart-button" onClick={() => setSideCartOpen(true)}>
            <span className="cart-icon">üõí</span>
            <span className="cart-count">{cart.length}</span>
          </button>

          <button className="profile-button" onClick={handleLogout}>
            <span className="profile-icon">üë§</span>
          </button>
        </div>
      </nav>

      {/* Sticky –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <StickyCategories
        categories={categories}
        selectedCategory={selectedCategory}
        onCategorySelect={setSelectedCategory}
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="modern-content">
        {/* Hero —Å–µ–∫—Ü–∏—è */}
        <section className="hero-section">
          <div className="hero-content">
            <h1 className="hero-title">–í–∫—É—Å–Ω–∞—è –µ–¥–∞ –Ω–∞ –∑–∞–∫–∞–∑</h1>
            <p className="hero-subtitle">
              –°–≤–µ–∂–∏–µ –±–ª—é–¥–∞ –æ—Ç –ª—É—á—à–∏—Ö –ø–æ–≤–∞—Ä–æ–≤ –≥–æ—Ä–æ–¥–∞
            </p>

            <div className="hero-stats">
              <div className="stat-item">
                <span className="stat-number">{(dishes || []).length}+</span>
                <span className="stat-label">–ë–ª—é–¥</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">50+</span>
                <span className="stat-label">–ü–æ–≤–∞—Ä–æ–≤</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">4.8</span>
                <span className="stat-label">–†–µ–π—Ç–∏–Ω–≥</span>
              </div>
            </div>
          </div>

          <div className="hero-image">
            <div className="floating-food">
              <span className="food-item">üçï</span>
              <span className="food-item">üçî</span>
              <span className="food-item">üçú</span>
              <span className="food-item">ü•ó</span>
              <span className="food-item">üç∞</span>
            </div>
          </div>
        </section>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <ModernFilters
          filters={filters}
          onFilterChange={handleFilterChange}
          onClearFilters={handleClearFilters}
          isOpen={showFilters}
          onToggle={() => setShowFilters(!showFilters)}
        />

        {/* –°–µ—Ç–∫–∞ –±–ª—é–¥ */}
        <section className="dishes-section">
          <div className="section-header">
            <h2 className="section-title">
              {selectedCategory
                ? categories.find((c) => c.id === selectedCategory)?.name
                : "–í—Å–µ –±–ª—é–¥–∞"}
            </h2>
            <span className="dishes-count">{filteredDishes.length} –±–ª—é–¥</span>
          </div>

          {loading ? (
            <div className="loading-container">
              <div className="loading-spinner"></div>
              <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∫—É—Å–Ω—ã–µ –±–ª—é–¥–∞...</p>
            </div>
          ) : error ? (
            <div className="error-container">
              <span className="error-icon">üòû</span>
              <h3>–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h3>
              <p>{error}</p>
              <button onClick={handleRefresh} className="retry-btn">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          ) : (
            <div className="modern-dishes-grid">
              {filteredDishes.map((dish) => (
                <ModernDishCard
                  key={dish.id}
                  dish={dish}
                  onAddToCart={handleAddToCart}
                  onRemoveFromCart={handleRemoveFromCart}
                  cartQuantity={
                    cart.find((item) => item.id === dish.id)?.quantity || 0
                  }
                />
              ))}
            </div>
          )}
        </section>
      </main>

      {/* Side Cart */}
      <SideCart
        isOpen={sideCartOpen}
        onClose={() => setSideCartOpen(false)}
        cart={cart}
        onUpdateQuantity={handleUpdateQuantity}
        onRemoveItem={handleRemoveFromCart}
      />

      {/* Floating Action Button */}
      <div className="fab-container">
        <button
          className="fab-button"
          onClick={() => setShowFilters(!showFilters)}
        >
          <span className="fab-icon">üîç</span>
        </button>
      </div>
    </div>
  );
};

export default ModernClientMenu;

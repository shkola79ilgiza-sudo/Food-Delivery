import React, { useState, useEffect, useCallback } from "react";
import { useToast } from "../contexts/ToastContext";
import "../App.css";

const ChefProcurementPlanner = ({ onClose }) => {
  const { showSuccess, showError } = useToast();
  const [orders, setOrders] = useState([]);
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedPeriod, setSelectedPeriod] = useState("week"); // week, month, quarter
  const [addedToShoppingList, setAddedToShoppingList] = useState(new Set()); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞
  const [removedRecommendations, setRemovedRecommendations] = useState(
    new Set()
  ); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const getIngredientIcon = (ingredient) => {
    const normalizedIngredient = ingredient.toLowerCase().trim();

    // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
    if (
      normalizedIngredient.includes("–∫—É—Ä–∏—Ü–∞") ||
      normalizedIngredient.includes("–∫—É—Ä–∏–Ω–æ–µ")
    )
      return "üçó";
    if (
      normalizedIngredient.includes("–≥–æ–≤—è–¥–∏–Ω–∞") ||
      normalizedIngredient.includes("–≥–æ–≤—è–∂—å–µ")
    )
      return "ü•©";
    if (
      normalizedIngredient.includes("—Å–≤–∏–Ω–∏–Ω–∞") ||
      normalizedIngredient.includes("—Å–≤–∏–Ω–æ–µ")
    )
      return "üê∑";
    if (
      normalizedIngredient.includes("–±–∞—Ä–∞–Ω–∏–Ω–∞") ||
      normalizedIngredient.includes("–±–∞—Ä–∞–Ω—å–µ")
    )
      return "üêë";
    if (
      normalizedIngredient.includes("—Ä—ã–±–∞") ||
      normalizedIngredient.includes("–ª–æ—Å–æ—Å—å") ||
      normalizedIngredient.includes("—Ç—Ä–µ—Å–∫–∞")
    )
      return "üêü";

    // –û–≤–æ—â–∏
    if (
      normalizedIngredient.includes("–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å") ||
      normalizedIngredient.includes("–∫–∞—Ä—Ç–æ—à–∫–∞")
    )
      return "ü•î";
    if (normalizedIngredient.includes("–ª—É–∫")) return "üßÖ";
    if (
      normalizedIngredient.includes("–º–æ—Ä–∫–æ–≤—å") ||
      normalizedIngredient.includes("–º–æ—Ä–∫–æ–≤–∫–∞")
    )
      return "ü•ï";
    if (
      normalizedIngredient.includes("–ø–æ–º–∏–¥–æ—Ä") ||
      normalizedIngredient.includes("—Ç–æ–º–∞—Ç")
    )
      return "üçÖ";
    if (normalizedIngredient.includes("–æ–≥—É—Ä–µ—Ü")) return "ü•í";
    if (normalizedIngredient.includes("–∫–∞–ø—É—Å—Ç–∞")) return "ü•¨";
    if (normalizedIngredient.includes("–ø–µ—Ä–µ—Ü")) return "ü´ë";
    if (normalizedIngredient.includes("—á–µ—Å–Ω–æ–∫")) return "üßÑ";

    // –ó–µ–ª–µ–Ω—å
    if (normalizedIngredient.includes("—Å–∞–ª–∞—Ç")) return "ü•ó";
    if (normalizedIngredient.includes("–ø–µ—Ç—Ä—É—à–∫–∞")) return "üåø";
    if (normalizedIngredient.includes("—É–∫—Ä–æ–ø")) return "üåø";
    if (normalizedIngredient.includes("–±–∞–∑–∏–ª–∏–∫")) return "üåø";

    // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    if (normalizedIngredient.includes("–º–æ–ª–æ–∫–æ")) return "ü•õ";
    if (
      normalizedIngredient.includes("—Å—ã—Ä") ||
      normalizedIngredient.includes("–ø–∞—Ä–º–µ–∑–∞–Ω")
    )
      return "üßÄ";
    if (normalizedIngredient.includes("—Ç–≤–æ—Ä–æ–≥")) return "ü•õ";
    if (normalizedIngredient.includes("—Å–º–µ—Ç–∞–Ω–∞")) return "ü•õ";
    if (normalizedIngredient.includes("–º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ")) return "üßà";

    // –ö—Ä—É–ø—ã –∏ –º—É–∫–∞
    if (normalizedIngredient.includes("–º—É–∫–∞")) return "üåæ";
    if (normalizedIngredient.includes("—Ä–∏—Å")) return "üçö";
    if (normalizedIngredient.includes("–≥—Ä–µ—á–∫–∞")) return "üåæ";
    if (normalizedIngredient.includes("–æ–≤—Å—è–Ω–∫–∞")) return "üåæ";

    // –û—Ä–µ—Ö–∏
    if (
      normalizedIngredient.includes("–æ—Ä–µ—Ö") ||
      normalizedIngredient.includes("–º–∏–Ω–¥–∞–ª—å")
    )
      return "ü•ú";

    // –Ø–π—Ü–∞
    if (normalizedIngredient.includes("—è–π—Ü–æ")) return "ü•ö";

    // –°–∞—Ö–∞—Ä –∏ —Å–ª–∞–¥–æ—Å—Ç–∏
    if (normalizedIngredient.includes("—Å–∞—Ö–∞—Ä")) return "üçØ";
    if (normalizedIngredient.includes("–º–µ–¥")) return "üçØ";

    // –ö–æ–Ω—Å–µ—Ä–≤—ã
    if (
      normalizedIngredient.includes("—Ç—É—à–µ–Ω–∫–∞") ||
      normalizedIngredient.includes("–∫–æ–Ω—Å–µ—Ä–≤")
    )
      return "ü•´";

    // –ú–∞—Å–ª–∞
    if (normalizedIngredient.includes("–º–∞—Å–ª–æ")) return "ü´í";

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return "ü•ï";
  };

  const getChefDishes = (chefId) => {
    try {
      const key = `demo_menu_${chefId}`;
      const raw = localStorage.getItem(key);
      let parsed = raw ? JSON.parse(raw) : [];

      // –ï—Å–ª–∏ –±–ª—é–¥ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
      if (!Array.isArray(parsed) || parsed.length === 0) {
        console.log("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ –¥–ª—è –ø–æ–≤–∞—Ä–∞:", chefId);
        parsed = [
          {
            id: "dish-1",
            name: "–ë–æ—Ä—â",
            category: "–°—É–ø—ã",
            price: 350,
            description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –±–æ—Ä—â",
            ingredients: `500–≥ –≥–æ–≤—è–¥–∏–Ω–∞
300–≥ —Å–≤–µ–∫–ª–∞
200–≥ –∫–∞–ø—É—Å—Ç–∞
150–≥ –º–æ—Ä–∫–æ–≤—å
100–≥ –ª—É–∫
50–≥ —Ç–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞
2 –∑—É–±—á–∏–∫–∞ —á–µ—Å–Ω–æ–∫
—Å–æ–ª—å, –ø–µ—Ä–µ—Ü –ø–æ –≤–∫—É—Å—É`,
            image: "",
            chefId: chefId,
          },
          {
            id: "dish-2",
            name: "–ü–ª–æ–≤",
            category: "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞",
            price: 400,
            description: "–£–∑–±–µ–∫—Å–∫–∏–π –ø–ª–æ–≤ —Å –±–∞—Ä–∞–Ω–∏–Ω–æ–π",
            ingredients: `400–≥ –±–∞—Ä–∞–Ω–∏–Ω–∞
300–≥ —Ä–∏—Å
200–≥ –º–æ—Ä–∫–æ–≤—å
100–≥ –ª—É–∫
50–≥ –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ
2 –∑—É–±—á–∏–∫–∞ —á–µ—Å–Ω–æ–∫
—Å–æ–ª—å, —Å–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É`,
            image: "",
            chefId: chefId,
          },
          {
            id: "dish-3",
            name: "–ö–æ—Ç–ª–µ—Ç–∞ –ø–æ-–∫–∏–µ–≤—Å–∫–∏",
            category: "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞",
            price: 450,
            description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ—Ç–ª–µ—Ç–∞ –ø–æ-–∫–∏–µ–≤—Å–∫–∏",
            ingredients: `300–≥ –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞
100–≥ –º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ
50–≥ –º—É–∫–∞
2 —è–π—Ü–∞
100–≥ –ø–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å—É—Ö–∞—Ä–∏
—Å–æ–ª—å, –ø–µ—Ä–µ—Ü –ø–æ –≤–∫—É—Å—É`,
            image: "",
            chefId: chefId,
          },
          {
            id: "dish-4",
            name: "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
            category: "–°–∞–ª–∞—Ç—ã",
            price: 280,
            description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
            ingredients: `200–≥ —Å–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥
150–≥ –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞
50–≥ –ø–∞—Ä–º–µ–∑–∞–Ω
30–≥ —Å—É—Ö–∞—Ä–∏–∫–∏
2 —è–π—Ü–∞
50–≥ –º–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ
—Å–æ–ª—å, –ø–µ—Ä–µ—Ü –ø–æ –≤–∫—É—Å—É`,
            image: "",
            chefId: chefId,
          },
          {
            id: "dish-5",
            name: "–°—É–ø-–ª–∞–ø—à–∞",
            category: "–°—É–ø—ã",
            price: 250,
            description: "–î–æ–º–∞—à–Ω–∏–π —Å—É–ø —Å –ª–∞–ø—à–æ–π",
            ingredients: `300–≥ –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞
200–≥ –ª–∞–ø—à–∞
150–≥ –º–æ—Ä–∫–æ–≤—å
100–≥ –ª—É–∫
50–≥ –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ
—Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –∑–µ–ª–µ–Ω—å –ø–æ –≤–∫—É—Å—É`,
            image: "",
            chefId: chefId,
          },
        ];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ –≤ localStorage
        localStorage.setItem(key, JSON.stringify(parsed));
        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
      }

      return Array.isArray(parsed) ? parsed : [];
    } catch (error) {
      console.error("Error loading chef dishes:", error);
      return [];
    }
  };

  const getRealDishIngredients = (dishName, chefDishes) => {
    // –ò—â–µ–º –±–ª—é–¥–æ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –±–ª—é–¥–∞—Ö –ø–æ–≤–∞—Ä–∞
    const dish = chefDishes.find((d) => d.name === dishName);

    console.log("üîç –ü–æ–∏—Å–∫ –±–ª—é–¥–∞:", dishName);
    console.log(
      "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª—é–¥–∞ –ø–æ–≤–∞—Ä–∞:",
      chefDishes.map((d) => d.name)
    );
    console.log("üçΩÔ∏è –ù–∞–π–¥–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ:", dish);

    if (dish && dish.ingredients) {
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", dish.ingredients);
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const parsed = parseIngredientsText(dish.ingredients);
      console.log("üìù –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", parsed);
      return parsed;
    }

    console.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –±–ª—é–¥–∞:", dishName);
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return getDishIngredients(dishName);
  };

  const parseIngredientsText = (ingredientsText) => {
    if (!ingredientsText || typeof ingredientsText !== "string") {
      return [];
    }

    const ingredients = [];
    const lines = ingredientsText.split("\n").filter((line) => line.trim());

    lines.forEach((line) => {
      const trimmedLine = line.trim();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–ø–æ –≤–∫—É—Å—É" - —ç—Ç–æ –Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      if (
        trimmedLine.includes("–ø–æ –≤–∫—É—Å—É") ||
        trimmedLine.includes("—Å–ø–µ—Ü–∏–∏") ||
        trimmedLine.includes("–ø—Ä–∏–ø—Ä–∞–≤—ã")
      ) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
      }

      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "500–≥ –≥–æ–≤—è–¥–∏–Ω–∞" –∏–ª–∏ "2 —à—Ç –ª—É–∫"
      const match = trimmedLine.match(
        /^(\d+(?:\.\d+)?)\s*(–≥|–∫–≥|—à—Ç|–ª|–º–ª|—Å—Ç\.–ª|—á\.–ª|–ø—É—á–æ–∫|–∑—É–±—á–∏–∫|–¥–æ–ª—å–∫–∞|–∫—É—Å–æ–∫|–ø–æ—Ä—Ü–∏—è)?\s*(.+)$/i
      );

      if (match) {
        const amount = parseFloat(match[1]);
        const unit = match[2] || "–≥";
        const name = match[3].trim();

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–º–º—ã –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        let amountInGrams = amount;
        if (unit === "–∫–≥") amountInGrams = amount * 1000;
        else if (unit === "–ª" || unit === "–º–ª")
          amountInGrams = amount; // –î–ª—è –∂–∏–¥–∫–æ—Å—Ç–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        else if (
          unit === "—à—Ç" ||
          unit === "–ø—É—á–æ–∫" ||
          unit === "–∑—É–±—á–∏–∫" ||
          unit === "–¥–æ–ª—å–∫–∞" ||
          unit === "–∫—É—Å–æ–∫" ||
          unit === "–ø–æ—Ä—Ü–∏—è"
        ) {
          amountInGrams = amount * 50; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –¥–ª—è —à—Ç—É—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        }

        ingredients.push({
          name: name,
          amount: amountInGrams / 1000, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–≥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
          unit: unit,
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫)
        console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É:", trimmedLine);
      }
    });

    return ingredients;
  };

  const getDishIngredients = (dishName) => {
    // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞ (fallback)
    const ingredientsMap = {
      "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π": [
        { name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", amount: 0.2 },
        { name: "–°–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥", amount: 0.1 },
        { name: "–ü–∞—Ä–º–µ–∑–∞–Ω", amount: 0.05 },
        { name: "–°—É—Ö–∞—Ä–∏–∫–∏", amount: 0.03 },
      ],
      "–ê–∑—É —Å —Ç—É—à—ë–Ω–∫–æ–π": [
        { name: "–ì–æ–≤—è–¥–∏–Ω–∞", amount: 0.3 },
        { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", amount: 0.2 },
        { name: "–õ—É–∫", amount: 0.1 },
        { name: "–ú–æ—Ä–∫–æ–≤—å", amount: 0.1 },
      ],
      '–¢–∞—Ç–∞—Ä—Å–∫–æ–µ –ø–µ—á–µ–Ω—å–µ "–ë–∞—Ä–º–∞–∫"': [
        { name: "–ú—É–∫–∞", amount: 0.15 },
        { name: "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", amount: 0.1 },
        { name: "–°–∞—Ö–∞—Ä", amount: 0.08 },
        { name: "–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ", amount: 0.1 },
      ],
    };
    return (
      ingredientsMap[dishName] || [
        { name: "–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", amount: 0.5 },
      ]
    );
  };

  const getIngredientPrice = (ingredient) => {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Ü–µ–Ω –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    const prices = {
      // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
      "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞": 300,
      –∫—É—Ä–∏—Ü–∞: 300,
      "–∫—É—Ä–∏–Ω–æ–µ –º—è—Å–æ": 300,
      –ì–æ–≤—è–¥–∏–Ω–∞: 500,
      "–≥–æ–≤—è–∂—å–µ –º—è—Å–æ": 500,
      "–≥–æ–≤—è–∂–∏–π —Ñ–∞—Ä—à": 450,
      –°–≤–∏–Ω–∏–Ω–∞: 400,
      "—Å–≤–∏–Ω–æ–µ –º—è—Å–æ": 400,
      "—Å–≤–∏–Ω–æ–π —Ñ–∞—Ä—à": 350,
      –ë–∞—Ä–∞–Ω–∏–Ω–∞: 600,
      "–±–∞—Ä–∞–Ω—å–µ –º—è—Å–æ": 600,
      –†—ã–±–∞: 300,
      –ª–æ—Å–æ—Å—å: 800,
      —Ç—Ä–µ—Å–∫–∞: 400,
      –º–∏–Ω—Ç–∞–π: 200,

      // –û–≤–æ—â–∏
      –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å: 50,
      –∫–∞—Ä—Ç–æ—à–∫–∞: 50,
      –õ—É–∫: 80,
      "–ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π": 80,
      "–ª—É–∫ –∑–µ–ª–µ–Ω—ã–π": 120,
      –ú–æ—Ä–∫–æ–≤—å: 60,
      –º–æ—Ä–∫–æ–≤–∫–∞: 60,
      –ü–æ–º–∏–¥–æ—Ä—ã: 150,
      –ø–æ–º–∏–¥–æ—Ä: 150,
      —Ç–æ–º–∞—Ç—ã: 150,
      –û–≥—É—Ä—Ü—ã: 120,
      –æ–≥—É—Ä–µ—Ü: 120,
      –ö–∞–ø—É—Å—Ç–∞: 40,
      "–∫–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è": 40,
      –ü–µ—Ä–µ—Ü: 200,
      "–ø–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π": 200,
      –ß–µ—Å–Ω–æ–∫: 300,
      —á–µ—Å–Ω–æ–∫: 300,

      // –ó–µ–ª–µ–Ω—å
      –°–∞–ª–∞—Ç: 150,
      "—Å–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥": 150,
      "—Å–∞–ª–∞—Ç –ª–∏—Å—Ç–æ–≤–æ–π": 150,
      –ü–µ—Ç—Ä—É—à–∫–∞: 100,
      –ø–µ—Ç—Ä—É—à–∫–∞: 100,
      –£–∫—Ä–æ–ø: 100,
      —É–∫—Ä–æ–ø: 100,
      –ë–∞–∑–∏–ª–∏–∫: 200,
      –±–∞–∑–∏–ª–∏–∫: 200,

      // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      –ú–æ–ª–æ–∫–æ: 80,
      –º–æ–ª–æ–∫–æ: 80,
      –°—ã—Ä: 400,
      —Å—ã—Ä: 400,
      –ø–∞—Ä–º–µ–∑–∞–Ω: 800,
      —á–µ–¥–¥–µ—Ä: 500,
      –¢–≤–æ—Ä–æ–≥: 200,
      —Ç–≤–æ—Ä–æ–≥: 200,
      –°–º–µ—Ç–∞–Ω–∞: 150,
      —Å–º–µ—Ç–∞–Ω–∞: 150,
      "–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ": 200,
      –º–∞—Å–ª–æ: 200,

      // –ö—Ä—É–ø—ã –∏ –º—É–∫–∞
      –ú—É–∫–∞: 40,
      –º—É–∫–∞: 40,
      "–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è": 40,
      –†–∏—Å: 80,
      —Ä–∏—Å: 80,
      "—Ä–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π": 100,
      –ì—Ä–µ—á–∫–∞: 100,
      –≥—Ä–µ—á–∫–∞: 100,
      –û–≤—Å—è–Ω–∫–∞: 60,
      –æ–≤—Å—è–Ω–∫–∞: 60,

      // –û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã
      "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏": 600,
      "–æ—Ä–µ—Ö–∏ –≥—Ä–µ—Ü–∫–∏–µ": 600,
      –ú–∏–Ω–¥–∞–ª—å: 800,
      –º–∏–Ω–¥–∞–ª—å: 800,
      –ò–∑—é–º: 300,
      –∏–∑—é–º: 300,

      // –°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã
      –°–æ–ª—å: 20,
      —Å–æ–ª—å: 20,
      "–ü–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π": 100,
      –ø–µ—Ä–µ—Ü: 100,
      "–õ–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—Ç": 50,
      –ª–∞–≤—Ä—É—à–∫–∞: 50,

      // –ú–∞—Å–ª–∞
      "–ú–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ": 100,
      "–º–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ": 100,
      "–ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ": 300,
      "–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": 300,

      // –Ø–π—Ü–∞
      –Ø–π—Ü–∞: 80,
      —è–π—Ü–æ: 80,
      "—è–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ": 80,

      // –°–∞—Ö–∞—Ä –∏ —Å–ª–∞–¥–æ—Å—Ç–∏
      –°–∞—Ö–∞—Ä: 60,
      —Å–∞—Ö–∞—Ä: 60,
      "—Å–∞—Ö–∞—Ä –ø–µ—Å–æ–∫": 60,
      –ú–µ–¥: 300,
      –º–µ–¥: 300,

      // –ö–æ–Ω—Å–µ—Ä–≤—ã
      –¢—É—à–µ–Ω–∫–∞: 200,
      "—Ç—É—à–µ–Ω–∫–∞ –≥–æ–≤—è–∂—å—è": 200,
      –ö–æ–Ω—Å–µ—Ä–≤—ã: 150,
      "–∫–æ–Ω—Å–µ—Ä–≤—ã —Ä—ã–±–Ω—ã–µ": 150,
    };

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const normalizedIngredient = ingredient.toLowerCase().trim();

    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const [key, price] of Object.entries(prices)) {
      if (key.toLowerCase() === normalizedIngredient) {
        return price;
      }
    }

    // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const [key, price] of Object.entries(prices)) {
      if (
        normalizedIngredient.includes(key.toLowerCase()) ||
        key.toLowerCase().includes(normalizedIngredient)
      ) {
        return price;
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    return 150;
  };

  const generateRecommendations = useCallback((orders) => {
    console.log("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:", orders);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
    const dishPortions = {};
    let totalOrders = 0;

    orders.forEach((order) => {
      totalOrders++;
      order.items?.forEach((item) => {
        console.log(
          "üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä:",
          item.name,
          "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
          item.quantity
        );

        // –°—É–º–º–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
        dishPortions[item.name] =
          (dishPortions[item.name] || 0) + item.quantity;
      });
    });

    console.log("üçΩÔ∏è –¢–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –±–ª—é–¥:", dishPortions);
    console.log("üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:", totalOrders);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    const recommendations = [];

    // –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –ø–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const chefId = localStorage.getItem("chefId") || "demo-chef-1";
    const chefDishes = getChefDishes(chefId);

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞ —Å —Ç–æ—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
    const topDishes = Object.entries(dishPortions)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –±–ª—é–¥

    topDishes.forEach(([dishName, totalPortions], index) => {
      // –ù–∞—Ö–æ–¥–∏–º –±–ª—é–¥–æ –≤ –º–µ–Ω—é –ø–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
      const dish = chefDishes.find((d) => d.name === dishName);
      const dishPrice = dish ? dish.price : 200; // Fallback —Ü–µ–Ω–∞

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –∑–∞–ø–∞—Å–æ–º
      const recommendedPortions = Math.ceil(totalPortions * 1.2); // +20% –∑–∞–ø–∞—Å

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const estimatedCost = recommendedPortions * dishPrice;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
      let priority = "low";
      if (totalPortions >= 5) priority = "high";
      else if (totalPortions >= 3) priority = "medium";

      recommendations.push({
        id: `dish-${index}`,
        type: "dish",
        name: dishName,
        priority: priority,
        reason: `–ó–∞–∫–∞–∑–∞–Ω–æ ${totalPortions} –ø–æ—Ä—Ü–∏–π –≤ ${totalOrders} –∑–∞–∫–∞–∑–∞—Ö`,
        suggestedAmount: recommendedPortions,
        unit: "–ø–æ—Ä—Ü–∏–π",
        estimatedCost: estimatedCost,
        icon: "üçΩÔ∏è",
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        actualPortions: totalPortions,
        dishPrice: dishPrice,
      });
    });

    // –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const seasonalRecommendations = getSeasonalRecommendations();
    recommendations.push(...seasonalRecommendations);

    console.log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", recommendations);
    setRecommendations(recommendations);
  }, []);

  const getSeasonalRecommendations = () => {
    const month = new Date().getMonth();
    const seasonal = [];

    if (month >= 2 && month <= 4) {
      // –í–µ—Å–Ω–∞
      seasonal.push({
        id: "seasonal-spring-1",
        type: "seasonal",
        name: "–°–≤–µ–∂–∞—è –∑–µ–ª–µ–Ω—å",
        priority: "medium",
        reason: "–í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω - –≤—Ä–µ–º—è –¥–ª—è —Å–≤–µ–∂–∏—Ö —Å–∞–ª–∞—Ç–æ–≤",
        suggestedAmount: 2,
        unit: "–∫–≥",
        estimatedCost: 300,
        icon: "üå±",
      });
    }

    if (month >= 5 && month <= 7) {
      // –õ–µ—Ç–æ
      seasonal.push({
        id: "seasonal-summer-1",
        type: "seasonal",
        name: "–°–µ–∑–æ–Ω–Ω—ã–µ –æ–≤–æ—â–∏",
        priority: "high",
        reason: "–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω - –∏–∑–æ–±–∏–ª–∏–µ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π",
        suggestedAmount: 5,
        unit: "–∫–≥",
        estimatedCost: 500,
        icon: "üçÖ",
      });
    }

    return seasonal;
  };

  const loadOrders = useCallback(async () => {
    try {
      setLoading(true);
      const clientOrders = JSON.parse(
        localStorage.getItem("clientOrders") || "[]"
      );
      const chefId = localStorage.getItem("chefId") || "demo-chef-1";

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–≤–∞—Ä–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      const now = new Date();
      const periodStart = new Date();

      switch (selectedPeriod) {
        case "week":
          periodStart.setDate(now.getDate() - 7);
          break;
        case "month":
          periodStart.setMonth(now.getMonth() - 1);
          break;
        case "quarter":
          periodStart.setMonth(now.getMonth() - 3);
          break;
        default:
          periodStart.setDate(now.getDate() - 7);
      }

      const chefOrders = clientOrders.filter((order) => {
        const orderDate = new Date(order.createdAt);
        return (
          order.items?.some((item) => item.chefId === chefId) &&
          orderDate >= periodStart
        );
      });

      setOrders(chefOrders);
      generateRecommendations(chefOrders);
    } catch (error) {
      console.error("Error loading orders:", error);
      showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤");
    } finally {
      setLoading(false);
    }
  }, [selectedPeriod, showError, generateRecommendations]);

  useEffect(() => {
    loadOrders();
  }, [loadOrders]);

  const getPriorityColor = (priority) => {
    switch (priority) {
      case "high":
        return "#e74c3c";
      case "medium":
        return "#f39c12";
      case "low":
        return "#27ae60";
      default:
        return "#95a5a6";
    }
  };

  const getPriorityText = (priority) => {
    switch (priority) {
      case "high":
        return "–í—ã—Å–æ–∫–∏–π";
      case "medium":
        return "–°—Ä–µ–¥–Ω–∏–π";
      case "low":
        return "–ù–∏–∑–∫–∏–π";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  const createTestOrder = () => {
    try {
      const chefId = localStorage.getItem("chefId") || "demo-chef-1";
      const testOrder = {
        id: `test-order-${Date.now()}`,
        chefId: chefId,
        customer: {
          name: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
          phone: "+7 (999) 123-45-67",
          address: "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
        },
        items: [
          {
            id: "test-item-1",
            name: "–ë–æ—Ä—â",
            quantity: 2,
            price: 350,
            chefId: chefId,
          },
          {
            id: "test-item-2",
            name: "–ü–ª–æ–≤ —É–∑–±–µ–∫—Å–∫–∏–π",
            quantity: 1,
            price: 450,
            chefId: chefId,
          },
        ],
        total: 1150,
        status: "delivered",
        createdAt: new Date().toISOString(),
        delivery: {
          date: new Date().toISOString().split("T")[0],
          time: "12:00",
        },
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
      const existingOrders = JSON.parse(
        localStorage.getItem("clientOrders") || "[]"
      );
      const updatedOrders = [testOrder, ...existingOrders];
      localStorage.setItem("clientOrders", JSON.stringify(updatedOrders));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      setOrders(updatedOrders);

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      generateRecommendations(updatedOrders);

      showSuccess("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
    } catch (error) {
      console.error("Error creating test order:", error);
      showError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞");
    }
  };

  const handleAddToShoppingList = (recommendation) => {
    try {
      const shoppingList = JSON.parse(
        localStorage.getItem("chefShoppingList") || "[]"
      );

      // –ï—Å–ª–∏ —ç—Ç–æ –±–ª—é–¥–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      if (recommendation.type === "dish") {
        const chefId = localStorage.getItem("chefId") || "demo-chef-1";
        const chefDishes = getChefDishes(chefId);
        const ingredients = getRealDishIngredients(
          recommendation.name,
          chefDishes
        );

        console.log(
          "üçΩÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:",
          recommendation.name
        );
        console.log("ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", ingredients);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        ingredients.forEach((ingredient) => {
          const existingItem = shoppingList.find(
            (item) => item.name === ingredient.name
          );

          if (existingItem) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            existingItem.suggestedAmount += Math.ceil(
              ingredient.amount * recommendation.suggestedAmount
            );
            existingItem.estimatedCost = Math.ceil(
              existingItem.suggestedAmount * getIngredientPrice(ingredient.name)
            );
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            shoppingList.push({
              id: `ingredient-${Date.now()}-${Math.random()}`,
              type: "ingredient",
              name: ingredient.name,
              priority: recommendation.priority,
              reason: `–ò–∑ –±–ª—é–¥–∞: ${recommendation.name}`,
              suggestedAmount: Math.ceil(
                ingredient.amount * recommendation.suggestedAmount
              ),
              unit: ingredient.unit || "–∫–≥",
              estimatedCost: Math.ceil(
                ingredient.amount *
                  recommendation.suggestedAmount *
                  getIngredientPrice(ingredient.name)
              ),
              icon: getIngredientIcon(ingredient.name),
              addedAt: new Date().toISOString(),
              purchased: false,
            });
          }
        });
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–ª—é–¥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        const existingItem = shoppingList.find(
          (item) => item.name === recommendation.name
        );

        if (existingItem) {
          existingItem.suggestedAmount += recommendation.suggestedAmount;
          existingItem.estimatedCost += recommendation.estimatedCost;
        } else {
          shoppingList.push({
            ...recommendation,
            addedAt: new Date().toISOString(),
            purchased: false,
          });
        }
      }

      localStorage.setItem("chefShoppingList", JSON.stringify(shoppingList));

      // –û—Ç–º–µ—á–∞–µ–º –±–ª—é–¥–æ –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      setAddedToShoppingList((prev) => new Set([...prev, recommendation.id]));
      setRemovedRecommendations(
        (prev) => new Set([...prev, recommendation.id])
      );

      showSuccess(
        `${recommendation.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`
      );
    } catch (error) {
      console.error("Error adding to shopping list:", error);
      showError("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫");
    }
  };

  const handleRestoreRecommendation = (recommendationId) => {
    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      setRemovedRecommendations((prev) => {
        const newSet = new Set(prev);
        newSet.delete(recommendationId);
        return newSet;
      });

      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ø–æ–∫—É–ø–∫–∏
      setAddedToShoppingList((prev) => {
        const newSet = new Set(prev);
        newSet.delete(recommendationId);
        return newSet;
      });

      showSuccess("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    } catch (error) {
      console.error("Error restoring recommendation:", error);
      showError("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
    }
  };

  if (loading) {
    return (
      <div className="chef-procurement-modal-overlay">
        <div className="chef-procurement-modal">
          <div style={{ textAlign: "center", padding: "40px" }}>
            <div className="loading-spinner"></div>
            <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="chef-procurement-modal-overlay" onClick={onClose}>
      <div
        className="chef-procurement-modal"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="chef-procurement-header">
          <h3>ü§ñ AI –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–∫—É–ø–æ–∫</h3>
          <button onClick={onClose} className="back-button">
            ‚úï
          </button>
        </div>

        <div className="chef-procurement-content">
          {/* –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ */}
          <div className="period-selector">
            <h4>üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞</h4>
            <div className="period-buttons">
              <button
                className={selectedPeriod === "week" ? "active" : ""}
                onClick={() => setSelectedPeriod("week")}
              >
                –ù–µ–¥–µ–ª—è
              </button>
              <button
                className={selectedPeriod === "month" ? "active" : ""}
                onClick={() => setSelectedPeriod("month")}
              >
                –ú–µ—Å—è—Ü
              </button>
              <button
                className={selectedPeriod === "quarter" ? "active" : ""}
                onClick={() => setSelectedPeriod("quarter")}
              >
                –ö–≤–∞—Ä—Ç–∞–ª
              </button>
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="procurement-stats">
            <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</h4>
            <div className="stats-grid">
              <div className="stat-item">
                <div className="stat-number">{orders.length}</div>
                <div className="stat-label">–ó–∞–∫–∞–∑–æ–≤</div>
              </div>
              <div className="stat-item">
                <div className="stat-number">
                  {orders.reduce(
                    (sum, order) => sum + (order.items?.length || 0),
                    0
                  )}
                </div>
                <div className="stat-label">–ë–ª—é–¥</div>
              </div>
              <div className="stat-item">
                <div className="stat-number">
                  {orders.reduce((sum, order) => sum + (order.total || 0), 0)}‚ÇΩ
                </div>
                <div className="stat-label">–í—ã—Ä—É—á–∫–∞</div>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ */}
          <div className="test-actions">
            <button
              onClick={createTestOrder}
              className="create-test-order-btn"
              style={{
                background: "#007bff",
                color: "white",
                border: "none",
                borderRadius: "8px",
                padding: "10px 20px",
                cursor: "pointer",
                fontSize: "14px",
                fontWeight: "bold",
                marginBottom: "20px",
              }}
            >
              üß™ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
            </button>
          </div>

          {/* –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {removedRecommendations.size > 0 && (
            <div className="recommendations-section">
              <h4>üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
              <div className="recommendations-list">
                {recommendations
                  .filter((recommendation) =>
                    removedRecommendations.has(recommendation.id)
                  )
                  .map((recommendation) => (
                    <div
                      key={recommendation.id}
                      className="recommendation-card"
                      style={{ opacity: 0.7, border: "2px dashed #ccc" }}
                    >
                      <div className="recommendation-header">
                        <div className="recommendation-icon">
                          {recommendation.icon}
                        </div>
                        <div className="recommendation-info">
                          <h5>{recommendation.name}</h5>
                          <p className="recommendation-reason">
                            {recommendation.reason}
                          </p>
                        </div>
                        <div className="recommendation-priority">
                          <span
                            className="priority-badge"
                            style={{
                              backgroundColor: getPriorityColor(
                                recommendation.priority
                              ),
                            }}
                          >
                            {getPriorityText(recommendation.priority)}
                          </span>
                        </div>
                      </div>

                      <div className="recommendation-details">
                        <div className="detail-item">
                          <strong>–ó–∞–∫–∞–∑–∞–Ω–æ –ø–æ—Ä—Ü–∏–π:</strong>{" "}
                          {recommendation.actualPortions || 0}
                        </div>
                        <div className="detail-item">
                          <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</strong>{" "}
                          {recommendation.suggestedAmount} {recommendation.unit}{" "}
                          (+20% –∑–∞–ø–∞—Å)
                        </div>
                        <div className="detail-item">
                          <strong>–¶–µ–Ω–∞ –∑–∞ –ø–æ—Ä—Ü–∏—é:</strong>{" "}
                          {recommendation.dishPrice || 200}‚ÇΩ
                        </div>
                        <div className="detail-item">
                          <strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong>{" "}
                          {recommendation.estimatedCost}‚ÇΩ
                        </div>
                      </div>

                      <div className="recommendation-actions">
                        <button
                          className="add-to-list-btn"
                          onClick={() =>
                            handleRestoreRecommendation(recommendation.id)
                          }
                          style={{ background: "#28a745", color: "white" }}
                        >
                          üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          <div className="recommendations-section">
            <h4>üí° AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
            <div className="recommendations-list">
              {recommendations
                .filter(
                  (recommendation) =>
                    !removedRecommendations.has(recommendation.id)
                )
                .map((recommendation) => (
                  <div key={recommendation.id} className="recommendation-card">
                    <div className="recommendation-header">
                      <div className="recommendation-icon">
                        {recommendation.icon}
                      </div>
                      <div className="recommendation-info">
                        <h5>{recommendation.name}</h5>
                        <p className="recommendation-reason">
                          {recommendation.reason}
                        </p>
                      </div>
                      <div className="recommendation-priority">
                        <span
                          className="priority-badge"
                          style={{
                            backgroundColor: getPriorityColor(
                              recommendation.priority
                            ),
                          }}
                        >
                          {getPriorityText(recommendation.priority)}
                        </span>
                      </div>
                    </div>

                    <div className="recommendation-details">
                      <div className="detail-item">
                        <strong>–ó–∞–∫–∞–∑–∞–Ω–æ –ø–æ—Ä—Ü–∏–π:</strong>{" "}
                        {recommendation.actualPortions || 0}
                      </div>
                      <div className="detail-item">
                        <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</strong>{" "}
                        {recommendation.suggestedAmount} {recommendation.unit}{" "}
                        (+20% –∑–∞–ø–∞—Å)
                      </div>
                      <div className="detail-item">
                        <strong>–¶–µ–Ω–∞ –∑–∞ –ø–æ—Ä—Ü–∏—é:</strong>{" "}
                        {recommendation.dishPrice || 200}‚ÇΩ
                      </div>
                      <div className="detail-item">
                        <strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong>{" "}
                        {recommendation.estimatedCost}‚ÇΩ
                      </div>
                    </div>

                    <div className="recommendation-actions">
                      <button
                        className={`add-to-list-btn ${
                          addedToShoppingList.has(recommendation.id)
                            ? "added"
                            : ""
                        }`}
                        onClick={() => handleAddToShoppingList(recommendation)}
                        disabled={addedToShoppingList.has(recommendation.id)}
                      >
                        {addedToShoppingList.has(recommendation.id)
                          ? "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ"
                          : "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"}
                      </button>
                    </div>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChefProcurementPlanner;

import React, { useState, useEffect, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useLanguage } from '../contexts/LanguageContext';
import { useToast } from '../contexts/ToastContext';
import { safeSetClientOrders } from '../utils/safeStorage';
import OrderHistory from './OrderHistory';
import FeedbackModal from './FeedbackModal';
import CourierTracking from './CourierTracking';

const ClientOrders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  // eslint-disable-next-line no-unused-vars
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackOrderId, setFeedbackOrderId] = useState(null);
  const [showTracking, setShowTracking] = useState(false);
  const [trackingOrderId, setTrackingOrderId] = useState(null);
  const { t } = useLanguage();
  const { showSuccess, showError } = useToast();
  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
  const loadOrdersAndRequests = useCallback(() => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      const savedOrders = localStorage.getItem('clientOrders');
      let orders = [];
      if (savedOrders) {
        orders = JSON.parse(savedOrders);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
      const savedRequests = localStorage.getItem('cookingRequests');
      let cookingRequests = [];
      if (savedRequests) {
        cookingRequests = JSON.parse(savedRequests);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–æ–≤
      const convertedRequests = cookingRequests.map(request => ({
        id: `cooking-${request.id}`,
        dishes: request.dishes || [],
        totalPrice: request.budget || 0,
        status: request.status || 'pending',
        createdAt: request.createdAt,
        deliveryAddress: request.address || '',
        deliveryTime: request.preferredTime || '',
        notes: request.specialRequests || '',
        type: 'cooking_request',
        originalRequest: request
      }));

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –∏ –∑–∞–ø—Ä–æ—Å—ã
      const allOrders = [...orders, ...convertedRequests];
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      allOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      setOrders(allOrders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  }, [showError]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('authToken');
    const role = localStorage.getItem('role');
    
    if (!token || role !== 'client') {
      navigate('/client/login');
      return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
    loadOrdersAndRequests();

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    loadNotifications();
    
    setLoading(false);
  }, [navigate, loadOrdersAndRequests]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (orders.length > 0) {
      const highlightOrderId = localStorage.getItem('highlightOrderId');
      if (highlightOrderId) {
        // –£–¥–∞–ª—è–µ–º ID –∏–∑ localStorage
        localStorage.removeItem('highlightOrderId');
        
        // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID
        const orderElement = document.getElementById(`order-${highlightOrderId}`);
        if (orderElement) {
          // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∑–∞–∫–∞–∑—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
          orderElement.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
          });
          
          // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∑–∞–∫–∞–∑
          orderElement.style.backgroundColor = '#fff3cd';
          orderElement.style.border = '2px solid #ffc107';
          orderElement.style.borderRadius = '8px';
          orderElement.style.transition = 'all 0.3s ease';
          
          // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            orderElement.style.backgroundColor = '';
            orderElement.style.border = '';
            orderElement.style.borderRadius = '';
          }, 3000);
        }
      }
    }
  }, [orders]);

  const loadNotifications = () => {
    try {
      const savedNotifications = localStorage.getItem('clientNotifications');
      if (savedNotifications) {
        const parsedNotifications = JSON.parse(savedNotifications);
        setNotifications(parsedNotifications);
        const unread = parsedNotifications.filter(n => !n.read).length;
        setUnreadCount(unread);
      }
    } catch (err) {
      console.error('Error loading notifications:', err);
    }
  };

  const checkForDeliveredOrders = useCallback(() => {
    try {
      const deliveredOrders = orders.filter(order => 
        order.status === 'delivered' && 
        !order.feedbackGiven
      );
      
      if (deliveredOrders.length > 0) {
        const latestOrder = deliveredOrders[0];
        setFeedbackOrderId(latestOrder.id);
        setShowFeedback(true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    }
  }, [orders]);

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === 'clientNotifications') {
        loadNotifications();
      } else if (e.key === 'cookingRequests') {
        loadOrdersAndRequests();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [loadOrdersAndRequests]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–¥–±–µ–∫–∞
  useEffect(() => {
    if (orders.length > 0) {
      checkForDeliveredOrders();
    }
  }, [orders, checkForDeliveredOrders]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏
  const handleRateOrder = (orderId, rating) => {
    console.log('‚≠ê RATING ORDER:', orderId, 'with rating:', rating);
    
    const updatedOrders = orders.map(order => 
      order.id === orderId 
        ? { ...order, rating, ratedAt: new Date().toISOString(), chefId: 'chef-1' }
        : order
    );
    setOrders(updatedOrders);
    safeSetClientOrders(updatedOrders);
    
    console.log('‚≠ê Updated orders:', updatedOrders);
    console.log('‚≠ê Order rated:', orderId, 'Rating:', rating);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    const savedData = localStorage.getItem('clientOrders');
    console.log('‚≠ê Saved to localStorage:', savedData);
    const parsedData = JSON.parse(savedData || '[]');
    console.log('‚≠ê Parsed from localStorage:', parsedData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–≤–∞—Ä–∞
    const event = new CustomEvent('orderRated', { 
      detail: { orderId, rating, chefId: 'chef-1' } 
    });
    console.log('‚≠ê Dispatching orderRated event:', event);
    window.dispatchEvent(event);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ storage –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const storageEvent = new StorageEvent('storage', {
      key: 'clientOrders',
      newValue: JSON.stringify(updatedOrders)
    });
    console.log('‚≠ê Dispatching storage event:', storageEvent);
    window.dispatchEvent(storageEvent);
  };

  const handleAddReview = (orderId, review) => {
    console.log('üí¨ ADDING REVIEW to order:', orderId, review);
    
    const updatedOrders = orders.map(order => 
      order.id === orderId 
        ? { 
            ...order, 
            reviews: [...(order.reviews || []), review]
          }
        : order
    );
    
    console.log('üí¨ Updated orders with review:', updatedOrders);
    setOrders(updatedOrders);
    safeSetClientOrders(updatedOrders);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–≤–∞—Ä–∞
    const event = new CustomEvent('reviewAdded', { 
      detail: { orderId, review, chefId: 'chef-1' } 
    });
    console.log('üí¨ Dispatching reviewAdded event:', event);
    window.dispatchEvent(event);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ storage –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const storageEvent = new StorageEvent('storage', {
      key: 'clientOrders',
      newValue: JSON.stringify(updatedOrders)
    });
    console.log('üí¨ Dispatching storage event:', storageEvent);
    window.dispatchEvent(storageEvent);
  };

  const handleUpdateReview = (orderId, updatedReview) => {
    const updatedOrders = orders.map(order => 
      order.id === orderId 
        ? { 
            ...order, 
            reviews: order.reviews?.map(review => 
              review.id === updatedReview.id ? updatedReview : review
            ) || []
          }
        : order
    );
    setOrders(updatedOrders);
    safeSetClientOrders(updatedOrders);
  };

  const handleDeleteReview = (orderId, reviewId) => {
    const updatedOrders = orders.map(order => 
      order.id === orderId 
        ? { 
            ...order, 
            reviews: order.reviews?.filter(review => review.id !== reviewId) || []
          }
        : order
    );
    setOrders(updatedOrders);
    safeSetClientOrders(updatedOrders);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const handleReorder = (order) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const newCartItems = order.items.map(item => ({
      ...item,
      id: `${item.id}-${Date.now()}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      quantity: item.quantity
    }));
    
    const updatedCart = [...cart, ...newCartItems];
    localStorage.setItem('cart', JSON.stringify(updatedCart));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    showSuccess(t.reorderSuccess);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    navigate('/client/cart');
  };

  const handleTrackCourier = (orderId) => {
    setTrackingOrderId(orderId);
    setShowTracking(true);
  };

  if (loading) {
    return (
      <div className="client-orders-container">
        <div className="loading">{t.loading}...</div>
      </div>
    );
  }

  return (
    <div className="client-orders-container">
      <header className="orders-header">
        <h1>
          {t.myOrders}
          {unreadCount > 0 && (
            <span className="notification-badge" style={{
              background: '#e74c3c',
              color: 'white',
              borderRadius: '50%',
              padding: '4px 8px',
              fontSize: '12px',
              fontWeight: 'bold',
              marginLeft: '10px',
              display: 'inline-block',
              minWidth: '20px',
              textAlign: 'center',
              animation: 'pulse 2s infinite'
            }}>
              üîî {unreadCount}
            </span>
          )}
        </h1>
        <div className="orders-actions">
          <Link to="/client/menu" className="back-to-menu">‚Üê {t.backToMenu}</Link>
        </div>
      </header>

      <OrderHistory
        orders={orders}
        onRateOrder={handleRateOrder}
        onAddReview={handleAddReview}
        onUpdateReview={handleUpdateReview}
        onDeleteReview={handleDeleteReview}
        onReorder={handleReorder}
        onTrackCourier={handleTrackCourier}
      />

      {showFeedback && (
        <FeedbackModal
          orderId={feedbackOrderId}
          onClose={() => {
            setShowFeedback(false);
            setFeedbackOrderId(null);
          }}
          onSubmit={(feedback) => {
            // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –ø–æ–ª—É—á–∏–≤—à–∏–π —Ñ–∏–¥–±–µ–∫
            const updatedOrders = orders.map(order => 
              order.id === feedbackOrderId 
                ? { ...order, feedbackGiven: true }
                : order
            );
            setOrders(updatedOrders);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            safeSetClientOrders(updatedOrders);
          }}
        />
      )}

      {showTracking && (
        <CourierTracking
          orderId={trackingOrderId}
          onClose={() => {
            setShowTracking(false);
            setTrackingOrderId(null);
          }}
        />
      )}
    </div>
  );
};

export default ClientOrders;
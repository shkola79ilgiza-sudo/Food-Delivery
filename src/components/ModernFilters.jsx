import React, { useState } from 'react';

const ModernFilters = ({ 
  filters, 
  onFilterChange, 
  onClearFilters,
  isOpen,
  onToggle 
}) => {
  const [localFilters, setLocalFilters] = useState(filters);

  const handleFilterChange = (filterType, value) => {
    const newFilters = {
      ...localFilters,
      [filterType]: value
    };
    setLocalFilters(newFilters);
    onFilterChange(newFilters);
  };

  const handleClearFilters = () => {
    const clearedFilters = {
      cuisine: 'all',
      halal: false,
      diet: 'all',
      priceRange: { min: 0, max: 5000 },
      cookingTime: 'all',
      allergens: [],
      vegetarian: false,
      spicy: false,
      new: false
    };
    setLocalFilters(clearedFilters);
    onClearFilters();
  };

  const filterOptions = {
    cuisine: [
      { value: 'all', label: '–í—Å–µ –∫—É—Ö–Ω–∏', icon: 'üåç' },
      { value: 'russian', label: '–†—É—Å—Å–∫–∞—è', icon: 'üá∑üá∫' },
      { value: 'asian', label: '–ê–∑–∏–∞—Ç—Å–∫–∞—è', icon: 'üçú' },
      { value: 'european', label: '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è', icon: 'üçù' },
      { value: 'middle_eastern', label: '–ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è', icon: 'ü•ô' }
    ],
    diet: [
      { value: 'all', label: '–í—Å–µ', icon: 'üçΩÔ∏è' },
      { value: 'vegetarian', label: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ', icon: 'ü•ó' },
      { value: 'vegan', label: '–í–µ–≥–∞–Ω—Å–∫–æ–µ', icon: 'üå±' },
      { value: 'keto', label: '–ö–µ—Ç–æ', icon: 'ü•ë' },
      { value: 'low_carb', label: '–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ', icon: 'ü•©' }
    ],
    cookingTime: [
      { value: 'all', label: '–õ—é–±–æ–µ –≤—Ä–µ–º—è', icon: '‚è∞' },
      { value: 'fast', label: '–ë—ã—Å—Ç—Ä–æ (–¥–æ 15 –º–∏–Ω)', icon: '‚ö°' },
      { value: 'medium', label: '–°—Ä–µ–¥–Ω–µ (15-30 –º–∏–Ω)', icon: 'üïê' },
      { value: 'slow', label: '–î–æ–ª–≥–æ (30+ –º–∏–Ω)', icon: 'üïë' }
    ]
  };

  const specialFilters = [
    { key: 'halal', label: '–•–∞–ª—è–ª—å', icon: 'üïå' },
    { key: 'vegetarian', label: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ', icon: 'ü•ó' },
    { key: 'spicy', label: '–û—Å—Ç—Ä–æ–µ', icon: 'üå∂Ô∏è' },
    { key: 'new', label: '–ù–æ–≤–∏–Ω–∫–∏', icon: '‚ú®' }
  ];

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <button 
        className="filter-toggle-btn"
        onClick={onToggle}
        style={{
          position: 'fixed',
          bottom: '20px',
          right: '20px',
          background: 'linear-gradient(135deg, #ff6b35 0%, #f7931e 100%)',
          color: 'white',
          border: 'none',
          borderRadius: '50px',
          padding: '15px 20px',
          fontSize: '0.9rem',
          fontWeight: '600',
          cursor: 'pointer',
          boxShadow: '0 4px 15px rgba(255, 107, 53, 0.3)',
          zIndex: 100,
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          transition: 'all 0.3s ease'
        }}
      >
        üîç –§–∏–ª—å—Ç—Ä—ã
      </button>

      {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      {isOpen && (
        <div className="modern-filters" style={{
          position: 'fixed',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: '90%',
          maxWidth: '500px',
          maxHeight: '80vh',
          overflowY: 'auto',
          zIndex: 1001,
          animation: 'bounceIn 0.4s ease'
        }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
            <h3 style={{ margin: 0, color: '#2c3e50' }}>üîç –§–∏–ª—å—Ç—Ä—ã</h3>
            <button 
              onClick={onToggle}
              style={{
                background: 'none',
                border: 'none',
                fontSize: '1.5rem',
                cursor: 'pointer',
                color: '#95a5a6'
              }}
            >
              ‚úï
            </button>
          </div>

          {/* –ö—É—Ö–Ω—è */}
          <div className="filter-group">
            <label className="filter-label">–ö—É—Ö–Ω—è</label>
            <div className="filter-chips">
              {filterOptions.cuisine.map(option => (
                <button
                  key={option.value}
                  className={`filter-chip ${localFilters.cuisine === option.value ? 'active' : ''}`}
                  onClick={() => handleFilterChange('cuisine', option.value)}
                >
                  <span>{option.icon}</span>
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –î–∏–µ—Ç–∞ */}
          <div className="filter-group">
            <label className="filter-label">–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è</label>
            <div className="filter-chips">
              {filterOptions.diet.map(option => (
                <button
                  key={option.value}
                  className={`filter-chip ${localFilters.diet === option.value ? 'active' : ''}`}
                  onClick={() => handleFilterChange('diet', option.value)}
                >
                  <span>{option.icon}</span>
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è */}
          <div className="filter-group">
            <label className="filter-label">–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</label>
            <div className="filter-chips">
              {filterOptions.cookingTime.map(option => (
                <button
                  key={option.value}
                  className={`filter-chip ${localFilters.cookingTime === option.value ? 'active' : ''}`}
                  onClick={() => handleFilterChange('cookingTime', option.value)}
                >
                  <span>{option.icon}</span>
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="filter-group">
            <label className="filter-label">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</label>
            <div className="filter-chips">
              {specialFilters.map(filter => (
                <button
                  key={filter.key}
                  className={`filter-chip ${localFilters[filter.key] ? 'active' : ''}`}
                  onClick={() => handleFilterChange(filter.key, !localFilters[filter.key])}
                >
                  <span>{filter.icon}</span>
                  {filter.label}
                </button>
              ))}
            </div>
          </div>

          {/* –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω */}
          <div className="filter-group">
            <label className="filter-label">
              –¶–µ–Ω–∞: {localFilters.priceRange.min} - {localFilters.priceRange.max} ‚ÇΩ
            </label>
            <input
              type="range"
              min="0"
              max="5000"
              step="100"
              value={localFilters.priceRange.max}
              onChange={(e) => handleFilterChange('priceRange', {
                ...localFilters.priceRange,
                max: parseInt(e.target.value)
              })}
              style={{
                width: '100%',
                height: '6px',
                borderRadius: '3px',
                background: 'linear-gradient(to right, #ff6b35, #f7931e)',
                outline: 'none'
              }}
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
            <button
              onClick={handleClearFilters}
              style={{
                flex: 1,
                background: '#ecf0f1',
                color: '#7f8c8d',
                border: 'none',
                borderRadius: '8px',
                padding: '12px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={onToggle}
              style={{
                flex: 1,
                background: 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* Overlay */}
      {isOpen && (
        <div 
          onClick={onToggle}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.5)',
            zIndex: 1000
          }}
        />
      )}
    </>
  );
};

export default ModernFilters;

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useToast } from '../contexts/ToastContext';

const ChefSlotsCalendar = ({ chefId, onSlotsUpdate, onClose }) => {
  const navigate = useNavigate();
  const { showSuccess, showError } = useToast();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [slots, setSlots] = useState({});
  const [showAddSlot, setShowAddSlot] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);
  const [newSlot, setNewSlot] = useState({
    startTime: '',
    endTime: '',
    maxOrders: 10,
    priceMultiplier: 1.0,
    isActive: true
  });

  const timeSlots = [
    '06:00', '07:00', '08:00', '09:00', '10:00', '11:00',
    '12:00', '13:00', '14:00', '15:00', '16:00', '17:00',
    '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'
  ];

  const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  const months = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
  ];

  useEffect(() => {
    loadSlots();
  }, [chefId]);

  const loadSlots = () => {
    try {
      const savedSlots = localStorage.getItem(`chef_slots_${chefId}`) || '{}';
      setSlots(JSON.parse(savedSlots));
    } catch (error) {
      console.error('Error loading slots:', error);
      setSlots({});
    }
  };

  const saveSlots = (updatedSlots) => {
    try {
      localStorage.setItem(`chef_slots_${chefId}`, JSON.stringify(updatedSlots));
      setSlots(updatedSlots);
      if (onSlotsUpdate) {
        onSlotsUpdate(updatedSlots);
      }
    } catch (error) {
      console.error('Error saving slots:', error);
      showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤');
    }
  };

  const getDateKey = (date) => {
    return date.toISOString().split('T')[0];
  };

  const getWeekDates = (date) => {
    const startOfWeek = new Date(date);
    startOfWeek.setDate(date.getDate() - date.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    
    const weekDates = [];
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      weekDates.push(day);
    }
    return weekDates;
  };

  const toggleSlot = (date, timeSlot) => {
    const dateKey = getDateKey(date);
    const updatedSlots = { ...slots };
    
    if (!updatedSlots[dateKey]) {
      updatedSlots[dateKey] = {};
    }
    
    if (updatedSlots[dateKey][timeSlot]) {
      delete updatedSlots[dateKey][timeSlot];
    } else {
      updatedSlots[dateKey][timeSlot] = {
        startTime: timeSlot,
        endTime: getNextTimeSlot(timeSlot),
        maxOrders: 10,
        priceMultiplier: 1.0,
        isActive: true,
        currentOrders: 0
      };
    }
    
    saveSlots(updatedSlots);
  };

  const getNextTimeSlot = (currentSlot) => {
    const currentIndex = timeSlots.indexOf(currentSlot);
    return currentIndex < timeSlots.length - 1 ? timeSlots[currentIndex + 1] : '24:00';
  };

  const updateSlotSettings = (date, timeSlot, settings) => {
    const dateKey = getDateKey(date);
    const updatedSlots = { ...slots };
    
    if (updatedSlots[dateKey] && updatedSlots[dateKey][timeSlot]) {
      updatedSlots[dateKey][timeSlot] = {
        ...updatedSlots[dateKey][timeSlot],
        ...settings
      };
      saveSlots(updatedSlots);
    }
  };

  const copySlotsToWeek = () => {
    const weekDates = getWeekDates(selectedDate);
    const sourceDateKey = getDateKey(selectedDate);
    const sourceSlots = slots[sourceDateKey] || {};
    
    const updatedSlots = { ...slots };
    
    weekDates.forEach(date => {
      const dateKey = getDateKey(date);
      updatedSlots[dateKey] = { ...sourceSlots };
    });
    
    saveSlots(updatedSlots);
    showSuccess('–°–ª–æ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é!');
  };

  const clearDaySlots = (date) => {
    const dateKey = getDateKey(date);
    const updatedSlots = { ...slots };
    delete updatedSlots[dateKey];
    saveSlots(updatedSlots);
    showSuccess('–°–ª–æ—Ç—ã –¥–Ω—è –æ—á–∏—â–µ–Ω—ã!');
  };

  const getSlotStatus = (date, timeSlot) => {
    const dateKey = getDateKey(date);
    const slot = slots[dateKey]?.[timeSlot];
    
    if (!slot) return 'inactive';
    if (!slot.isActive) return 'disabled';
    if (slot.currentOrders >= slot.maxOrders) return 'full';
    return 'active';
  };

  const getSlotColor = (status) => {
    switch (status) {
      case 'active': return '#4CAF50';
      case 'full': return '#FF9800';
      case 'disabled': return '#9E9E9E';
      default: return '#E0E0E0';
    }
  };

  const weekDates = getWeekDates(currentDate);

  return (
    <div style={{
      background: 'rgba(255, 255, 255, 0.95)',
      borderRadius: '15px',
      padding: '20px',
      marginBottom: '20px',
      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
      backdropFilter: 'blur(10px)',
      border: '1px solid rgba(255, 255, 255, 0.2)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
          <button
            onClick={() => {
              console.log('üîç ChefSlotsCalendar - chefId:', chefId);
              console.log('üîç ChefSlotsCalendar - onClose available:', !!onClose);
              
              if (onClose) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è onClose, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                onClose();
              } else {
                // –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                try {
                  navigate(`/chef/${encodeURIComponent(chefId)}/menu`);
                } catch (error) {
                  console.error('‚ùå Navigation error:', error);
                  // Fallback to history back
                  window.history.back();
                }
              }
            }}
            style={{
              background: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              padding: '8px 12px',
              cursor: 'pointer',
              fontSize: '12px',
              display: 'flex',
              alignItems: 'center',
              gap: '5px'
            }}
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <h3 style={{ color: '#2D5016', margin: 0 }}>
            üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã
          </h3>
          <button
            onClick={() => setShowInstructions(!showInstructions)}
            style={{
              background: '#17a2b8',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              padding: '6px 10px',
              cursor: 'pointer',
              fontSize: '11px',
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              fontWeight: 'bold'
            }}
            title="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
          >
            ‚ùì –ü–æ–º–æ—â—å
          </button>
        </div>
        <div style={{ display: 'flex', gap: '10px' }}>
          <button
            onClick={() => setCurrentDate(new Date(currentDate.getTime() - 7 * 24 * 60 * 60 * 1000))}
            style={{
              background: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              padding: '8px 12px',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è
          </button>
          <button
            onClick={() => setCurrentDate(new Date())}
            style={{
              background: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              padding: '8px 12px',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            –°–µ–≥–æ–¥–Ω—è
          </button>
          <button
            onClick={() => setCurrentDate(new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000))}
            style={{
              background: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              padding: '8px 12px',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚Üí
          </button>
        </div>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é */}
      {showInstructions && (
        <div style={{
          background: 'linear-gradient(135deg, #e3f2fd, #f3e5f5)',
          borderRadius: '12px',
          padding: '20px',
          marginBottom: '20px',
          border: '2px solid #2196f3',
          boxShadow: '0 4px 12px rgba(33, 150, 243, 0.2)'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '15px'
          }}>
            <h4 style={{ color: '#1976d2', margin: 0, fontSize: '16px' }}>
              üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–ª–æ—Ç–æ–≤
            </h4>
            <button
              onClick={() => setShowInstructions(false)}
              style={{
                background: '#f44336',
                color: 'white',
                border: 'none',
                borderRadius: '50%',
                width: '24px',
                height: '24px',
                cursor: 'pointer',
                fontSize: '12px',
                fontWeight: 'bold'
              }}
            >
              √ó
            </button>
          </div>
          
          <div style={{ fontSize: '13px', lineHeight: '1.6', color: '#333' }}>
            <div style={{ marginBottom: '15px' }}>
              <strong style={{ color: '#1976d2' }}>üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</strong><br/>
              –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.
            </div>
            
            <div style={{ marginBottom: '15px' }}>
              <strong style={{ color: '#1976d2' }}>üñ±Ô∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong>
              <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                <li><strong>–ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ</strong> - –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Å–ª–æ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è</li>
                <li><strong>–ù–∞–≤–∏–≥–∞—Ü–∏—è</strong> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"</li>
                <li><strong>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</strong> - –Ω–∞–∂–º–∏—Ç–µ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é" —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è</li>
                <li><strong>–û—á–∏—Å—Ç–∫–∞</strong> - –∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å" —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–ª–æ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è</li>
              </ul>
            </div>
            
            <div style={{ marginBottom: '15px' }}>
              <strong style={{ color: '#1976d2' }}>üé® –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è:</strong>
              <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                <li><span style={{ color: '#4CAF50', fontWeight: 'bold' }}>üü¢ –ó–µ–ª–µ–Ω—ã–π</span> - –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤</li>
                <li><span style={{ color: '#FF9800', fontWeight: 'bold' }}>üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π</span> - –ó–∞–ø–æ–ª–Ω–µ–Ω (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤)</li>
                <li><span style={{ color: '#9E9E9E', fontWeight: 'bold' }}>‚ö´ –°–µ—Ä—ã–π</span> - –û—Ç–∫–ª—é—á–µ–Ω –ø–æ–≤–∞—Ä–æ–º</li>
                <li><span style={{ color: '#E0E0E0', fontWeight: 'bold' }}>‚ö™ –ë–µ–ª—ã–π</span> - –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</li>
              </ul>
            </div>
            
            <div style={{ marginBottom: '15px' }}>
              <strong style={{ color: '#1976d2' }}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç–∞:</strong>
              <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                <li><strong>–ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤</strong> - –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)</li>
                <li><strong>–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã</strong> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—É –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã</li>
                <li><strong>–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã</strong> - —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: —Ç–µ–∫—É—â–∏–µ/–º–∞–∫—Å–∏–º—É–º)</li>
              </ul>
            </div>
            
            <div style={{ marginBottom: '15px' }}>
              <strong style={{ color: '#1976d2' }}>üí° –°–æ–≤–µ—Ç—ã:</strong>
              <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                <li>–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–æ—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥</li>
                <li>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–∫–∞–∑–æ–≤</li>
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã</li>
                <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–¥–µ–ª–∏</li>
              </ul>
            </div>
            
            <div style={{
              background: '#fff3cd',
              border: '1px solid #ffeaa7',
              borderRadius: '6px',
              padding: '10px',
              fontSize: '12px',
              color: '#856404'
            }}>
              <strong>üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</strong> –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
            </div>
          </div>
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏ */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '60px repeat(7, 1fr)',
        gap: '5px',
        marginBottom: '10px',
        fontSize: '12px',
        fontWeight: 'bold',
        color: '#666'
      }}>
        <div style={{ textAlign: 'center' }}>–í—Ä–µ–º—è</div>
        {weekDates.map((date, index) => (
          <div key={index} style={{ textAlign: 'center' }}>
            {daysOfWeek[index]}
            <br />
            {date.getDate()}
          </div>
        ))}
      </div>

      {/* –°–µ—Ç–∫–∞ —Å–ª–æ—Ç–æ–≤ */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '60px repeat(7, 1fr)',
        gap: '5px',
        maxHeight: '400px',
        overflowY: 'auto'
      }}>
        {timeSlots.map(timeSlot => (
          <React.Fragment key={timeSlot}>
            {/* –í—Ä–µ–º—è */}
            <div style={{
              padding: '8px',
              fontSize: '12px',
              fontWeight: 'bold',
              color: '#2D5016',
              textAlign: 'center',
              background: '#f8f9fa',
              borderRadius: '4px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}>
              {timeSlot}
            </div>
            
            {/* –°–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è */}
            {weekDates.map((date, dayIndex) => {
              const status = getSlotStatus(date, timeSlot);
              const slot = slots[getDateKey(date)]?.[timeSlot];
              
              return (
                <div
                  key={`${timeSlot}-${dayIndex}`}
                  onClick={() => toggleSlot(date, timeSlot)}
                  style={{
                    padding: '8px',
                    fontSize: '10px',
                    textAlign: 'center',
                    background: getSlotColor(status),
                    color: status === 'inactive' ? '#666' : 'white',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    border: selectedDate.getDate() === date.getDate() ? '2px solid #2D5016' : '1px solid transparent',
                    minHeight: '40px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center'
                  }}
                  onMouseEnter={(e) => {
                    if (status !== 'inactive') {
                      e.target.style.transform = 'scale(1.05)';
                      e.target.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
                    }
                  }}
                  onMouseLeave={(e) => {
                    e.target.style.transform = 'scale(1)';
                    e.target.style.boxShadow = 'none';
                  }}
                >
                  {slot && (
                    <>
                      <div style={{ fontWeight: 'bold' }}>
                        {slot.currentOrders}/{slot.maxOrders}
                      </div>
                      <div style={{ fontSize: '8px', opacity: 0.8 }}>
                        {slot.priceMultiplier > 1 ? `+${Math.round((slot.priceMultiplier - 1) * 100)}%` : ''}
                      </div>
                    </>
                  )}
                </div>
              );
            })}
          </React.Fragment>
        ))}
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div style={{
        marginTop: '15px',
        padding: '10px',
        background: '#f8f9fa',
        borderRadius: '8px',
        fontSize: '12px'
      }}>
        <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>–õ–µ–≥–µ–Ω–¥–∞:</div>
        <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
            <div style={{ width: '12px', height: '12px', background: '#4CAF50', borderRadius: '2px' }}></div>
            <span>–î–æ—Å—Ç—É–ø–µ–Ω</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
            <div style={{ width: '12px', height: '12px', background: '#FF9800', borderRadius: '2px' }}></div>
            <span>–ó–∞–ø–æ–ª–Ω–µ–Ω</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
            <div style={{ width: '12px', height: '12px', background: '#9E9E9E', borderRadius: '2px' }}></div>
            <span>–û—Ç–∫–ª—é—á–µ–Ω</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
            <div style={{ width: '12px', height: '12px', background: '#E0E0E0', borderRadius: '2px' }}></div>
            <span>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>
          </div>
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div style={{
        marginTop: '15px',
        display: 'flex',
        gap: '10px',
        flexWrap: 'wrap'
      }}>
        <button
          onClick={copySlotsToWeek}
          style={{
            background: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            padding: '8px 12px',
            cursor: 'pointer',
            fontSize: '12px'
          }}
        >
          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é
        </button>
        <button
          onClick={() => clearDaySlots(selectedDate)}
          style={{
            background: '#dc3545',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            padding: '8px 12px',
            cursor: 'pointer',
            fontSize: '12px'
          }}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å
        </button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{
        marginTop: '15px',
        padding: '10px',
        background: '#e8f5e8',
        borderRadius: '8px',
        fontSize: '12px'
      }}>
        <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏:</div>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: '10px' }}>
          <div>
            <span style={{ fontWeight: 'bold' }}>–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤:</span> {
              Object.values(slots).reduce((total, daySlots) => total + Object.keys(daySlots).length, 0)
            }
          </div>
          <div>
            <span style={{ fontWeight: 'bold' }}>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span> {
              Object.values(slots).reduce((total, daySlots) => 
                total + Object.values(daySlots).filter(slot => slot.isActive).length, 0
              )
            }
          </div>
          <div>
            <span style={{ fontWeight: 'bold' }}>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:</span> {
              Object.values(slots).reduce((total, daySlots) => 
                total + Object.values(daySlots).filter(slot => slot.currentOrders >= slot.maxOrders).length, 0
              )
            }
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChefSlotsCalendar;

/**
 * üéÑ AI-–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –°–µ—Ç-–ú–µ–Ω—é (UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç)
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤–∞—Ä–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
 * –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º —Å –ø–æ–º–æ—â—å—é AI.
 */

import React, { useState, useEffect, useRef } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { useToast } from '../contexts/ToastContext';
import aiHolidaySetMenuGenerator from '../utils/aiHolidaySetMenuGenerator';
import { useRateLimit } from '../utils/rateLimiter';

const AIHolidaySetMenu = ({ chefDishes, onSetCreated, onClose }) => {
  const { t } = useLanguage();
  const { setToast } = useToast();

  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedHoliday, setSelectedHoliday] = useState('');
  const [selectedType, setSelectedType] = useState('family');
  const [generatedSets, setGeneratedSets] = useState([]);
  const [selectedSet, setSelectedSet] = useState(null);
  const [upcomingHolidays, setUpcomingHolidays] = useState([]);
  
  // Ref –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–∫—É—Å–æ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const dialogRef = useRef(null);
  
  // Rate limiting –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const { checkLimit, recordRequest, getTimeUntilReset } = useRateLimit('HOLIDAY_SET_MENU');

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    const holidays = aiHolidaySetMenuGenerator.getCurrentMonthHolidays();
    setUpcomingHolidays(holidays);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫
    const upcoming = aiHolidaySetMenuGenerator.getUpcomingHoliday();
    setSelectedHoliday(upcoming);
  }, []);
  
  // –§–æ–∫—É—Å –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    dialogRef.current?.focus();
  }, []);

  const handleGenerateSet = async () => {
    if (!selectedHoliday) {
      setToast({ type: 'error', message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    const { allowed, remaining, resetTime } = checkLimit();
    
    if (!allowed) {
      const timeUntilReset = getTimeUntilReset(resetTime);
      setToast({ 
        type: 'error', 
        message: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (10/—á–∞—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${timeUntilReset}.` 
      });
      return;
    }

    setIsGenerating(true);

    try {
      const result = await aiHolidaySetMenuGenerator.generateHolidaySet(
        chefDishes,
        selectedHoliday,
        selectedType
      );

      if (result.success) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        recordRequest();
        setSelectedSet(result.set);
        setToast({ 
          type: 'success', 
          message: `‚úÖ –°–µ—Ç-–º–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: ${remaining - 1}` 
        });
      } else {
        setToast({ type: 'error', message: result.error });
      }
    } catch (error) {
      setToast({ type: 'error', message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + error.message });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateVariants = async () => {
    if (!selectedHoliday) {
      setToast({ type: 'error', message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫' });
      return;
    }

    setIsGenerating(true);

    try {
      const result = await aiHolidaySetMenuGenerator.generateMultipleVariants(
        chefDishes,
        selectedHoliday
      );

      if (result.success && result.variants.length > 0) {
        setGeneratedSets(result.variants);
        setToast({ type: 'success', message: `‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${result.variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!` });
      } else {
        setToast({ type: 'error', message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã' });
      }
    } catch (error) {
      setToast({ type: 'error', message: '–û—à–∏–±–∫–∞: ' + error.message });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSaveSet = () => {
    if (!selectedSet) {
      setToast({ type: 'error', message: '–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–∞–±–æ—Ä' });
      return;
    }

    if (onSetCreated) {
      onSetCreated(selectedSet);
    }

    setToast({ type: 'success', message: '‚úÖ –°–µ—Ç-–º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!' });
    setTimeout(() => {
      if (onClose) onClose();
    }, 1500);
  };

  return (
    <div 
      role="presentation"
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.7)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 10000,
        padding: '20px',
        overflow: 'auto'
      }}
      onKeyDown={(e) => { if (e.key === 'Escape') onClose?.(); }}
    >
      <div
        role="dialog"
        aria-modal="true"
        aria-labelledby="ai-holiday-setmenu-title"
        tabIndex={-1}
        style={{
          backgroundColor: 'white',
          borderRadius: '12px',
          padding: '30px',
          maxWidth: '900px',
          width: '100%',
          maxHeight: '90vh',
          overflow: 'auto',
          position: 'relative'
        }}
        ref={dialogRef}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
          <h2 id="ai-holiday-setmenu-title" style={{ margin: 0, color: '#333' }}>
            AI-–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –°–µ—Ç-–ú–µ–Ω—é
          </h2>
          {(() => {
            const { remaining, resetTime } = checkLimit();
            return (
              <div style={{ fontSize: '12px', color: '#666', textAlign: 'right' }}>
                <div>–û—Å—Ç–∞–ª–æ—Å—å: {remaining}/10 –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                {remaining < 3 && (
                  <div style={{ color: '#ff6b35' }}>
                    –õ–∏–º–∏—Ç: {getTimeUntilReset(resetTime)}
                  </div>
                )}
              </div>
            );
          })()}
        </div>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '20px',
          borderBottom: '2px solid #f0f0f0',
          paddingBottom: '15px'
        }}>
          <h2 style={{ margin: 0, color: '#333' }}>
            üéÑ AI-–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –°–µ—Ç-–ú–µ–Ω—é
          </h2>
          <button
            onClick={onClose}
            style={{
              background: 'transparent',
              border: 'none',
              fontSize: '24px',
              cursor: 'pointer',
              color: '#999'
            }}
          >
            ‚úï
          </button>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div style={{
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          padding: '15px',
          borderRadius: '8px',
          marginBottom: '20px'
        }}>
          <p style={{ margin: '0 0 10px 0', fontSize: '14px' }}>
            <strong>ü§ñ AI —Å–æ–∑–¥–∞—Å—Ç –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ –≤–∞—à–∏—Ö –±–ª—é–¥!</strong>
          </p>
          <ul style={{ margin: 0, paddingLeft: '20px', fontSize: '13px' }}>
            <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –±–ª—é–¥ –ø–æ–¥ –ø—Ä–∞–∑–¥–Ω–∏–∫</li>
            <li>–†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–æ–π</li>
            <li>–ì–æ—Ç–æ–≤–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</li>
            <li>–†–∞—Å—á—ë—Ç –ö–ë–ñ–£ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É</li>
          </ul>
        </div>

        {/* –í—ã–±–æ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ */}
        <div style={{ marginBottom: '20px' }}>
          <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold', color: '#333' }}>
            üéâ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫:
          </label>
          <select
            value={selectedHoliday}
            onChange={(e) => setSelectedHoliday(e.target.value)}
            style={{
              width: '100%',
              padding: '12px',
              borderRadius: '8px',
              border: '2px solid #e0e0e0',
              fontSize: '14px',
              cursor: 'pointer'
            }}
          >
            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ --</option>
            {Object.keys(aiHolidaySetMenuGenerator.holidays).map(name => (
              <option key={name} value={name}>{name}</option>
            ))}
          </select>

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö */}
          {upcomingHolidays.length > 0 && (
            <div style={{
              marginTop: '10px',
              padding: '10px',
              background: '#fff3cd',
              borderRadius: '6px',
              fontSize: '13px'
            }}>
              <strong>üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:</strong> {upcomingHolidays.map(h => h.name).join(', ')}
            </div>
          )}
        </div>

        {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–±–æ—Ä–∞ */}
        <div style={{ marginBottom: '20px' }}>
          <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold', color: '#333' }}>
            üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω:
          </label>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '10px' }}>
            {Object.keys(aiHolidaySetMenuGenerator.setTypes).map(typeKey => {
              const typeData = aiHolidaySetMenuGenerator.setTypes[typeKey];
              const isSelected = selectedType === typeKey;

              return (
                <button
                  key={typeKey}
                  onClick={() => setSelectedType(typeKey)}
                  style={{
                    padding: '12px',
                    borderRadius: '8px',
                    border: isSelected ? '2px solid #2196f3' : '2px solid #e0e0e0',
                    background: isSelected ? '#e3f2fd' : 'white',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    fontSize: '13px'
                  }}
                >
                  <div style={{ fontWeight: 'bold' }}>{typeData.name}</div>
                  <div style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>
                    {typeData.persons} –ø–µ—Ä—Å–æ–Ω
                  </div>
                </button>
              );
            })}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>
          <button
            onClick={handleGenerateSet}
            disabled={isGenerating || !selectedHoliday}
            style={{
              flex: 1,
              padding: '14px',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: isGenerating || !selectedHoliday ? 'not-allowed' : 'pointer',
              fontSize: '15px',
              fontWeight: 'bold',
              opacity: isGenerating || !selectedHoliday ? 0.6 : 1
            }}
          >
            {isGenerating ? 'üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üéÅ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç-–º–µ–Ω—é'}
          </button>

          <button
            onClick={handleGenerateVariants}
            disabled={isGenerating || !selectedHoliday}
            style={{
              flex: 1,
              padding: '14px',
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: isGenerating || !selectedHoliday ? 'not-allowed' : 'pointer',
              fontSize: '15px',
              fontWeight: 'bold',
              opacity: isGenerating || !selectedHoliday ? 0.6 : 1
            }}
          >
            {isGenerating ? 'üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üé≤ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞'}
          </button>
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ */}
        {selectedSet && (
          <div style={{
            border: `3px solid ${selectedSet.color}`,
            borderRadius: '12px',
            padding: '20px',
            marginBottom: '20px',
            background: `linear-gradient(135deg, ${selectedSet.color}15, ${selectedSet.color}05)`
          }}>
            <h3 style={{ margin: '0 0 15px 0', color: selectedSet.color }}>
              {selectedSet.name}
            </h3>

            {/* –ü—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç */}
            <div style={{
              background: selectedSet.color,
              color: 'white',
              padding: '12px',
              borderRadius: '8px',
              marginBottom: '15px',
              fontSize: '14px',
              fontWeight: 'bold'
            }}>
              {selectedSet.promoText}
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <p style={{ fontSize: '14px', lineHeight: '1.6', color: '#555', marginBottom: '15px' }}>
              {selectedSet.description}
            </p>

            {/* –°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞ */}
            <div style={{ marginBottom: '15px' }}>
              <h4 style={{ fontSize: '15px', marginBottom: '10px' }}>üì¶ –°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞:</h4>
              {selectedSet.dishes.map((dish, idx) => (
                <div key={idx} style={{
                  padding: '10px',
                  background: 'white',
                  borderRadius: '6px',
                  marginBottom: '8px',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                }}>
                  <div>
                    <strong>{dish.name}</strong>
                    <div style={{ fontSize: '12px', color: '#666' }}>
                      {dish.portionsPerDish} –ø–æ—Ä—Ü–∏–π
                    </div>
                  </div>
                  <div style={{ fontSize: '14px', fontWeight: 'bold', color: selectedSet.color }}>
                    {dish.price}‚ÇΩ
                  </div>
                </div>
              ))}
            </div>

            {/* –¶–µ–Ω—ã */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: '1fr 1fr',
              gap: '15px',
              marginBottom: '15px'
            }}>
              <div style={{
                padding: '15px',
                background: 'white',
                borderRadius: '8px',
                textAlign: 'center',
                boxShadow: '0 2px 6px rgba(0,0,0,0.1)'
              }}>
                <div style={{ fontSize: '12px', color: '#999', marginBottom: '5px' }}>–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞</div>
                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#999', textDecoration: 'line-through' }}>
                  {selectedSet.pricing.recommendedPrice}‚ÇΩ
                </div>
              </div>

              <div style={{
                padding: '15px',
                background: `linear-gradient(135deg, ${selectedSet.color}30, ${selectedSet.color}10)`,
                borderRadius: '8px',
                textAlign: 'center',
                border: `2px solid ${selectedSet.color}`
              }}>
                <div style={{ fontSize: '12px', color: '#666', marginBottom: '5px' }}>
                  –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ (-{selectedSet.pricing.discount}%)
                </div>
                <div style={{ fontSize: '24px', fontWeight: 'bold', color: selectedSet.color }}>
                  {selectedSet.pricing.discountedPrice}‚ÇΩ
                </div>
                <div style={{ fontSize: '11px', color: '#666', marginTop: '5px' }}>
                  –≠–∫–æ–Ω–æ–º–∏—è: {selectedSet.pricing.savings}‚ÇΩ
                </div>
              </div>
            </div>

            {/* –ö–ë–ñ–£ */}
            <div style={{
              background: 'white',
              padding: '15px',
              borderRadius: '8px',
              marginBottom: '15px',
              boxShadow: '0 2px 6px rgba(0,0,0,0.1)'
            }}>
              <h4 style={{ fontSize: '14px', marginBottom: '10px' }}>üçΩÔ∏è –ö–ë–ñ–£ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É:</h4>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '10px', fontSize: '13px' }}>
                <div style={{ textAlign: 'center' }}>
                  <div style={{ fontWeight: 'bold', color: '#ff6b6b' }}>
                    {selectedSet.pricing.nutrition.perPerson.calories}
                  </div>
                  <div style={{ fontSize: '11px', color: '#999' }}>–∫–∫–∞–ª</div>
                </div>
                <div style={{ textAlign: 'center' }}>
                  <div style={{ fontWeight: 'bold', color: '#4ecdc4' }}>
                    {selectedSet.pricing.nutrition.perPerson.protein}–≥
                  </div>
                  <div style={{ fontSize: '11px', color: '#999' }}>–±–µ–ª–∫–∏</div>
                </div>
                <div style={{ textAlign: 'center' }}>
                  <div style={{ fontWeight: 'bold', color: '#ffe66d' }}>
                    {selectedSet.pricing.nutrition.perPerson.carbs}–≥
                  </div>
                  <div style={{ fontSize: '11px', color: '#999' }}>—É–≥–ª–µ–≤–æ–¥—ã</div>
                </div>
                <div style={{ textAlign: 'center' }}>
                  <div style={{ fontWeight: 'bold', color: '#a8e6cf' }}>
                    {selectedSet.pricing.nutrition.perPerson.fat}–≥
                  </div>
                  <div style={{ fontSize: '11px', color: '#999' }}>–∂–∏—Ä—ã</div>
                </div>
              </div>
            </div>

            {/* AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ */}
            {(() => {
              const tips = aiHolidaySetMenuGenerator.generateOptimizationTips(selectedSet);
              if (tips.length === 0) return null;

              return (
                <div style={{ marginBottom: '15px' }}>
                  <h4 style={{ fontSize: '14px', marginBottom: '10px' }}>üí° AI-–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                  {tips.map((tip, idx) => (
                    <div
                      key={idx}
                      style={{
                        padding: '10px',
                        background: tip.type === 'warning' ? '#fff3cd' : tip.type === 'info' ? '#d1ecf1' : '#d4edda',
                        borderLeft: `4px solid ${tip.type === 'warning' ? '#ffc107' : tip.type === 'info' ? '#17a2b8' : '#28a745'}`,
                        borderRadius: '4px',
                        marginBottom: '8px',
                        fontSize: '13px'
                      }}
                    >
                      {tip.message}
                    </div>
                  ))}
                </div>
              );
            })()}

            {/* –¢–µ–≥–∏ */}
            <div style={{ marginBottom: '15px' }}>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                {selectedSet.tags.map((tag, idx) => (
                  <span
                    key={idx}
                    style={{
                      padding: '6px 12px',
                      background: `${selectedSet.color}20`,
                      color: selectedSet.color,
                      borderRadius: '20px',
                      fontSize: '12px',
                      fontWeight: 'bold'
                    }}
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>

            {/* –î–µ–¥–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ */}
            {selectedSet.validUntil && (
              <div style={{
                background: '#fff3cd',
                padding: '12px',
                borderRadius: '8px',
                fontSize: '13px',
                textAlign: 'center',
                fontWeight: 'bold'
              }}>
                ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞: {selectedSet.validUntil}
              </div>
            )}
          </div>
        )}

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ */}
        {generatedSets.length > 0 && !selectedSet && (
          <div>
            <h3 style={{ marginBottom: '15px' }}>üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–±–æ—Ä–∞:</h3>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
              {generatedSets.map((set, idx) => (
                <div
                  key={idx}
                  onClick={() => setSelectedSet(set)}
                  style={{
                    border: `2px solid ${set.color}`,
                    borderRadius: '8px',
                    padding: '15px',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    background: `${set.color}05`
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'translateY(-5px)';
                    e.currentTarget.style.boxShadow = `0 8px 20px ${set.color}40`;
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  <h4 style={{ margin: '0 0 10px 0', color: set.color, fontSize: '15px' }}>
                    {set.name}
                  </h4>
                  <div style={{ fontSize: '13px', color: '#666', marginBottom: '10px' }}>
                    {set.dishes.length} –±–ª—é–¥ ‚Ä¢ {set.persons} –ø–µ—Ä—Å–æ–Ω
                  </div>
                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: set.color }}>
                    {set.pricing.discountedPrice}‚ÇΩ
                  </div>
                  <div style={{ fontSize: '11px', color: '#999', textDecoration: 'line-through' }}>
                    {set.pricing.recommendedPrice}‚ÇΩ
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
          <button
            onClick={onClose}
            style={{
              flex: 1,
              padding: '12px',
              background: '#e0e0e0',
              color: '#666',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 'bold'
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </button>

          {selectedSet && (
            <button
              onClick={handleSaveSet}
              style={{
                flex: 2,
                padding: '12px',
                background: 'linear-gradient(135deg, #4caf50, #45a049)',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold'
              }}
            >
              ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–±–æ—Ä
            </button>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–∞—Ö –ø–æ–≤–∞—Ä–∞ */}
        <div style={{
          marginTop: '20px',
          padding: '12px',
          background: '#f8f9fa',
          borderRadius: '8px',
          fontSize: '13px',
          color: '#666',
          textAlign: 'center'
        }}>
          üìä –î–æ—Å—Ç—É–ø–Ω–æ –±–ª—é–¥ –≤ –º–µ–Ω—é: <strong>{chefDishes.length}</strong>
        </div>
      </div>
    </div>
  );
};

export default AIHolidaySetMenu;


import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { safeSetClientOrders } from '../utils/safeStorage';

const AdminOrderDetails = () => {
  const [order, setOrder] = useState(null);
  const [chef, setChef] = useState(null);
  const [customer, setCustomer] = useState(null);
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);
  const [message, setMessage] = useState('');
  const navigate = useNavigate();
  const { orderId } = useParams();

  const loadOrderDetails = useCallback(() => {
    setLoading(true);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑
    const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
    const foundOrder = orders.find(o => o.id === orderId);
    
    if (!foundOrder) {
      setMessage('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      setLoading(false);
      return;
    }
    
    setOrder(foundOrder);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    const users = JSON.parse(localStorage.getItem('allUsers') || '[]');
    const foundChef = users.find(u => u.email === foundOrder.chefId);
    const foundCustomer = users.find(u => u.email === foundOrder.customer?.email);
    
    setChef(foundChef);
    setCustomer(foundCustomer);
    setLoading(false);
  }, [orderId]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('authToken');
    const role = localStorage.getItem('role');
    
    if (!token || role !== 'admin') {
      navigate('/admin/login');
      return;
    }

    loadOrderDetails();
  }, [navigate, orderId, loadOrderDetails]);

  const createChefNotification = (order, status) => {
    try {
      const notifications = JSON.parse(localStorage.getItem('chefNotifications') || '[]');
      
      let notification = null;
      const chefId = order.items && order.items.length > 0 ? order.items[0].chefId : 'unknown';
      
      switch (status) {
        case 'confirmed':
          notification = {
            id: `notification-${Date.now()}`,
            type: 'orderConfirmed',
            title: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            message: `–ó–∞–∫–∞–∑ #${order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é`,
            time: new Date(),
            read: false,
            icon: '‚úÖ',
            orderId: order.id,
            chefId: chefId
          };
          break;
        case 'preparing':
          notification = {
            id: `notification-${Date.now()}`,
            type: 'orderPreparing',
            title: '–ù–∞—á–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ',
            message: `–ó–∞–∫–∞–∑ #${order.id} –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é`,
            time: new Date(),
            read: false,
            icon: 'üë®‚Äçüç≥',
            orderId: order.id,
            chefId: chefId
          };
          break;
        case 'delivering':
          notification = {
            id: `notification-${Date.now()}`,
            type: 'orderDelivering',
            title: '–ó–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ',
            message: `–ó–∞–∫–∞–∑ #${order.id} –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É`,
            time: new Date(),
            read: false,
            icon: 'üöö',
            orderId: order.id,
            chefId: chefId
          };
          break;
        case 'delivered':
          notification = {
            id: `notification-${Date.now()}`,
            type: 'orderDelivered',
            title: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            message: `–ó–∞–∫–∞–∑ #${order.id} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É`,
            time: new Date(),
            read: false,
            icon: 'üéâ',
            orderId: order.id,
            chefId: chefId
          };
          break;
        case 'cancelled':
          notification = {
            id: `notification-${Date.now()}`,
            type: 'orderCancelled',
            title: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
            message: `–ó–∞–∫–∞–∑ #${order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`,
            time: new Date(),
            read: false,
            icon: '‚ùå',
            orderId: order.id,
            chefId: chefId
          };
          break;
        default:
          // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          break;
      }
      
      if (notification) {
        notifications.unshift(notification);
        const limitedNotifications = notifications.slice(0, 50);
        localStorage.setItem('chefNotifications', JSON.stringify(limitedNotifications));
        console.log('Created chef notification:', notification);
      }
    } catch (error) {
      console.error('Error creating chef notification:', error);
    }
  };

  const updateOrderStatus = async (newStatus) => {
    setUpdating(true);
    setMessage('');
    
    try {
      const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      const updatedOrders = orders.map(o => 
        o.id === orderId 
          ? { ...o, status: newStatus, updatedAt: new Date().toISOString() }
          : o
      );
      
      safeSetClientOrders(updatedOrders);
      setOrder(prev => ({ ...prev, status: newStatus, updatedAt: new Date().toISOString() }));
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤–∞—Ä–∞
      createChefNotification(order, newStatus);
      
      setMessage('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      setTimeout(() => setMessage(''), 3000);
      
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
      setUpdating(false);
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      'pending': '#ff9800',
      'confirmed': '#2196f3',
      'preparing': '#9c27b0',
      'delivering': '#3f51b5',
      'delivered': '#4caf50',
      'cancelled': '#f44336'
    };
    return colors[status] || '#666';
  };

  const getStatusText = (status) => {
    const statusMap = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      'delivering': '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatCurrency = (amount) => {
    return amount.toLocaleString('ru-RU') + ' ‚ÇΩ';
  };

  if (loading) {
    return (
      <div className="admin-order-details">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞...</div>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="admin-order-details">
        <div className="error-message">
          <h2>‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p>–ó–∞–∫–∞–∑ —Å ID {orderId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
          <button onClick={() => navigate('/admin/orders')} className="back-button">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-order-details">
      <div className="page-header">
        <button 
          onClick={() => navigate('/admin/orders')} 
          className="back-button"
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º
        </button>
        <h1>üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}</h1>
        <div className="order-status">
          <span 
            className="status-badge"
            style={{ backgroundColor: getStatusColor(order.status) }}
          >
            {getStatusText(order.status)}
          </span>
        </div>
      </div>

      {message && (
        <div className={`message ${message.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
          {message}
        </div>
      )}

      <div className="order-content">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
        <div className="order-section">
          <h2>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h2>
          <div className="order-info-grid">
            <div className="info-item">
              <span className="label">ID –∑–∞–∫–∞–∑–∞:</span>
              <span className="value">#{order.id}</span>
            </div>
            <div className="info-item">
              <span className="label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
              <span className="value">{formatDate(order.createdAt)}</span>
            </div>
            <div className="info-item">
              <span className="label">–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</span>
              <span className="value">{formatDate(order.updatedAt || order.createdAt)}</span>
            </div>
            <div className="info-item">
              <span className="label">–û–±—â–∞—è —Å—É–º–º–∞:</span>
              <span className="value">{formatCurrency(order.payment?.total || 0)}</span>
            </div>
            <div className="info-item">
              <span className="label">–ö–æ–º–∏—Å—Å–∏—è:</span>
              <span className="value">{formatCurrency(order.payment?.commission || 0)}</span>
            </div>
            <div className="info-item">
              <span className="label">–°—É–º–º–∞ –ø–æ–≤–∞—Ä—É:</span>
              <span className="value">{formatCurrency((order.payment?.total || 0) - (order.payment?.commission || 0))}</span>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
        <div className="order-section">
          <h2>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
          <div className="customer-info">
            <div className="info-item">
              <span className="label">–ò–º—è:</span>
              <span className="value">{customer?.name || order.customer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">Email:</span>
              <span className="value">{customer?.email || order.customer?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
              <span className="value">{customer?.phone || order.customer?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</span>
              <span className="value">{order.delivery?.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</span>
              <span className="value">{order.delivery?.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}</span>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤–∞—Ä–µ */}
        <div className="order-section">
          <h2>üë®‚Äçüç≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤–∞—Ä–µ</h2>
          <div className="chef-info">
            <div className="info-item">
              <span className="label">–ò–º—è:</span>
              <span className="value">{chef?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">Email:</span>
              <span className="value">{chef?.email || order.chefId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</span>
              <span className="value">{chef?.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="label">–û–ø—ã—Ç:</span>
              <span className="value">{chef?.experience || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –ª–µ—Ç</span>
            </div>
          </div>
        </div>

        {/* –ë–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ */}
        <div className="order-section">
          <h2>üçΩÔ∏è –ë–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ</h2>
          <div className="dishes-list">
            {order.items?.map((item, index) => (
              <div key={index} className="dish-item">
                <div className="dish-image">
                  {item.image ? (
                    <img src={item.image} alt={item.name} />
                  ) : (
                    <div className="no-image">üì∑</div>
                  )}
                </div>
                <div className="dish-info">
                  <h4>{item.name}</h4>
                  <p className="dish-description">{item.description}</p>
                  <div className="dish-details">
                    <span className="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</span>
                    <span className="price">{formatCurrency(item.price)}</span>
                    <span className="total">{formatCurrency(item.price * item.quantity)}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º */}
        <div className="order-section">
          <h2>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º</h2>
          <div className="status-controls">
            <div className="current-status">
              <span className="label">–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</span>
              <span 
                className="status-badge"
                style={{ backgroundColor: getStatusColor(order.status) }}
              >
                {getStatusText(order.status)}
              </span>
            </div>
            
            <div className="status-buttons">
              {order.status === 'pending' && (
                <button 
                  onClick={() => updateOrderStatus('confirmed')}
                  className="status-button confirm"
                  disabled={updating}
                >
                  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
              )}
              
              {order.status === 'confirmed' && (
                <button 
                  onClick={() => updateOrderStatus('preparing')}
                  className="status-button preparing"
                  disabled={updating}
                >
                  üë®‚Äçüç≥ –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∫—É
                </button>
              )}
              
              {order.status === 'preparing' && (
                <button 
                  onClick={() => updateOrderStatus('delivering')}
                  className="status-button delivering"
                  disabled={updating}
                >
                  üöö –ù–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
                </button>
              )}
              
              {order.status === 'delivering' && (
                <button 
                  onClick={() => updateOrderStatus('delivered')}
                  className="status-button delivered"
                  disabled={updating}
                >
                  ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
                </button>
              )}
              
              {!['delivered', 'cancelled'].includes(order.status) && (
                <button 
                  onClick={() => updateOrderStatus('cancelled')}
                  className="status-button cancel"
                  disabled={updating}
                >
                  ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminOrderDetails;

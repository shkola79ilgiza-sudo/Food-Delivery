import React, { useState, useEffect } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { useToast } from '../contexts/ToastContext';
import '../App.css';

const ChefRatings = ({ onClose }) => {
  const { t } = useLanguage();
  const { showSuccess, showError } = useToast();
  const [chefStats, setChefStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [badges, setBadges] = useState([]);

  useEffect(() => {
    loadChefStats();
  }, []);

  const loadChefStats = async () => {
    try {
      setLoading(true);
      const chefId = localStorage.getItem('chefId') || 'demo-chef-1';
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–≤–∞—Ä–∞
      const clientOrders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      const chefOrders = clientOrders.filter(order => 
        order.items?.some(item => item.chefId === chefId)
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
      const reviews = JSON.parse(localStorage.getItem('chefReviews') || '[]');
      const chefReviews = reviews.filter(review => review.chefId === chefId);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = calculateChefStats(chefOrders, chefReviews);
      setChefStats(stats);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–π–¥–∂–∏
      const generatedBadges = generateBadges(stats);
      setBadges(generatedBadges);

    } catch (error) {
      console.error('Error loading chef stats:', error);
      showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  const calculateChefStats = (orders, reviews) => {
    const now = new Date();
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    const ordersLastMonth = orders.filter(order => new Date(order.createdAt) >= lastMonth);
    const ordersLastWeek = orders.filter(order => new Date(order.createdAt) >= lastWeek);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
    const totalDishes = orders.reduce((sum, order) => 
      sum + (order.items?.reduce((itemSum, item) => itemSum + item.quantity, 0) || 0), 0
    );

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É
    const totalRevenue = orders.reduce((sum, order) => sum + (order.total || 0), 0);
    const monthlyRevenue = ordersLastMonth.reduce((sum, order) => sum + (order.total || 0), 0);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    const completedOrders = orders.filter(order => order.status === 'delivered');
    const avgCompletionTime = calculateAverageCompletionTime(completedOrders);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
    const successfulOrders = orders.filter(order => 
      ['delivered', 'ready'].includes(order.status)
    );
    const stability = orders.length > 0 ? (successfulOrders.length / orders.length) * 100 : 0;

    return {
      totalOrders: orders.length,
      ordersLastMonth: ordersLastMonth.length,
      ordersLastWeek: ordersLastWeek.length,
      totalDishes,
      totalRevenue,
      monthlyRevenue,
      averageRating,
      totalReviews: reviews.length,
      avgCompletionTime,
      stability,
      lastOrderDate: orders.length > 0 ? orders[0].createdAt : null
    };
  };

  const calculateAverageCompletionTime = (orders) => {
    if (orders.length === 0) return 0;
    
    const totalTime = orders.reduce((sum, order) => {
      const createdAt = new Date(order.createdAt);
      const completedAt = new Date(order.updatedAt || order.createdAt);
      return sum + (completedAt - createdAt);
    }, 0);
    
    return Math.round(totalTime / orders.length / (1000 * 60)); // –≤ –º–∏–Ω—É—Ç–∞—Ö
  };

  const generateBadges = (stats) => {
    const badges = [];

    // –ë–µ–π–¥–∂ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if (stats.averageRating >= 4.8) {
      badges.push({
        id: 'rating-excellent',
        name: '5‚≠ê –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        description: '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ 4.8+',
        icon: '‚≠ê',
        color: '#f39c12',
        earned: true,
        progress: 100
      });
    } else if (stats.averageRating >= 4.5) {
      badges.push({
        id: 'rating-good',
        name: '4‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ',
        description: '–•–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 4.5+',
        icon: '‚≠ê',
        color: '#27ae60',
        earned: true,
        progress: 100
      });
    }

    // –ë–µ–π–¥–∂ –ø–æ–≤–∞—Ä–∞ –º–µ—Å—è—Ü–∞
    if (stats.ordersLastMonth >= 50) {
      badges.push({
        id: 'chef-month',
        name: '–ü–æ–≤–∞—Ä –º–µ—Å—è—Ü–∞',
        description: '50+ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü',
        icon: 'üëë',
        color: '#e74c3c',
        earned: true,
        progress: 100
      });
    } else {
      badges.push({
        id: 'chef-month',
        name: '–ü–æ–≤–∞—Ä –º–µ—Å—è—Ü–∞',
        description: '50+ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü',
        icon: 'üëë',
        color: '#bdc3c7',
        earned: false,
        progress: (stats.ordersLastMonth / 50) * 100
      });
    }

    // –ë–µ–π–¥–∂ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    if (stats.stability >= 95) {
      badges.push({
        id: 'stability-excellent',
        name: '–õ—É—á—à–∏–µ –æ—Ç–∑—ã–≤—ã',
        description: '95%+ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
        icon: 'üèÜ',
        color: '#9b59b6',
        earned: true,
        progress: 100
      });
    } else if (stats.stability >= 90) {
      badges.push({
        id: 'stability-good',
        name: '–ù–∞–¥–µ–∂–Ω—ã–π –ø–æ–≤–∞—Ä',
        description: '90%+ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
        icon: 'üõ°Ô∏è',
        color: '#3498db',
        earned: true,
        progress: 100
      });
    } else {
      badges.push({
        id: 'stability-good',
        name: '–ù–∞–¥–µ–∂–Ω—ã–π –ø–æ–≤–∞—Ä',
        description: '90%+ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
        icon: 'üõ°Ô∏è',
        color: '#bdc3c7',
        earned: false,
        progress: stats.stability
      });
    }

    // –ë–µ–π–¥–∂ —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (stats.avgCompletionTime <= 30) {
      badges.push({
        id: 'speed-fast',
        name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ–≤–∞—Ä',
        description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ ‚â§30 –º–∏–Ω',
        icon: '‚ö°',
        color: '#e67e22',
        earned: true,
        progress: 100
      });
    } else if (stats.avgCompletionTime <= 45) {
      badges.push({
        id: 'speed-good',
        name: '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤–∞—Ä',
        description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ ‚â§45 –º–∏–Ω',
        icon: '‚ö°',
        color: '#f39c12',
        earned: true,
        progress: 100
      });
    } else {
      badges.push({
        id: 'speed-good',
        name: '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤–∞—Ä',
        description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ ‚â§45 –º–∏–Ω',
        icon: '‚ö°',
        color: '#bdc3c7',
        earned: false,
        progress: Math.max(0, 100 - (stats.avgCompletionTime - 45) * 2)
      });
    }

    // –ë–µ–π–¥–∂ –≤—ã—Ä—É—á–∫–∏
    if (stats.monthlyRevenue >= 100000) {
      badges.push({
        id: 'revenue-high',
        name: '–¢–æ–ø-–ø–æ–≤–∞—Ä',
        description: '100k+ –≤—ã—Ä—É—á–∫–∏ –∑–∞ –º–µ—Å—è—Ü',
        icon: 'üí∞',
        color: '#27ae60',
        earned: true,
        progress: 100
      });
    } else if (stats.monthlyRevenue >= 50000) {
      badges.push({
        id: 'revenue-medium',
        name: '–£—Å–ø–µ—à–Ω—ã–π –ø–æ–≤–∞—Ä',
        description: '50k+ –≤—ã—Ä—É—á–∫–∏ –∑–∞ –º–µ—Å—è—Ü',
        icon: 'üíé',
        color: '#3498db',
        earned: true,
        progress: 100
      });
    } else {
      badges.push({
        id: 'revenue-medium',
        name: '–£—Å–ø–µ—à–Ω—ã–π –ø–æ–≤–∞—Ä',
        description: '50k+ –≤—ã—Ä—É—á–∫–∏ –∑–∞ –º–µ—Å—è—Ü',
        icon: 'üíé',
        color: '#bdc3c7',
        earned: false,
        progress: (stats.monthlyRevenue / 50000) * 100
      });
    }

    return badges;
  };

  const getBadgeStatus = (badge) => {
    if (badge.earned) {
      return 'earned';
    } else if (badge.progress > 0) {
      return 'in-progress';
    } else {
      return 'locked';
    }
  };

  if (loading || !chefStats) {
    return (
      <div className="chef-ratings-modal-overlay">
        <div className="chef-ratings-modal">
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="chef-ratings-modal-overlay" onClick={onClose}>
      <div className="chef-ratings-modal" onClick={(e) => e.stopPropagation()}>
        <div className="chef-ratings-header">
          <h3>üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
          <button onClick={onClose} className="back-button">‚úï</button>
        </div>

        <div className="chef-ratings-content">
          {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="chef-stats-section">
            <h4>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-icon">‚≠ê</div>
                <div className="stat-info">
                  <div className="stat-number">{chefStats.averageRating.toFixed(1)}</div>
                  <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                  <div className="stat-detail">{chefStats.totalReviews} –æ—Ç–∑—ã–≤–æ–≤</div>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">üçΩÔ∏è</div>
                <div className="stat-info">
                  <div className="stat-number">{chefStats.totalDishes}</div>
                  <div className="stat-label">–ë–ª—é–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ</div>
                  <div className="stat-detail">{chefStats.totalOrders} –∑–∞–∫–∞–∑–æ–≤</div>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">üí∞</div>
                <div className="stat-info">
                  <div className="stat-number">{chefStats.monthlyRevenue.toLocaleString()}‚ÇΩ</div>
                  <div className="stat-label">–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü</div>
                  <div className="stat-detail">{chefStats.ordersLastMonth} –∑–∞–∫–∞–∑–æ–≤</div>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">‚ö°</div>
                <div className="stat-info">
                  <div className="stat-number">{chefStats.avgCompletionTime} –º–∏–Ω</div>
                  <div className="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏</div>
                  <div className="stat-detail">{chefStats.stability.toFixed(1)}% —É—Å–ø–µ—à–Ω—ã—Ö</div>
                </div>
              </div>
            </div>
          </div>

          {/* –ë–µ–π–¥–∂–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
          <div className="badges-section">
            <h4>üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
            <div className="badges-grid">
              {badges.map(badge => (
                <div 
                  key={badge.id} 
                  className={`badge-card ${getBadgeStatus(badge)}`}
                >
                  <div className="badge-icon" style={{ color: badge.color }}>
                    {badge.icon}
                  </div>
                  <div className="badge-info">
                    <h5 className="badge-name">{badge.name}</h5>
                    <p className="badge-description">{badge.description}</p>
                    {!badge.earned && (
                      <div className="badge-progress">
                        <div className="progress-bar">
                          <div 
                            className="progress-fill"
                            style={{ 
                              width: `${badge.progress}%`,
                              backgroundColor: badge.color
                            }}
                          ></div>
                        </div>
                        <span className="progress-text">{badge.progress.toFixed(0)}%</span>
                      </div>
                    )}
                  </div>
                  {badge.earned && (
                    <div className="badge-status">
                      <span className="earned-badge">‚úÖ</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="motivation-section">
            <h4>üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è</h4>
            <div className="motivation-messages">
              {chefStats.averageRating >= 4.5 && (
                <div className="motivation-card success">
                  <div className="motivation-icon">üéâ</div>
                  <div className="motivation-text">
                    <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ {chefStats.averageRating.toFixed(1)} - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã!
                  </div>
                </div>
              )}
              
              {chefStats.ordersLastMonth >= 30 && (
                <div className="motivation-card success">
                  <div className="motivation-icon">üöÄ</div>
                  <div className="motivation-text">
                    <strong>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</strong> {chefStats.ordersLastMonth} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü - –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!
                  </div>
                </div>
              )}
              
              {chefStats.stability >= 90 && (
                <div className="motivation-card success">
                  <div className="motivation-icon">üõ°Ô∏è</div>
                  <div className="motivation-text">
                    <strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å!</strong> {chefStats.stability.toFixed(1)}% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä—è—é—Ç –≤–∞–º!
                  </div>
                </div>
              )}
              
              {chefStats.averageRating < 4.0 && (
                <div className="motivation-card warning">
                  <div className="motivation-icon">üìà</div>
                  <div className="motivation-text">
                    <strong>–†–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å!</strong> –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ {chefStats.averageRating.toFixed(1)} - –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChefRatings;

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useLanguage } from '../contexts/LanguageContext';
import { safeSetClientOrders } from '../utils/safeStorage';
import { useToast } from '../contexts/ToastContext';
import AIOrderAnalysis from './AIOrderAnalysis';
import AIMealPlanner from './AIMealPlanner';
import '../App.css';

const AICoach = () => {
  const [userGoals, setUserGoals] = useState('');
  const [orderHistory, setOrderHistory] = useState([]);
  const [advice, setAdvice] = useState('');
  const [weeklyPlan, setWeeklyPlan] = useState([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [showOrderAnalysis, setShowOrderAnalysis] = useState(false);
  const [showMealPlanner, setShowMealPlanner] = useState(false);
  const [availableDishes, setAvailableDishes] = useState([]);
  const navigate = useNavigate();
  const { t } = useLanguage();
  const { showSuccess } = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ localStorage
  useEffect(() => {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let savedOrders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª—é–¥–∞
    let dishes = JSON.parse(localStorage.getItem('allDishes') || '[]');
    if (dishes.length === 0) {
      // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏
      dishes = JSON.parse(localStorage.getItem('dishes') || '[]');
    }
    setAvailableDishes(dishes);
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏
    if (savedOrders.length === 0) {
      savedOrders = JSON.parse(localStorage.getItem('orderHistory') || '[]');
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–∞—Ö
    if (savedOrders.length === 0) {
      const allKeys = Object.keys(localStorage);
      console.log('AI Coach: All localStorage keys:', allKeys);
      
      // –ò—â–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã
      const orderKeys = allKeys.filter(key => 
        key.includes('order') || key.includes('Order') || key.includes('–∑–∞–∫–∞–∑')
      );
      console.log('AI Coach: Potential order keys:', orderKeys);
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
      for (const key of orderKeys) {
        try {
          const data = JSON.parse(localStorage.getItem(key) || '[]');
          if (Array.isArray(data) && data.length > 0) {
            console.log(`AI Coach: Found orders in key "${key}":`, data);
            savedOrders = data;
            break;
          }
        } catch (e) {
          console.log(`AI Coach: Error parsing key "${key}":`, e);
        }
      }
    }
    
    console.log('AI Coach: Final orders loaded:', savedOrders);
    console.log('AI Coach: Orders count:', savedOrders.length);
    setOrderHistory(savedOrders);
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const createDemoOrders = () => {
    const demoOrders = [
      {
        id: 'demo-order-1',
        date: new Date().toISOString(),
        items: [
          { name: '–ñ–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏—Ü–∞', category: 'fried', calories: 450, price: 350 },
          { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', category: 'fried', calories: 320, price: 180 },
          { name: '–ö–æ–∫–∞-–∫–æ–ª–∞', category: 'drinks', calories: 140, price: 80 }
        ],
        total: 610,
        status: 'delivered'
      },
      {
        id: 'demo-order-2',
        date: new Date(Date.now() - 86400000).toISOString(), // –í—á–µ—Ä–∞
        items: [
          { name: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', category: 'vegetables', calories: 280, price: 250 },
          { name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', category: 'baked', calories: 520, price: 450 }
        ],
        total: 700,
        status: 'delivered'
      },
      {
        id: 'demo-order-3',
        date: new Date(Date.now() - 172800000).toISOString(), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
        items: [
          { name: '–ñ–∞—Ä–µ–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏', category: 'fried', calories: 380, price: 320 },
          { name: '–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π', category: 'vegetables', calories: 120, price: 150 }
        ],
        total: 470,
        status: 'delivered'
      }
    ];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–∑–∞–∫–∞–∑—ã –≤ localStorage
    safeSetClientOrders(demoOrders);
    setOrderHistory(demoOrders);
    showSuccess('–î–µ–º–æ-–∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.');
    console.log('Demo orders created:', demoOrders);
  };

  // AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤
  const analyzeOrderHistory = () => {
    console.log('=== AI ANALYSIS DEBUG ===');
    console.log('Starting analysis with orders:', orderHistory);
    console.log('Orders count:', orderHistory.length);
    
    setIsAnalyzing(true);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    let ordersToAnalyze = orderHistory;
    if (orderHistory.length === 0) {
      console.log('No orders found, creating demo data for analysis');
      ordersToAnalyze = [
        {
          id: 'demo-order-1',
          items: [
            { name: '–ñ–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏—Ü–∞', category: 'fried', calories: 450 },
            { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', category: 'fried', calories: 320 },
            { name: '–ö–æ–∫–∞-–∫–æ–ª–∞', category: 'drinks', calories: 140 }
          ]
        },
        {
          id: 'demo-order-2', 
          items: [
            { name: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', category: 'vegetables', calories: 280 },
            { name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', category: 'baked', calories: 520 }
          ]
        },
        {
          id: 'demo-order-3',
          items: [
            { name: '–ñ–∞—Ä–µ–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏', category: 'fried', calories: 380 },
            { name: '–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π', category: 'vegetables', calories: 120 }
          ]
        }
      ];
    }
    
    console.log('Orders to analyze:', ordersToAnalyze);
    
    setTimeout(() => {
      console.log('Performing AI analysis...');
      const analysis = performAIAnalysis(ordersToAnalyze);
      console.log('Analysis result:', analysis);
      
      setAdvice(analysis.advice);
      setWeeklyPlan(analysis.weeklyPlan);
      setIsAnalyzing(false);
      
      console.log('Advice set:', analysis.advice);
      console.log('Weekly plan set:', analysis.weeklyPlan);
      console.log('=== END AI ANALYSIS DEBUG ===');
      
      showSuccess('AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    }, 2000);
  };

  // AI-–ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
  const performAIAnalysis = (orders) => {
    console.log('=== PERFORM AI ANALYSIS DEBUG ===');
    console.log('Analyzing orders:', orders);
    
    const analysis = {
      advice: [],
      weeklyPlan: [],
      stats: {
        totalOrders: orders.length,
        friedCount: 0,
        vegetableCount: 0,
        meatCount: 0,
        averageCalories: 0
      }
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    orders.forEach(order => {
      console.log('Processing order:', order);
      if (order.items && Array.isArray(order.items)) {
        order.items.forEach(item => {
          console.log('Processing item:', item);
          if (item.category === 'fried' || item.name.includes('–∂–∞—Ä–µ–Ω')) {
            analysis.stats.friedCount++;
          }
          if (item.category === 'vegetables' || item.name.includes('—Å–∞–ª–∞—Ç')) {
            analysis.stats.vegetableCount++;
          }
          if (item.category === 'meat' || item.name.includes('–º—è—Å–æ')) {
            analysis.stats.meatCount++;
          }
          analysis.stats.averageCalories += item.calories || 0;
        });
      }
    });

    analysis.stats.averageCalories = analysis.stats.averageCalories / orders.length || 0;
    console.log('Analysis stats:', analysis.stats);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã
    if (analysis.stats.friedCount > orders.length * 0.7) {
      analysis.advice.push({
        type: 'warning',
        icon: '‚ö†Ô∏è',
        title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞—Ä–µ–Ω–æ–≥–æ!',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø–∞—Ä—É –±–ª—é–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–∞–ª–∞—Ç—ã –∏ –æ–≤–æ—â–∏ –Ω–∞ –≥—Ä–∏–ª–µ.'
      });
    }

    if (analysis.stats.vegetableCount < orders.length * 0.3) {
      analysis.advice.push({
        type: 'info',
        icon: 'ü•ó',
        title: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π',
        message: '–û–≤–æ—â–∏ –±–æ–≥–∞—Ç—ã –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Å–∞–ª–∞—Ç—ã, —Ç—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏ –∏–ª–∏ –æ–≤–æ—â–Ω—ã–µ —Å—É–ø—ã.'
      });
    }

    if (analysis.stats.averageCalories > 800) {
      analysis.advice.push({
        type: 'warning',
        icon: 'üìä',
        title: '–í—ã—Å–æ–∫–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: —Å–∞–ª–∞—Ç—ã, —Å—É–ø—ã, —Ä—ã–±—É –Ω–∞ –ø–∞—Ä—É.'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω
    analysis.weeklyPlan = generateWeeklyPlan(userGoals, analysis.stats);

    console.log('Final analysis result:', analysis);
    console.log('Advice count:', analysis.advice.length);
    console.log('Weekly plan count:', analysis.weeklyPlan.length);
    console.log('=== END PERFORM AI ANALYSIS DEBUG ===');

    return analysis;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const generateWeeklyPlan = (goals, stats) => {
    const plans = {
      weight_loss: [
        { day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', breakfast: '–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏', lunch: '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π', dinner: '–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É —Å –æ–≤–æ—â–∞–º–∏' },
        { day: '–í—Ç–æ—Ä–Ω–∏–∫', breakfast: '–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç', lunch: '–û–≤–æ—â–Ω–æ–π —Å—É–ø', dinner: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Å–∞–ª–∞—Ç–æ–º' },
        { day: '–°—Ä–µ–¥–∞', breakfast: '–¢–≤–æ—Ä–æ–≥ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏', lunch: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', dinner: '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏ –Ω–∞ –≥—Ä–∏–ª–µ' },
        { day: '–ß–µ—Ç–≤–µ—Ä–≥', breakfast: '–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏', lunch: '–ö—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω', dinner: '–¢—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏ —Å –º—è—Å–æ–º' },
        { day: '–ü—è—Ç–Ω–∏—Ü–∞', breakfast: '–°–º—É–∑–∏ —Å —è–≥–æ–¥–∞–º–∏', lunch: '–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º', dinner: '–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞' },
        { day: '–°—É–±–±–æ—Ç–∞', breakfast: '–¢–æ—Å—Ç —Å –∞–≤–æ–∫–∞–¥–æ', lunch: '–û–≤–æ—â–Ω–æ–π —Å—É–ø-–ø—é—Ä–µ', dinner: '–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã –Ω–∞ –ø–∞—Ä—É' },
        { day: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', breakfast: '–ì—Ä–µ—á–∫–∞ —Å –º–æ–ª–æ–∫–æ–º', lunch: '–°–∞–ª–∞—Ç —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏', dinner: '–û–≤–æ—â–∏ –Ω–∞ –≥—Ä–∏–ª–µ' }
      ],
      muscle_gain: [
        { day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', breakfast: '–û–º–ª–µ—Ç —Å –º—è—Å–æ–º', lunch: '–°—Ç–µ–π–∫ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º', dinner: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º' },
        { day: '–í—Ç–æ—Ä–Ω–∏–∫', breakfast: '–¢–≤–æ—Ä–æ–≥ —Å –æ—Ä–µ—Ö–∞–º–∏', lunch: '–ú—è—Å–Ω–æ–π —Å—É–ø', dinner: '–†—ã–±–∞ —Å –≥—Ä–µ—á–∫–æ–π' },
        { day: '–°—Ä–µ–¥–∞', breakfast: '–Ø–∏—á–Ω–∏—Ü–∞ —Å –±–µ–∫–æ–Ω–æ–º', lunch: '–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã —Å –º–∞–∫–∞—Ä–æ–Ω–∞–º–∏', dinner: '–°—Ç–µ–π–∫ —Å –æ–≤–æ—â–∞–º–∏' },
        { day: '–ß–µ—Ç–≤–µ—Ä–≥', breakfast: '–°—ã—Ä–Ω–∏–∫–∏ —Å –º–µ–¥–æ–º', lunch: '–ú—è—Å–Ω–æ–π –±–æ—Ä—â', dinner: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º' },
        { day: '–ü—è—Ç–Ω–∏—Ü–∞', breakfast: '–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º', lunch: '–†—ã–±–∞ —Å —Ä–∏—Å–æ–º', dinner: '–ú—è—Å–Ω—ã–µ —Ç–µ—Ñ—Ç–µ–ª–∏' },
        { day: '–°—É–±–±–æ—Ç–∞', breakfast: '–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞', lunch: '–°—Ç–µ–π–∫ —Å –≥—Ä–µ—á–∫–æ–π', dinner: '–ö—É—Ä–∏–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏' },
        { day: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', breakfast: '–Ø–∏—á–Ω–∏—Ü–∞ —Å –∫–æ–ª–±–∞—Å–æ–π', lunch: '–ú—è—Å–Ω–æ–π —Å—É–ø', dinner: '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏' }
      ],
      healthy: [
        { day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', breakfast: '–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏', lunch: '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π', dinner: '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏' },
        { day: '–í—Ç–æ—Ä–Ω–∏–∫', breakfast: '–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç', lunch: '–û–≤–æ—â–Ω–æ–π —Å—É–ø', dinner: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Å–∞–ª–∞—Ç–æ–º' },
        { day: '–°—Ä–µ–¥–∞', breakfast: '–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏', lunch: '–°–∞–ª–∞—Ç —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏', dinner: '–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞' },
        { day: '–ß–µ—Ç–≤–µ—Ä–≥', breakfast: '–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏', lunch: '–ö—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω', dinner: '–¢—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏' },
        { day: '–ü—è—Ç–Ω–∏—Ü–∞', breakfast: '–°–º—É–∑–∏ —Å –∑–µ–ª–µ–Ω—å—é', lunch: '–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º', dinner: '–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É' },
        { day: '–°—É–±–±–æ—Ç–∞', breakfast: '–¢–æ—Å—Ç —Å –∞–≤–æ–∫–∞–¥–æ', lunch: '–û–≤–æ—â–Ω–æ–π —Å—É–ø-–ø—é—Ä–µ', dinner: '–ö—É—Ä–∏–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã –Ω–∞ –ø–∞—Ä—É' },
        { day: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', breakfast: '–ì—Ä–µ—á–∫–∞ —Å –º–æ–ª–æ–∫–æ–º', lunch: '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π', dinner: '–û–≤–æ—â–∏ –Ω–∞ –≥—Ä–∏–ª–µ' }
      ]
    };

    return plans[goals] || plans.healthy;
  };

  return (
    <div 
      className="ai-coach-container"
      style={{
        backgroundImage: 'url("https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        minHeight: '100vh',
        position: 'relative'
      }}
    >
      {/* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(0, 0, 0, 0.5)',
        zIndex: 1
      }}></div>
      
      <div style={{ position: 'relative', zIndex: 2 }}>
        <div className="ai-coach-header">
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
            <h2>ü§ñ {t.aiCoach?.title || 'AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é'}</h2>
            <button
              onClick={() => navigate('/client/menu')}
              style={{
                background: 'linear-gradient(135deg, #6c757d, #495057)',
                color: 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold',
                boxShadow: '0 4px 15px rgba(108, 117, 125, 0.4)',
                transition: 'all 0.3s ease',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}
              onMouseEnter={(e) => {
                e.target.style.transform = 'translateY(-2px)';
                e.target.style.boxShadow = '0 6px 20px rgba(108, 117, 125, 0.6)';
              }}
              onMouseLeave={(e) => {
                e.target.style.transform = 'translateY(0)';
                e.target.style.boxShadow = '0 4px 15px rgba(108, 117, 125, 0.4)';
              }}
            >
              ‚Üê {t.common?.back || '–ù–∞–∑–∞–¥'} {(typeof t.clientMenu === 'string' ? t.clientMenu : t.clientMenu?.title) || '–ú–µ–Ω—é'}
            </button>
          </div>
          <p>{t.aiCoach.subtitle}</p>
        </div>

      <div className="ai-coach-content">
        {/* –í—ã–±–æ—Ä —Ü–µ–ª–µ–π */}
        <div className="goals-section">
          <h3>üéØ {t.aiCoach.selectGoal}</h3>
          <div className="goals-grid">
            <button 
              className={`goal-button ${userGoals === 'weight_loss' ? 'active' : ''}`}
              onClick={() => setUserGoals('weight_loss')}
            >
              üí™ {t.aiCoach.weightLoss}
            </button>
            <button 
              className={`goal-button ${userGoals === 'muscle_gain' ? 'active' : ''}`}
              onClick={() => setUserGoals('muscle_gain')}
            >
              üèãÔ∏è {t.aiCoach.muscleGain}
            </button>
            <button 
              className={`goal-button ${userGoals === 'healthy' ? 'active' : ''}`}
              onClick={() => setUserGoals('healthy')}
            >
              üå± {t.aiCoach.healthyEating}
            </button>
          </div>
        </div>

        {/* –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ */}
        <div className="analysis-section">
          <h3>üìä {t.aiCoach.analyzeOrders}</h3>
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-number">{orderHistory.length}</div>
              <div className="stat-label">{t.aiCoach.totalOrders}</div>
            </div>
            <div className="stat-card">
              <div className="stat-number">{orderHistory.reduce((sum, order) => sum + (order.items?.length || 0), 0)}</div>
              <div className="stat-label">{t.aiCoach.dishesOrdered}</div>
            </div>
          </div>
          
          <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
            <button 
              className="analyze-button"
              onClick={analyzeOrderHistory}
              disabled={isAnalyzing}
            >
              {isAnalyzing ? `üîÑ ${t.aiCoach.analyzing}` : `üîç ${t.aiCoach.analyzeButton}`}
            </button>
            
            <button 
              onClick={() => setShowOrderAnalysis(true)}
              style={{
                background: 'linear-gradient(135deg, #2196f3, #1976d2)',
                color: 'white',
                border: 'none',
                padding: '12px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold',
                boxShadow: '0 4px 15px rgba(33, 150, 243, 0.4)',
                transition: 'all 0.3s ease',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginTop: '10px'
              }}
              onMouseEnter={(e) => {
                e.target.style.transform = 'translateY(-2px)';
                e.target.style.boxShadow = '0 6px 20px rgba(33, 150, 243, 0.6)';
              }}
              onMouseLeave={(e) => {
                e.target.style.transform = 'translateY(0)';
                e.target.style.boxShadow = '0 4px 15px rgba(33, 150, 243, 0.4)';
              }}
            >
              ü§ñ –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑
            </button>
            
            <button 
              onClick={() => setShowMealPlanner(true)}
              style={{
                background: 'linear-gradient(135deg, #ff9800, #f57c00)',
                color: 'white',
                border: 'none',
                padding: '12px 20px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold',
                boxShadow: '0 4px 15px rgba(255, 152, 0, 0.4)',
                transition: 'all 0.3s ease',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginTop: '10px'
              }}
              onMouseEnter={(e) => {
                e.target.style.transform = 'translateY(-2px)';
                e.target.style.boxShadow = '0 6px 20px rgba(255, 152, 0, 0.6)';
              }}
              onMouseLeave={(e) => {
                e.target.style.transform = 'translateY(0)';
                e.target.style.boxShadow = '0 4px 15px rgba(255, 152, 0, 0.4)';
              }}
            >
              üçΩÔ∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 3 –¥–Ω—è
            </button>
            
            {orderHistory.length === 0 && (
              <button 
                className="demo-button"
                onClick={createDemoOrders}
                style={{
                  background: 'linear-gradient(135deg, #28a745, #20c997)',
                  color: 'white',
                  border: 'none',
                  padding: '12px 20px',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  boxShadow: '0 4px 15px rgba(40, 167, 69, 0.4)',
                  transition: 'all 0.3s ease',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}
                onMouseEnter={(e) => {
                  e.target.style.transform = 'translateY(-2px)';
                  e.target.style.boxShadow = '0 6px 20px rgba(40, 167, 69, 0.6)';
                }}
                onMouseLeave={(e) => {
                  e.target.style.transform = 'translateY(0)';
                  e.target.style.boxShadow = '0 4px 15px rgba(40, 167, 69, 0.4)';
                }}
              >
                üéØ –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞–∫–∞–∑—ã
              </button>
            )}
          </div>
        </div>

        {/* AI-—Å–æ–≤–µ—Ç—ã */}
        {advice && advice.length > 0 && (
          <div className="advice-section">
            <h3>üí° {t.aiCoach.aiAdvice}</h3>
            <div className="advice-list">
              {advice.map((item, index) => (
                <div key={index} className={`advice-item ${item.type}`}>
                  <div className="advice-icon">{item.icon}</div>
                  <div className="advice-content">
                    <h4>{item.title}</h4>
                    <p>{item.message}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isAnalyzing && (
          <div className="loading-section">
            <h3>üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã...</h3>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, AI –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ.</p>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ */}
        {!isAnalyzing && advice && advice.length === 0 && orderHistory.length > 0 && (
          <div className="no-advice-section">
            <h3>üí° {t.aiCoach.aiAdvice}</h3>
            <p>–û—Ç–ª–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –í–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ.</p>
          </div>
        )}

        {/* –ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω */}
        {weeklyPlan && weeklyPlan.length > 0 && (
          <div className="weekly-plan-section">
            <h3>üìÖ {t.aiCoach.weeklyPlan}</h3>
            <div className="weekly-plan-grid">
              {weeklyPlan.map((day, index) => (
                <div key={index} className="day-plan">
                  <h4>{day.day}</h4>
                  <div className="meals">
                    <div className="meal">
                      <span className="meal-time">üåÖ {t.aiCoach.breakfast}:</span>
                      <span className="meal-name">{day.breakfast}</span>
                    </div>
                    <div className="meal">
                      <span className="meal-time">‚òÄÔ∏è {t.aiCoach.lunch}:</span>
                      <span className="meal-name">{day.lunch}</span>
                    </div>
                    <div className="meal">
                      <span className="meal-time">üåô {t.aiCoach.dinner}:</span>
                      <span className="meal-name">{day.dinner}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* AI Order Analysis Modal */}
        {showOrderAnalysis && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.7)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000,
            padding: '20px'
          }}>
            <div style={{
              background: 'white',
              borderRadius: '15px',
              maxWidth: '800px',
              width: '100%',
              maxHeight: '90vh',
              overflow: 'hidden',
              position: 'relative'
            }}>
              <AIOrderAnalysis
                orders={orderHistory}
                userGoals={userGoals}
                onClose={() => setShowOrderAnalysis(false)}
              />
            </div>
          </div>
        )}

        {/* AI Meal Planner Modal */}
        {showMealPlanner && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.7)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000,
            padding: '20px'
          }}>
            <div style={{
              background: 'white',
              borderRadius: '15px',
              maxWidth: '900px',
              width: '100%',
              maxHeight: '90vh',
              overflow: 'hidden',
              position: 'relative'
            }}>
              <AIMealPlanner
                availableDishes={availableDishes}
                onClose={() => setShowMealPlanner(false)}
              />
            </div>
          </div>
        )}
      </div>
      </div>
    </div>
  );
};

export default AICoach;

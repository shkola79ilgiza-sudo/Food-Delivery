// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö

import React, { useState, useEffect } from 'react';
import { getDatabaseStatistics, searchProducts } from '../utils/calorizatorInspiredDatabase';
import '../App.css';

const DatabaseStatistics = ({ onProductSelect }) => {
  const [statistics, setStatistics] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showSearchResults, setShowSearchResults] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const stats = getDatabaseStatistics();
    setStatistics(stats);
  }, []);

  // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  useEffect(() => {
    if (searchQuery.trim().length > 2) {
      const results = searchProducts(searchQuery);
      setSearchResults(results.slice(0, 10)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      setShowSearchResults(true);
    } else {
      setSearchResults([]);
      setShowSearchResults(false);
    }
  }, [searchQuery]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
  const handleProductSelect = (product) => {
    if (onProductSelect) {
      onProductSelect(product);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      const results = searchProducts(searchQuery);
      setSearchResults(results);
      setShowSearchResults(true);
    }
  };

  if (!statistics) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  return (
    <div className="database-statistics-container" style={{ padding: '20px' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '20px'
      }}>
        <h2 style={{ margin: 0, color: '#333' }}>üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏</h2>
        <div style={{ 
          fontSize: '14px', 
          color: '#666',
          background: '#f8f9fa',
          padding: '8px 12px',
          borderRadius: '6px'
        }}>
          –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: <strong>{statistics.totalProducts}</strong>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div style={{ marginBottom: '20px' }}>
        <form onSubmit={handleSearch} style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —è–±–ª–æ–∫–æ, —Ä–∏—Å)..."
            style={{
              flex: 1,
              padding: '10px 12px',
              border: '1px solid #ddd',
              borderRadius: '6px',
              fontSize: '14px'
            }}
          />
          <button
            type="submit"
            style={{
              background: '#2196F3',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              padding: '10px 20px',
              fontSize: '14px',
              cursor: 'pointer',
              fontWeight: 'bold'
            }}
          >
            üîç –ü–æ–∏—Å–∫
          </button>
        </form>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
        {showSearchResults && (
          <div style={{
            background: 'white',
            border: '1px solid #ddd',
            borderRadius: '8px',
            padding: '15px',
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
            maxHeight: '300px',
            overflowY: 'auto'
          }}>
            <h4 style={{ margin: '0 0 10px 0', color: '#333' }}>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({searchResults.length})
            </h4>
            {searchResults.length > 0 ? (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                {searchResults.map((product, index) => (
                  <div
                    key={index}
                    onClick={() => handleProductSelect(product)}
                    style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: '8px 12px',
                      background: '#f8f9fa',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease',
                      border: '1px solid transparent'
                    }}
                    onMouseOver={(e) => {
                      e.target.style.background = '#e3f2fd';
                      e.target.style.borderColor = '#2196F3';
                    }}
                    onMouseOut={(e) => {
                      e.target.style.background = '#f8f9fa';
                      e.target.style.borderColor = 'transparent';
                    }}
                  >
                    <div>
                      <div style={{ fontWeight: 'bold', fontSize: '14px' }}>
                        {product.name}
                      </div>
                      <div style={{ fontSize: '12px', color: '#666' }}>
                        {product.category}
                      </div>
                    </div>
                    <div style={{ textAlign: 'right', fontSize: '12px' }}>
                      <div style={{ fontWeight: 'bold', color: '#2196F3' }}>
                        {product.calories} –∫–∫–∞–ª
                      </div>
                      <div style={{ color: '#666' }}>
                        –ë: {product.protein}–≥ –ñ: {product.fat}–≥ –£: {product.carbs}–≥
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div style={{ textAlign: 'center', color: '#666', padding: '20px' }}>
                –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </div>
            )}
          </div>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
        gap: '15px' 
      }}>
        {Object.entries(statistics.categoryStats).map(([category, count]) => (
          <div
            key={category}
            style={{
              background: 'white',
              border: '1px solid #e0e0e0',
              borderRadius: '8px',
              padding: '15px',
              textAlign: 'center',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
            onMouseOver={(e) => {
              e.target.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
              e.target.style.transform = 'translateY(-2px)';
            }}
            onMouseOut={(e) => {
              e.target.style.boxShadow = 'none';
              e.target.style.transform = 'translateY(0)';
            }}
            onClick={() => setSelectedCategory(category)}
          >
            <div style={{ fontSize: '24px', marginBottom: '8px' }}>
              {getCategoryIcon(category)}
            </div>
            <div style={{ 
              fontSize: '16px', 
              fontWeight: 'bold', 
              color: '#333',
              marginBottom: '4px'
            }}>
              {getCategoryName(category)}
            </div>
            <div style={{ 
              fontSize: '14px', 
              color: '#666',
              marginBottom: '8px'
            }}>
              {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            </div>
            <div style={{
              background: selectedCategory === category ? '#2196F3' : '#f0f0f0',
              color: selectedCategory === category ? 'white' : '#666',
              padding: '4px 8px',
              borderRadius: '4px',
              fontSize: '12px',
              fontWeight: 'bold'
            }}>
              {selectedCategory === category ? '–í—ã–±—Ä–∞–Ω–æ' : '–í—ã–±—Ä–∞—Ç—å'}
            </div>
          </div>
        ))}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö */}
      <div style={{
        marginTop: '20px',
        padding: '15px',
        background: '#f8f9fa',
        borderRadius: '8px',
        border: '1px solid #e0e0e0'
      }}>
        <h4 style={{ margin: '0 0 10px 0', color: '#333' }}>
          ‚ÑπÔ∏è –û –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        </h4>
        <div style={{ fontSize: '14px', color: '#666', lineHeight: '1.5' }}>
          <p style={{ margin: '0 0 8px 0' }}>
            –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç <strong>{statistics.totalProducts}</strong> –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è 
            —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ë–ñ–£.
          </p>
          <p style={{ margin: '0 0 8px 0' }}>
            –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ <strong>Calorizator.ru</strong> - –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö 
            –ø–æ–ª–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –†–æ—Å—Å–∏–∏.
          </p>
          <p style={{ margin: '0' }}>
            –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –Ω–∞ 100 –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è.
          </p>
        </div>
      </div>
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getCategoryIcon = (category) => {
  const icons = {
    meat: 'ü•©',
    fish: 'üêü',
    vegetables: 'ü•ï',
    fruits: 'üçé',
    dairy: 'ü•õ',
    cheese: 'üßÄ',
    cereals: 'üåæ',
    bread: 'üçû',
    pasta: 'üçù',
    oils: 'ü´í',
    nuts: 'ü•ú',
    eggs: 'ü•ö',
    diabetic: 'üçØ',
    seafood: 'ü¶ê',
    dried_fruits: 'üçá',
    sweetener: 'üçØ',
    mushrooms: 'üçÑ',
    sausages: 'üå≠',
    cereals_extended: 'üåæ',
    oils_extended: 'ü´í',
    dairy_extended: 'ü•õ',
    vegetables_extended: 'ü•¨',
    nuts_dried_fruits_extended: 'ü•ú',
    fish_seafood_extended: 'üêü',
    snacks_extended: 'üçø',
    cheese_curd_extended: 'üßÄ',
    ingredients_spices_extended: 'üå∂Ô∏è',
    fruits_extended: 'üçé',
    bakery_extended: 'ü•ñ',
    berries_extended: 'üçì',
    eggs_extended: 'ü•ö',
    confectionery_extended: 'üç∞',
    cakes_extended: 'üéÇ',
    beverages_extended: 'ü•§',
    juices_compotes_extended: 'üßÉ',
    salads_extended: 'ü•ó',
    soups_extended: 'üç≤'
  };
  return icons[category] || 'üì¶';
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getCategoryName = (category) => {
  const names = {
    meat: '–ú—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    fish: '–†—ã–±–∞',
    vegetables: '–û–≤–æ—â–∏',
    fruits: '–§—Ä—É–∫—Ç—ã',
    dairy: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    cheese: '–°—ã—Ä—ã',
    cereals: '–ö—Ä—É–ø—ã',
    bread: '–•–ª–µ–±',
    pasta: '–ú–∞–∫–∞—Ä–æ–Ω—ã',
    oils: '–ú–∞—Å–ª–∞',
    nuts: '–û—Ä–µ—Ö–∏',
    eggs: '–Ø–π—Ü–∞',
    diabetic: '–î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ',
    seafood: '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
    dried_fruits: '–°—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã',
    sweetener: '–ó–∞–º–µ–Ω–∏—Ç–µ–ª–∏ —Å–∞—Ö–∞—Ä–∞',
    mushrooms: '–ì—Ä–∏–±—ã',
    sausages: '–ö–æ–ª–±–∞—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
    cereals_extended: '–ö—Ä—É–ø—ã –∏ –∫–∞—à–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    oils_extended: '–ú–∞—Å–ª–∞ –∏ –∂–∏—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    dairy_extended: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    vegetables_extended: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    nuts_dried_fruits_extended: '–û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    fish_seafood_extended: '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    snacks_extended: '–°–Ω—ç–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    cheese_curd_extended: '–°—ã—Ä—ã –∏ —Ç–≤–æ—Ä–æ–≥ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    ingredients_spices_extended: '–°—ã—Ä—å–µ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    fruits_extended: '–§—Ä—É–∫—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    bakery_extended: '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    berries_extended: '–Ø–≥–æ–¥—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    eggs_extended: '–Ø–π—Ü–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    confectionery_extended: '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    cakes_extended: '–¢–æ—Ä—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    beverages_extended: '–ù–∞–ø–∏—Ç–∫–∏ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    juices_compotes_extended: '–°–æ–∫–∏ –∏ –∫–æ–º–ø–æ—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    salads_extended: '–°–∞–ª–∞—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)',
    soups_extended: '–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)'
  };
  return names[category] || category;
};

export default DatabaseStatistics;

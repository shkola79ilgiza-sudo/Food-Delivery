import React, { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';

const ClientOrderDetails = () => {
  const { orderId } = useParams();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('authToken');
    const role = localStorage.getItem('role');
    
    if (!token || role !== 'client') {
      navigate('/client/login');
      return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    const fetchOrder = async () => {
      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        // const response = await fetch(`api/client/orders/${orderId}`, {
        //   headers: { Authorization: `Bearer ${token}` }
        // });
        // const data = await response.json();
        // if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞');
        // setOrder(data);

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const mockOrder = {
          id: orderId || 'ORD-12345',
          date: '2023-06-15T10:30:00',
          status: 'delivering',
          items: [
            { name: '–ë–æ—Ä—â', quantity: 1, price: 350 },
            { name: '–ü–µ–ª—å–º–µ–Ω–∏', quantity: 2, price: 450 },
            { name: '–ö–æ–º–ø–æ—Ç', quantity: 1, price: 150 }
          ],
          subtotal: 1250,
          discount: 100,
          deliveryCost: 200,
          payment: {
            method: 'card',
            total: 1350
          },
          customer: {
            name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            phone: '+7 (999) 123-45-67',
            address: '—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5'
          },
          delivery: {
            date: '2023-06-15',
            time: '12:30-13:00'
          },
          chef: {
            id: 1,
            name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
            rating: 4.8
          },
          comment: '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏'
        };
        
        setOrder(mockOrder);
      } catch (err) {
        console.error('Error fetching order:', err);
        setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchOrder();
  }, [orderId, navigate]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
  const formatOrderDate = (dateString) => {
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    
    return `${day}.${month}.${year} ${hours}:${minutes}`;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  const formatDeliveryTime = (date, time) => {
    if (!date || !time) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const deliveryDate = new Date(date);
    const day = deliveryDate.getDate().toString().padStart(2, '0');
    const month = (deliveryDate.getMonth() + 1).toString().padStart(2, '0');
    const year = deliveryDate.getFullYear();
    
    return `${day}.${month}.${year} –≤ ${time}`;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  const formatStatus = (status) => {
    const statusMap = {
      'new': '–ù–æ–≤—ã–π',
      'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'cooking': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      'delivering': '–í –ø—É—Ç–∏',
      'completed': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    
    return statusMap[status] || status;
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  const formatPaymentMethod = (method) => {
    const methodMap = {
      'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
      'card': '–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
      'online': '–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞'
    };
    
    return methodMap[method] || method;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
  const handleCancelOrder = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?')) return;
    
    setLoading(true);
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
      // const response = await fetch(`api/client/orders/${orderId}/cancel`, {
      //   method: 'POST',
      //   headers: { Authorization: `Bearer ${localStorage.getItem('authToken')}` }
      // });
      // const data = await response.json();
      // if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞');
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã
      setOrder(prev => ({ ...prev, status: 'cancelled' }));
      alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω');
    } catch (err) {
      console.error('Error cancelling order:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const handleReorder = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    const cartItems = order.items.map(item => ({
      id: Math.random().toString(36).substr(2, 9), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
      name: item.name,
      price: item.price,
      quantity: item.quantity
    }));
    
    localStorage.setItem('cart', JSON.stringify(cartItems));
    navigate('/client/cart');
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ...</div>;
  }

  if (error) {
    return (
      <div className="error-container">
        <h2>–û—à–∏–±–∫–∞</h2>
        <p>{error}</p>
        <button onClick={() => window.location.reload()}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="order-not-found">
        <h2>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <p>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω</p>
        <Link to="/client/orders" className="back-button">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤</Link>
      </div>
    );
  }

  return (
    <div className="order-details-container">
      <div className="order-details-header">
        <h1>–ó–∞–∫–∞–∑ #{order.id}</h1>
        <div className="order-date">
          –æ—Ç {formatOrderDate(order.date)}
        </div>
      </div>

      <div className="order-status-card">
        <div className="status-icon">
          {order.status === 'new' && 'üÜï'}
          {order.status === 'processing' && '‚è≥'}
          {order.status === 'cooking' && 'üë®‚Äçüç≥'}
          {order.status === 'delivering' && 'üöö'}
          {order.status === 'completed' && '‚úÖ'}
          {order.status === 'cancelled' && '‚ùå'}
        </div>
        <div className="status-info">
          <h3>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</h3>
          <p className={`status ${order.status}`}>{formatStatus(order.status)}</p>
        </div>
      </div>

      <div className="order-details-content">
        <div className="order-section">
          <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</h2>
          <div className="info-grid">
            <div className="info-item">
              <span className="info-label">–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</span>
              <span className="info-value">{order.customer.name}</span>
            </div>
            <div className="info-item">
              <span className="info-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
              <span className="info-value">{order.customer.phone}</span>
            </div>
            <div className="info-item">
              <span className="info-label">–ê–¥—Ä–µ—Å:</span>
              <span className="info-value">{order.customer.address}</span>
            </div>
            <div className="info-item">
              <span className="info-label">–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</span>
              <span className="info-value">{formatDeliveryTime(order.delivery.date, order.delivery.time)}</span>
            </div>
          </div>
        </div>

        <div className="order-section">
          <h2>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</h2>
          <div className="items-list">
            {order.items.map((item, index) => (
              <div key={index} className="order-item">
                <div className="item-quantity">{item.quantity} √ó</div>
                <div className="item-name">{item.name}</div>
                <div className="item-price">{item.price * item.quantity} ‚ÇΩ</div>
              </div>
            ))}
          </div>
          
          <div className="order-summary">
            <div className="summary-row">
              <span>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</span>
              <span>{order.subtotal} ‚ÇΩ</span>
            </div>
            {order.discount > 0 && (
              <div className="summary-row discount">
                <span>–°–∫–∏–¥–∫–∞:</span>
                <span>-{order.discount} ‚ÇΩ</span>
              </div>
            )}
            <div className="summary-row">
              <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
              <span>{order.deliveryCost > 0 ? `${order.deliveryCost} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
            </div>
            <div className="summary-row total">
              <span>–ò—Ç–æ–≥–æ:</span>
              <span>{order.payment.total} ‚ÇΩ</span>
            </div>
          </div>
        </div>

        <div className="order-section">
          <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</h2>
          <div className="info-grid">
            <div className="info-item">
              <span className="info-label">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</span>
              <span className="info-value">{formatPaymentMethod(order.payment.method)}</span>
            </div>
            <div className="info-item">
              <span className="info-label">–°—É–º–º–∞:</span>
              <span className="info-value">{order.payment.total} ‚ÇΩ</span>
            </div>
          </div>
        </div>

        {order.chef && (
          <div className="order-section">
            <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤–∞—Ä–µ</h2>
            <div className="chef-card">
              <div className="chef-avatar">üë®‚Äçüç≥</div>
              <div className="chef-info">
                <div className="chef-name">{order.chef.name}</div>
                <div className="chef-rating">‚≠ê {order.chef.rating}</div>
              </div>
              <Link to="/client/chat" className="contact-chef-button">
                –°–≤—è–∑–∞—Ç—å—Å—è
              </Link>
            </div>
          </div>
        )}

        {order.comment && (
          <div className="order-section">
            <h2>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</h2>
            <div className="order-comment">
              {order.comment}
            </div>
          </div>
        )}

        <div className="order-actions">
          {(order.status === 'new' || order.status === 'processing') && (
            <button 
              onClick={handleCancelOrder} 
              className="cancel-order-button"
              disabled={loading}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          )}
          
          {order.status === 'completed' && (
            <button 
              onClick={handleReorder} 
              className="reorder-button"
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          )}
          
          <Link to="/client/orders" className="back-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ClientOrderDetails;
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';

const ClientChat = () => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [chefs, setChefs] = useState([]);
  const [selectedChef, setSelectedChef] = useState(null);
  const messagesEndRef = useRef(null);
  const navigate = useNavigate();

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('authToken');
    const role = localStorage.getItem('role');
    
    if (!token || role !== 'client') {
      navigate('/client/login');
      return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–≤–∞—Ä–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const fetchData = async () => {
      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–≤–∞—Ä–æ–≤
        // const chefsResponse = await fetch('api/client/chefs', {
        //   headers: { Authorization: `Bearer ${token}` }
        // });
        // const chefsData = await chefsResponse.json();
        // if (!chefsResponse.ok) throw new Error(chefsData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–≤–∞—Ä–æ–≤');
        // setChefs(chefsData);

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const mockChefs = [
          { id: 1, name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', avatar: 'üë®‚Äçüç≥', rating: 4.8 },
          { id: 2, name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', avatar: 'üë©‚Äçüç≥', rating: 4.9 },
          { id: 3, name: '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤', avatar: 'üë®‚Äçüç≥', rating: 4.7 }
        ];
        
        setChefs(mockChefs);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–≤–∞—Ä, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const savedChefId = localStorage.getItem('selectedChefId');
        if (savedChefId) {
          const chef = mockChefs.find(c => c.id === parseInt(savedChefId));
          if (chef) {
            setSelectedChef(chef);
            loadMessages(chef.id);
          }
        }
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [navigate]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–∞—Ä–∞
  const loadMessages = async (chefId) => {
    setLoading(true);
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      // const response = await fetch(`api/client/messages/${chefId}`, {
      //   headers: { Authorization: `Bearer ${localStorage.getItem('authToken')}` }
      // });
      // const data = await response.json();
      // if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
      // setMessages(data);

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const mockMessages = [
        { id: 1, sender: 'chef', text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', timestamp: '2023-06-20T10:30:00' },
        { id: 2, sender: 'client', text: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—Ç–µ–ª —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –ø–æ–≤–æ–¥—É –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞ #12345', timestamp: '2023-06-20T10:31:00' },
        { id: 3, sender: 'chef', text: '–ö–æ–Ω–µ—á–Ω–æ, –≤–∞—à –∑–∞–∫–∞–∑ —Å–µ–π—á–∞—Å –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –ë—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç.', timestamp: '2023-06-20T10:32:00' },
        { id: 4, sender: 'client', text: '–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ê –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É –µ—â–µ –æ–¥–∏–Ω –¥–µ—Å–µ—Ä—Ç?', timestamp: '2023-06-20T10:33:00' },
        { id: 5, sender: 'chef', text: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑.', timestamp: '2023-06-20T10:34:00' }
      ];
      
      setMessages(mockMessages);
      localStorage.setItem('selectedChefId', chefId);
    } catch (err) {
      console.error('Error loading messages:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } finally {
      setLoading(false);
    }
  };

  // –í—ã–±–æ—Ä –ø–æ–≤–∞—Ä–∞ –¥–ª—è —á–∞—Ç–∞
  const handleSelectChef = (chef) => {
    setSelectedChef(chef);
    loadMessages(chef.id);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!newMessage.trim() || !selectedChef) return;

    // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
    // const messageData = {
    //   text: newMessage,
    //   chefId: selectedChef.id
    // };

    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      // const response = await fetch('api/client/messages', {
      //   method: 'POST',
      //   headers: { 
      //     'Content-Type': 'application/json',
      //     Authorization: `Bearer ${localStorage.getItem('authToken')}` 
      //   },
      //   body: JSON.stringify(messageData)
      // });
      // const data = await response.json();
      // if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const newMsg = {
        id: messages.length + 1,
        sender: 'client',
        text: newMessage,
        timestamp: new Date().toISOString()
      };
      
      setMessages([...messages, newMsg]);
      setNewMessage('');

      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        const chefReply = {
          id: messages.length + 2,
          sender: 'chef',
          text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É.',
          timestamp: new Date().toISOString()
        };
        setMessages(prev => [...prev, chefReply]);
      }, 1000);
    } catch (err) {
      console.error('Error sending message:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatMessageTime = (timestamp) => {
    const date = new Date(timestamp);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  };

  if (loading && !selectedChef) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</div>;
  }

  if (error && !selectedChef) {
    return (
      <div className="error-container">
        <h2>–û—à–∏–±–∫–∞</h2>
        <p>{error}</p>
        <button onClick={() => window.location.reload()}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </div>
    );
  }

  return (
    <div className="client-chat-container">
      <h1>–ß–∞—Ç —Å –ø–æ–≤–∞—Ä–æ–º</h1>
      
      <div className="chat-layout">
        <div className="chefs-sidebar">
          <h2>–ü–æ–≤–∞—Ä–∞</h2>
          <div className="chefs-list">
            {chefs.map((chef) => (
              <div 
                key={chef.id} 
                className={`chef-item ${selectedChef?.id === chef.id ? 'selected' : ''}`}
                onClick={() => handleSelectChef(chef)}
              >
                <div className="chef-avatar">{chef.avatar}</div>
                <div className="chef-info">
                  <div className="chef-name">{chef.name}</div>
                  <div className="chef-rating">‚≠ê {chef.rating}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="chat-main">
          {selectedChef ? (
            <>
              <div className="chat-header">
                <div className="chat-with">
                  <span>–ß–∞—Ç —Å</span>
                  <strong>{selectedChef.name}</strong>
                </div>
                <div className="chef-status online">–í —Å–µ—Ç–∏</div>
              </div>
              
              <div className="messages-container">
                {messages.length === 0 ? (
                  <div className="no-messages">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º –ø–æ–≤–∞—Ä–æ–º</p>
                    <p>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
                  </div>
                ) : (
                  <div className="messages-list">
                    {messages.map((message) => (
                      <div 
                        key={message.id} 
                        className={`message ${message.sender === 'client' ? 'outgoing' : 'incoming'}`}
                      >
                        <div className="message-content">
                          <div className="message-text">{message.text}</div>
                          <div className="message-time">{formatMessageTime(message.timestamp)}</div>
                        </div>
                      </div>
                    ))}
                    <div ref={messagesEndRef} />
                  </div>
                )}
              </div>
              
              <form className="message-form" onSubmit={handleSendMessage}>
                <input
                  type="text"
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  required
                />
                <button type="submit" disabled={!newMessage.trim()}>
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </form>
            </>
          ) : (
            <div className="select-chef-prompt">
              <div className="prompt-icon">üí¨</div>
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</h3>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç</p>
            </div>
          )}
        </div>
      </div>
      
      <div className="chat-actions">
        <button 
          onClick={() => navigate('/client/menu')}
          className="back-to-menu-button"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        </button>
      </div>
    </div>
  );
};

export default ClientChat;
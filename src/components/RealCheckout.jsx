import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
// import { ordersAPI } from "../api/backend"; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
import { useToast } from "../contexts/ToastContext";
import "./RealCheckout.css";

const RealCheckout = () => {
  const navigate = useNavigate();
  const { user, isAuthenticated } = useAuth();
  const { showSuccess, showError } = useToast();

  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(false);
  const [deliveryAddress, setDeliveryAddress] = useState("");
  const [notes, setNotes] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("card");
  const [cardData, setCardData] = useState({
    number: "",
    expiry: "",
    cvv: "",
    holderName: "",
  });
  const [isGettingLocation, setIsGettingLocation] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  useEffect(() => {
    const savedCart = JSON.parse(localStorage.getItem("cart") || "[]");
    console.log("üõí –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞:", savedCart);
    setCart(savedCart);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    if (user?.client?.address) {
      setDeliveryAddress(user.client.address);
    }
  }, [user]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  const formatCardNumber = (value) => {
    const v = value.replace(/\s+/g, "").replace(/[^0-9]/gi, "");
    const matches = v.match(/\d{4,16}/g);
    const match = (matches && matches[0]) || "";
    const parts = [];
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    if (parts.length) {
      return parts.join(" ");
    } else {
      return v;
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã
  const formatExpiry = (value) => {
    const v = value.replace(/\s+/g, "").replace(/[^0-9]/gi, "");
    if (v.length >= 2) {
      return v.substring(0, 2) + "/" + v.substring(2, 4);
    }
    return v;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const getCurrentLocation = () => {
    console.log("üîç getCurrentLocation –≤—ã–∑–≤–∞–Ω–∞ –≤ RealCheckout");

    if (!navigator.geolocation) {
      showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
      return;
    }

    setIsGettingLocation(true);

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude, longitude } = position.coords;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
          const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1`
          );

          if (response.ok) {
            const data = await response.json();
            if (data.display_name) {
              setDeliveryAddress(data.display_name);
              showSuccess("–ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
            } else {
              setDeliveryAddress(
                `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`
              );
              showSuccess("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!");
            }
          } else {
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            setDeliveryAddress(
              `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`
            );
            showSuccess("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!");
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:", error);
          const { latitude, longitude } = position.coords;
          setDeliveryAddress(`${latitude.toFixed(6)}, ${longitude.toFixed(6)}`);
          showSuccess("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!");
        } finally {
          setIsGettingLocation(false);
        }
      },
      (error) => {
        setIsGettingLocation(false);
        switch (error.code) {
          case error.PERMISSION_DENIED:
            showError(
              "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞."
            );
            break;
          case error.POSITION_UNAVAILABLE:
            showError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
            break;
          case error.TIMEOUT:
            showError("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.");
            break;
          default:
            showError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.");
            break;
        }
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000, // 5 –º–∏–Ω—É—Ç
      }
    );
  };

  // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã
  const subtotal = cart.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );
  const platformFee = subtotal * 0.1;
  const total = subtotal + platformFee;

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!isAuthenticated) {
      showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É");
      navigate("/login");
      return;
    }

    if (cart.length === 0) {
      showError("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
      return;
    }

    setLoading(true);

    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ backend API
      const orderData = {
        items: cart.map((item) => ({
          dishId: item.id,
          quantity: item.quantity,
          notes: item.notes || "",
        })),
        deliveryAddress,
        notes,
        paymentMethod,
        paymentData: paymentMethod === "card" ? cardData : null,
        totalAmount: total,
        platformFee: platformFee,
        chefAmount: subtotal, // –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–≤–∞—Ä
      };

      // Mock API call - –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // –°–æ–∑–¥–∞–µ–º mock –∑–∞–∫–∞–∑
      const mockOrder = {
        id: `ORDER-${Date.now()}`,
        orderNumber: `#${Math.floor(Math.random() * 10000)}`,
        status: "pending",
        createdAt: new Date().toISOString(),
        items: orderData.items,
        totalAmount: orderData.totalAmount,
        deliveryAddress: orderData.deliveryAddress,
        paymentMethod: orderData.paymentMethod,
        platformFee: orderData.platformFee,
        chefAmount: orderData.chefAmount,
      };

      console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:", mockOrder);

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      localStorage.removeItem("cart");
      setCart([]);

      showSuccess("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      navigate("/client/order-confirmation", {
        state: {
          order: mockOrder,
        },
      });
    } catch (error) {
      console.error("Error creating order:", error);
      showError(error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
    } finally {
      setLoading(false);
    }
  };

  if (cart.length === 0) {
    return (
      <div className="checkout-container">
        <div className="empty-cart">
          <h2>üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
          <p>–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é</p>
          <button onClick={() => navigate("/client/menu")}>
            –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
          </button>
        </div>
      </div>
    );
  }

  console.log(
    "üîç RealCheckout render - cart:",
    cart,
    "paymentMethod:",
    paymentMethod
  );

  return (
    <div className="checkout-container">
      <div className="checkout-card">
        <h1>üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

        {/* –°–ø–∏—Å–æ–∫ –±–ª—é–¥ */}
        <div className="order-items">
          <h2>–í–∞—à –∑–∞–∫–∞–∑:</h2>
          {cart.map((item, index) => (
            <div key={index} className="order-item">
              <div className="item-info">
                <h3>{item.name}</h3>
                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</p>
                {item.notes && (
                  <p className="item-notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {item.notes}</p>
                )}
              </div>
              <div className="item-price">{item.price * item.quantity}‚ÇΩ</div>
            </div>
          ))}
        </div>

        {/* –§–æ—Ä–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
            <div className="address-input-group">
              <input
                type="text"
                value={deliveryAddress}
                onChange={(e) => setDeliveryAddress(e.target.value)}
                placeholder="—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5"
                required
              />
              <button
                type="button"
                onClick={getCurrentLocation}
                disabled={isGettingLocation}
                className="location-button"
                title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
              >
                {isGettingLocation ? (
                  <span className="loading-spinner">‚ü≥</span>
                ) : (
                  "üìç"
                )}
              </button>
            </div>
          </div>

          <div className="form-group">
            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</label>
            <textarea
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏..."
              rows="3"
            />
          </div>

          {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
          <div className="form-group">
            <label>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</label>
            <div className="payment-methods">
              <label className="payment-option">
                <input
                  type="radio"
                  name="paymentMethod"
                  value="card"
                  checked={paymentMethod === "card"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                <span className="payment-label">üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</span>
              </label>
              <label className="payment-option">
                <input
                  type="radio"
                  name="paymentMethod"
                  value="cash"
                  checked={paymentMethod === "cash"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                <span className="payment-label">
                  üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
                </span>
              </label>
            </div>
          </div>

          {/* –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞) */}
          {paymentMethod === "card" && (
            <div className="card-form">
              <h3>–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</h3>
              <div className="form-row">
                <div className="form-group">
                  <label>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</label>
                  <input
                    type="text"
                    value={cardData.number}
                    onChange={(e) =>
                      setCardData((prev) => ({
                        ...prev,
                        number: formatCardNumber(e.target.value),
                      }))
                    }
                    placeholder="1234 5678 9012 3456"
                    maxLength="19"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</label>
                  <input
                    type="text"
                    value={cardData.expiry}
                    onChange={(e) =>
                      setCardData((prev) => ({
                        ...prev,
                        expiry: formatExpiry(e.target.value),
                      }))
                    }
                    placeholder="MM/YY"
                    maxLength="5"
                    required
                  />
                </div>
              </div>
              <div className="form-row">
                <div className="form-group">
                  <label>CVV:</label>
                  <input
                    type="text"
                    value={cardData.cvv}
                    onChange={(e) =>
                      setCardData((prev) => ({ ...prev, cvv: e.target.value }))
                    }
                    placeholder="123"
                    maxLength="3"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è:</label>
                  <input
                    type="text"
                    value={cardData.holderName}
                    onChange={(e) =>
                      setCardData((prev) => ({
                        ...prev,
                        holderName: e.target.value,
                      }))
                    }
                    placeholder="IVAN IVANOV"
                    required
                  />
                </div>
              </div>
            </div>
          )}

          {/* –ò—Ç–æ–≥–æ */}
          <div className="order-summary">
            <div className="summary-row">
              <span>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
              <span>{subtotal}‚ÇΩ</span>
            </div>
            <div className="summary-row">
              <span>–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (10%):</span>
              <span>{platformFee.toFixed(0)}‚ÇΩ</span>
            </div>
            <div className="summary-row total">
              <span>–ò—Ç–æ–≥–æ:</span>
              <span>{total.toFixed(0)}‚ÇΩ</span>
            </div>
          </div>

          <div className="checkout-buttons">
            <button
              type="button"
              onClick={() => navigate("/client/menu")}
              className="back-button"
              disabled={loading}
            >
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            </button>
            <button type="submit" disabled={loading}>
              {loading ? "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ..." : "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RealCheckout;

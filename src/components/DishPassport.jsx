import React, { useState, useEffect, useCallback } from 'react';
import QRCode from 'qrcode';
import { useParams, useNavigate } from 'react-router-dom';
import Rating from './Rating';

const DishPassport = () => {
  const { dishId, chefId } = useParams();
  const navigate = useNavigate();
  const [dish, setDish] = useState(null);
  const [chef, setChef] = useState(null);
  const [qrCode, setQrCode] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [chefRating, setChefRating] = useState(0);
  const [chefReviewsCount, setChefReviewsCount] = useState(0);
  const [dishRating, setDishRating] = useState(0);
  const [dishReviewsCount, setDishReviewsCount] = useState(0);
  const [reviews, setReviews] = useState([]);

  const loadDishData = useCallback(async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
      const dishes = JSON.parse(localStorage.getItem(`demo_menu_${chefId}`) || '[]');
      const foundDish = dishes.find(d => d.id === dishId);
      
      if (foundDish) {
        setDish(foundDish);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        const qrData = JSON.stringify({
          dishId: foundDish.id,
          name: foundDish.name,
          chefId: chefId,
          timestamp: new Date().toISOString()
        });
        
        const qrCodeUrl = await QRCode.toDataURL(qrData);
        setQrCode(qrCodeUrl);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)
        const reviews = JSON.parse(localStorage.getItem(`dish_reviews_${dishId}`) || '[]');
        setReviews(reviews);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        if (reviews.length > 0) {
          const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
          setDishRating(avgRating);
          setDishReviewsCount(reviews.length);
        }
      } else {
        console.error('–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        navigate('/chef/menu');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞:', error);
    } finally {
      setLoading(false);
    }
  }, [dishId, chefId, navigate]);

  useEffect(() => {
    loadDishData();
  }, [dishId, chefId, loadDishData]);

  const formatDate = (dateString) => {
    if (!dateString || dateString === 'Invalid Date') {
      return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getSpecializationName = (specialization) => {
    const specializations = {
      'general': '–û–±—â–∞—è –∫—É—Ö–Ω—è',
      'tatar': '–¢–∞—Ç–∞—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è',
      'european': '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è',
      'asian': '–ê–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è',
      'vegetarian': '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è',
      'halal': '–•–∞–ª—è–ª—å–Ω–∞—è –∫—É—Ö–Ω—è'
    };
    return specializations[specialization] || specialization;
  };

  const getCategoryName = (categoryId) => {
    const categories = {
      'halal': '–•–∞–ª—è–ª—å –º–µ–Ω—é',
      'preparations': '–ó–∞–≥–æ—Ç–æ–≤–∫–∏',
      'bakery': '–í—ã–ø–µ—á–∫–∞',
      'tatar': '–¢–∞—Ç–∞—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è',
      'soups': '–°—É–ø—ã',
      'salads': '–°–∞–ª–∞—Ç—ã',
      'desserts': '–î–µ—Å–µ—Ä—Ç—ã',
      'diet': '–î–∏–µ—Ç –º–µ–Ω—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º',
      'client_products': '–ì–æ—Ç–æ–≤–∫–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
      'master_class': '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å',
      'help_cooking': '–ü–æ–º–æ—â—å –≤ –≥–æ—Ç–æ–≤–∫–µ –¥–æ –ø—Ä–∏–µ–∑–¥–∞ –≥–æ—Å—Ç–µ–π',
      'mainDishes': '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞'
    };
    return categories[categoryId] || categoryId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const getDishHistory = () => {
    if (!dish) return [];
    
    const history = [];
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
    if (dish.createdAt) {
      history.push({
        date: dish.createdAt,
        action: '–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞',
        description: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–Ω—é –ø–æ–≤–∞—Ä–∞'
      });
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      history.push({
        date: new Date().toISOString(),
        action: '–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞',
        description: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–Ω—é –ø–æ–≤–∞—Ä–∞'
      });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
    if (dish.updatedAt && dish.updatedAt !== dish.createdAt) {
      history.push({
        date: dish.updatedAt,
        action: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞',
        description: '–†–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω'
      });
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    if (dish.orders && dish.orders > 0) {
      history.push({
        date: new Date().toISOString(),
        action: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
        description: `–ó–∞–∫–∞–∑–∞–Ω–æ ${dish.orders} —Ä–∞–∑`
      });
    }
    
    return history.sort((a, b) => new Date(b.date) - new Date(a.date));
  };

  if (loading) {
    return (
      <div className="dish-passport">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ –±–ª—é–¥–∞...</div>
      </div>
    );
  }

  if (error || !dish) {
    return (
      <div className="dish-passport">
        <div className="error-message">
          <h2>‚ùå –û—à–∏–±–∫–∞</h2>
          <p>{error || '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</p>
          <button onClick={() => navigate(-1)} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="dish-passport">
      <div className="passport-header">
        <button onClick={() => navigate(-1)} className="back-button">
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <h1>üìã –ü–∞—Å–ø–æ—Ä—Ç –±–ª—é–¥–∞</h1>
        <div className="qr-code-section">
          <img src={qrCode} alt="QR-–∫–æ–¥ –±–ª—é–¥–∞" className="qr-code" />
          <p className="qr-note">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ</p>
        </div>
      </div>

      <div className="passport-content">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ */}
        <div className="dish-info-section">
          <div className="dish-image">
            {(dish.image || dish.photo) ? (
              <img src={dish.image || dish.photo} alt={dish.name} />
            ) : (
              <div className="no-image">üçΩÔ∏è</div>
            )}
          </div>
          <div className="dish-details">
            <h2>{dish.name}</h2>
            <p className="dish-description">{dish.description}</p>
            <div className="dish-meta">
              <span className="price">{dish.price} ‚ÇΩ</span>
              <span className="category">{getCategoryName(dish.category_id || dish.category)}</span>
              <div className="dish-rating">
                <Rating 
                  rating={dishRating} 
                  readOnly={true} 
                  size="medium" 
                  showValue={true}
                  showCount={true}
                  count={dishReviewsCount}
                />
                {dishRating === 0 && (
                  <span className="no-rating">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫</span>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤–∞—Ä–µ */}
        <div className="chef-info-section">
          <h3>üë®‚Äçüç≥ –ü–æ–≤–∞—Ä</h3>
          <div className="chef-details">
            <div className="chef-avatar">
              {chef?.avatar ? (
                <img src={chef.avatar} alt={chef.name} />
              ) : (
                <div className="avatar-placeholder">
                  {chef?.name ? chef.name.charAt(0).toUpperCase() : (chef?.email ? chef.email.charAt(0).toUpperCase() : '–ü')}
                </div>
              )}
            </div>
            <div className="chef-info">
              <h4>{chef?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</h4>
              <p className="chef-email">{chef?.email || chefId}</p>
              <p className="chef-specialization">
                –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {getSpecializationName(chef?.specialization) || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </p>
              <p className="chef-experience">–û–ø—ã—Ç: {chef?.experience || '0'} –ª–µ—Ç</p>
              <div className="chef-rating">
                <span className="rating-label">–†–µ–π—Ç–∏–Ω–≥:</span>
                <span className="rating-value">
                  {chefRating > 0 ? `‚≠ê ${chefRating.toFixed(1)}/5` : '–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫'}
                </span>
                {chefReviewsCount > 0 && (
                  <span className="reviews-count">({chefReviewsCount} –æ—Ç–∑—ã–≤–æ–≤)</span>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å */}
        <div className="nutrition-section">
          <h3>ü•ó –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å</h3>
          <div className="ingredients">
            <h4>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</h4>
            <p className="ingredients-text">{dish.ingredients || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
          </div>
          <div className="nutrition-grid">
            <div className="nutrition-item">
              <span className="nutrition-label">–ö–∞–ª–æ—Ä–∏–∏:</span>
              <span className="nutrition-value">{dish.calories || '–ù/–î'} –∫–∫–∞–ª</span>
            </div>
            <div className="nutrition-item">
              <span className="nutrition-label">–ë–µ–ª–∫–∏:</span>
              <span className="nutrition-value">{dish.protein || '–ù/–î'} –≥</span>
            </div>
            <div className="nutrition-item">
              <span className="nutrition-label">–£–≥–ª–µ–≤–æ–¥—ã:</span>
              <span className="nutrition-value">{dish.carbs || '–ù/–î'} –≥</span>
            </div>
            <div className="nutrition-item">
              <span className="nutrition-label">–ñ–∏—Ä—ã:</span>
              <span className="nutrition-value">{dish.fat || '–ù/–î'} –≥</span>
            </div>
          </div>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è –±–ª—é–¥–∞ */}
        <div className="history-section">
          <h3>üìà –ò—Å—Ç–æ—Ä–∏—è –±–ª—é–¥–∞</h3>
          <div className="history-timeline">
            {getDishHistory().map((event, index) => (
              <div key={index} className="history-item">
                <div className="history-date">
                  {formatDate(event.date)}
                </div>
                <div className="history-content">
                  <h4>{event.action}</h4>
                  <p>{event.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="additional-info-section">
          <h3>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          <div className="info-grid">
            <div className="info-item">
              <span className="info-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
              <span className="info-value">{dish.createdAt ? formatDate(dish.createdAt) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-item">
              <span className="info-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
              <span className="info-value">{dish.updatedAt ? formatDate(dish.updatedAt) : (dish.createdAt ? formatDate(dish.createdAt) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span>
            </div>
            <div className="info-item">
              <span className="info-label">–°—Ç–∞—Ç—É—Å:</span>
              <span className="info-value status-active">–ê–∫—Ç–∏–≤–Ω–æ</span>
            </div>
            <div className="info-item">
              <span className="info-label">–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</span>
              <span className="info-value status-verified">‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</span>
            </div>
          </div>
        </div>

        {/* –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
        {(dish.before_photo || dish.after_photo) && (
          <div className="photos-section">
            <h3>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h3>
            <div className="photos-grid">
              {dish.before_photo && (
                <div className="photo-item">
                  <h4>–î–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h4>
                  <img src={dish.before_photo} alt="–î–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è" className="process-photo" />
                </div>
              )}
              {dish.after_photo && (
                <div className="photo-item">
                  <h4>–ü–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h4>
                  <img src={dish.after_photo} alt="–ü–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è" className="process-photo" />
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DishPassport;

import React, { createContext, useContext, useState, useEffect } from 'react';
import { login as apiLogin, register as apiRegister, getProfile as apiGetProfile } from '../api/adapter';
import { 
  getCurrentUser, 
  secureLogout, 
  isAuthenticated, 
  getUserRole,
  getDemoUser,
  setDemoUser,
  clearDemoUser 
} from '../utils/auth';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ cookies
        const currentUser = await getCurrentUser();
        
        if (currentUser) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ cookies
          setUser(currentUser);
          setLoading(false);
          return;
        }
        
        // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        const demoUser = getDemoUser();
        if (demoUser) {
          console.log('üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          setUser(demoUser);
          setLoading(false);
          return;
        }
        
        // –ù–∏–∫–∞–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        setUser(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        
        // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const demoUser = getDemoUser();
        if (demoUser) {
          console.log('üîí Fallback –Ω–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ');
          setUser(demoUser);
        } else {
          setUser(null);
        }
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const register = async (userData) => {
    try {
      setError(null);
      const response = await apiRegister(userData);
      if (response.success) {
        const user = response.user || {
          id: userData.email,
          email: userData.email,
          role: userData.role?.toUpperCase() || 'CLIENT',
        };
        setUser(user);
        return { user };
      } else {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };

  // –õ–æ–≥–∏–Ω
  const login = async (email, password) => {
    try {
      setError(null);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ email
      let role = 'client';
      if (email.includes('chef') || email.includes('cook')) {
        role = 'chef';
      } else if (email.includes('admin')) {
        role = 'admin';
      }
      
      const response = await apiLogin(email, password, role);
      
      if (response.success) {
        const user = response.user || {
          id: response.chefId || response.clientId || email,
          email: email,
          role: response.role?.toUpperCase() || role.toUpperCase(),
        };
        
        // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (fallback)
        if (response.token) {
          setDemoUser(user, response.token);
        }
        
        setUser(user);
        return { user };
      } else {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
    } catch (err) {
      const errorMessage = err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É';
      setError(errorMessage);
      console.error('Login error:', err);
      throw new Error(errorMessage);
    }
  };

  // –õ–æ–≥–∞—É—Ç
  const logout = async () => {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–π—Ç–∏ —á–µ—Ä–µ–∑ API
      await secureLogout();
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –≤—ã—Ö–æ–¥–µ:', error);
    }
    
    // –û—á–∏—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (fallback)
    clearDemoUser();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const authKeys = [
      'authToken', 'role', 'chefId', 'clientId', 'userId',
      'chefEmail', 'chefPassword', 'clientEmail', 'clientPassword'
    ];
    
    authKeys.forEach(key => {
      localStorage.removeItem(key);
    });
    
    setUser(null);
    setError(null);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const updateProfile = async (profileData) => {
    try {
      setError(null);
      const response = await apiGetProfile();
      if (response.success) {
        setUser(response.user);
        return response.user;
      } else {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
      }
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };

  const value = {
    user,
    loading,
    error,
    isAuthenticated: !!user,
    isClient: user?.role === 'CLIENT',
    isChef: user?.role === 'CHEF',
    isAdmin: user?.role === 'ADMIN',
    register,
    login,
    logout,
    updateProfile,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};


import {
  Injectable,
  NotFoundException,
  ForbiddenException,
  BadRequestException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateOrderDto, UpdateOrderDto } from './dto';
import { OrderStatus, UserRole } from '@prisma/client';
import { DishesService } from '../dishes/dishes.service';

@Injectable()
export class OrdersService {
  constructor(
    private prisma: PrismaService,
    private dishesService: DishesService,
  ) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
   * –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async createOrder(clientId: string, createOrderDto: CreateOrderDto) {
    try {
      console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', clientId);
      console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', JSON.stringify(createOrderDto, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
      const client = await this.prisma.client.findUnique({
        where: { id: clientId },
      });

      if (!client) {
        throw new NotFoundException('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –±–ª—é–¥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      const dishIds = createOrderDto.items.map((item) => item.dishId);
      console.log('üçΩÔ∏è –ò—â–µ–º –±–ª—é–¥–∞ —Å ID:', dishIds);
      
      const dishes = await this.prisma.dish.findMany({
        where: {
          id: { in: dishIds },
          isAvailable: true,
          isArchived: false,
        },
      });
      
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥:', dishes.length);

      if (dishes.length !== dishIds.length) {
        throw new BadRequestException('–û–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –±–ª—é–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const dishMap = new Map(dishes.map((dish) => [dish.id, dish]));

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      let subtotal = 0;
      const orderItems = createOrderDto.items.map((item) => {
        const dish = dishMap.get(item.dishId);
        if (!dish) {
          throw new BadRequestException(`–ë–ª—é–¥–æ —Å ID ${item.dishId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        const itemPrice = dish.price * item.quantity;
        subtotal += itemPrice;

        return {
          dishId: item.dishId,
          quantity: item.quantity,
          price: dish.price,
          subtotal: itemPrice,
          notes: item.notes,
        };
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º chefId –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–ª—é–¥–∞
      const firstDish = dishMap.get(createOrderDto.items[0].dishId);
      if (!firstDish) {
        throw new BadRequestException(`–ü–µ—Ä–≤–æ–µ –±–ª—é–¥–æ —Å ID ${createOrderDto.items[0].dishId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      const chefId = firstDish.chefId;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ–±—â—É—é —Å—É–º–º—É
      const platformFee = subtotal * 0.1; // 10% –∫–æ–º–∏—Å—Å–∏—è
      const totalAmount = subtotal + platformFee;

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      console.log('üíæ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        clientId,
        chefId,
        orderNumber,
        subtotal,
        platformFee,
        totalAmount,
        orderItems
      });
      
      const order = await this.prisma.order.create({
        data: {
          clientId,
          chefId,
          orderNumber,
          status: OrderStatus.PENDING,
          deliveryMethod: 'DELIVERY', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç–∞–≤–∫–∞
          deliveryAddress: createOrderDto.deliveryAddress,
          paymentMethod: 'CASH', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ª–∏—á–Ω—ã–µ
          subtotal,
          platformFee,
          totalAmount,
          comment: createOrderDto.notes,
          items: {
            create: orderItems,
          },
        },
        include: {
          client: {
            include: {
              user: {
                select: {
                  firstName: true,
                  lastName: true,
                  phone: true,
                  email: true,
                },
              },
            },
          },
          chef: {
            include: {
              user: {
                select: {
                  firstName: true,
                  lastName: true,
                  phone: true,
                  email: true,
                },
              },
            },
          },
          items: {
            include: {
              dish: true,
            },
          },
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —É –±–ª—é–¥ –∏ –ø–æ–≤–∞—Ä–∞
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏...');
      
      await this.prisma.dish.updateMany({
        where: { id: { in: dishIds } },
        data: { ordersCount: { increment: 1 } },
      });

      await this.prisma.chef.update({
        where: { id: chefId },
        data: { totalOrders: { increment: 1 } },
      });

      console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', order.id);
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
   * –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
   */
  async findAllOrders(
    page = 1,
    limit = 10,
    status?: OrderStatus,
    clientId?: string,
    chefId?: string,
  ) {
    const skip = (page - 1) * limit;
    const where: any = {};

    if (status) {
      where.status = status;
    }
    if (clientId) {
      where.clientId = clientId;
    }
    if (chefId) {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã, –≥–¥–µ –µ—Å—Ç—å –±–ª—é–¥–∞ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–≤–∞—Ä–∞
      where.items = {
        some: {
          dish: {
            chefId: chefId,
          },
        },
      };
    }

    const orders = await this.prisma.order.findMany({
      where,
      skip,
      take: limit,
      include: {
        client: {
          include: {
            user: {
              select: {
                firstName: true,
                lastName: true,
                phone: true,
                email: true,
              },
            },
          },
        },
        items: {
          include: {
            dish: {
              include: {
                chef: {
                  include: {
                    user: {
                      select: {
                        firstName: true,
                        lastName: true,
                        phone: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    const total = await this.prisma.order.count({ where });

    return {
      data: orders,
      total,
      page,
      lastPage: Math.ceil(total / limit),
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
   * –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
   */
  async findOrderById(id: string) {
    const order = await this.prisma.order.findUnique({
      where: { id },
      include: {
        client: {
          include: {
            user: {
              select: {
                firstName: true,
                lastName: true,
                phone: true,
                email: true,
              },
            },
          },
        },
        items: {
          include: {
            dish: {
              include: {
                chef: {
                  include: {
                    user: {
                      select: {
                        firstName: true,
                        lastName: true,
                        phone: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    });

    if (!order) {
      throw new NotFoundException(`–ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return order;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∏ –∑–∞–∫–∞–∑—ã)
   * –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async findMyOrders(clientId: string) {
    const orders = await this.prisma.order.findMany({
      where: { clientId },
      include: {
        client: {
          include: {
            user: {
              select: {
                firstName: true,
                lastName: true,
                phone: true,
                email: true,
              },
            },
          },
        },
        items: {
          include: {
            dish: {
              include: {
                chef: {
                  include: {
                    user: {
                      select: {
                        firstName: true,
                        lastName: true,
                        phone: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return orders;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–≤–∞—Ä–∞
   * –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤
   */
  async findChefOrders(chefId: string) {
    const orders = await this.prisma.order.findMany({
      where: {
        items: {
          some: {
            dish: {
              chefId: chefId,
            },
          },
        },
      },
      include: {
        client: {
          include: {
            user: {
              select: {
                firstName: true,
                lastName: true,
                phone: true,
                email: true,
              },
            },
          },
        },
        items: {
          include: {
            dish: {
              include: {
                chef: {
                  include: {
                    user: {
                      select: {
                        firstName: true,
                        lastName: true,
                        phone: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return orders;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
   * –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
   */
  async updateOrderStatus(
    orderId: string,
    status: OrderStatus,
    userId: string,
    userRole: UserRole,
  ) {
    const order = await this.prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            dish: {
              select: {
                chefId: true,
              },
            },
          },
        },
      },
    });

    if (!order) {
      throw new NotFoundException(`–ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (userRole === UserRole.CHEF) {
      // –ü–æ–≤–∞—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å–≤–æ–∏–º–∏ –±–ª—é–¥–∞–º–∏
      const chefDishes = order.items.some(
        (item) => item.dish.chefId === userId,
      );
      if (!chefDishes) {
        throw new ForbiddenException(
          '–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å–≤–æ–∏–º–∏ –±–ª—é–¥–∞–º–∏',
        );
      }
    }

    const updatedOrder = await this.prisma.order.update({
      where: { id: orderId },
      data: { status },
      include: {
        client: {
          include: {
            user: {
              select: {
                firstName: true,
                lastName: true,
                phone: true,
                email: true,
              },
            },
          },
        },
        items: {
          include: {
            dish: {
              include: {
                chef: {
                  include: {
                    user: {
                      select: {
                        firstName: true,
                        lastName: true,
                        phone: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    });

    return updatedOrder;
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
   * –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∑–∞–∫–∞–∑–∞)
   */
  async cancelOrder(orderId: string, clientId: string) {
    const order = await this.prisma.order.findUnique({
      where: { id: orderId },
    });

    if (!order) {
      throw new NotFoundException(`–ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (order.clientId !== clientId) {
      throw new ForbiddenException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    }

    if (order.status === OrderStatus.CANCELLED) {
      throw new BadRequestException('–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω');
    }

    if (order.status === OrderStatus.DELIVERED) {
      throw new BadRequestException('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    const cancelledOrder = await this.prisma.order.update({
      where: { id: orderId },
      data: { status: OrderStatus.CANCELLED },
      include: {
        client: {
          include: {
            user: {
              select: {
                firstName: true,
                lastName: true,
                phone: true,
                email: true,
              },
            },
          },
        },
        items: {
          include: {
            dish: {
              include: {
                chef: {
                  include: {
                    user: {
                      select: {
                        firstName: true,
                        lastName: true,
                        phone: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    });

    return cancelledOrder;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
   * –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
   */
  async getOrderStats() {
    const totalOrders = await this.prisma.order.count();
    const pendingOrders = await this.prisma.order.count({
      where: { status: OrderStatus.PENDING },
    });
    const confirmedOrders = await this.prisma.order.count({
      where: { status: OrderStatus.CONFIRMED },
    });
    const preparingOrders = await this.prisma.order.count({
      where: { status: OrderStatus.PREPARING },
    });
    const readyOrders = await this.prisma.order.count({
      where: { status: OrderStatus.READY },
    });
    const deliveredOrders = await this.prisma.order.count({
      where: { status: OrderStatus.DELIVERED },
    });
    const cancelledOrders = await this.prisma.order.count({
      where: { status: OrderStatus.CANCELLED },
    });

    return {
      total: totalOrders,
      pending: pendingOrders,
      confirmed: confirmedOrders,
      preparing: preparingOrders,
      ready: readyOrders,
      delivered: deliveredOrders,
      cancelled: cancelledOrders,
    };
  }
}
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Query,
  UseGuards,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { OrdersService } from './orders.service';
import { CreateOrderDto, UpdateOrderDto } from './dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { CurrentUser } from '../auth/decorators/current-user.decorator';
import { UserRole, OrderStatus } from '@prisma/client';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';

@Controller('orders')
export class OrdersController {
  constructor(private readonly ordersService: OrdersService) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
   * –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.CLIENT)
  @HttpCode(HttpStatus.CREATED)
  async create(
    @CurrentUser() user: any,
    @Body() createOrderDto: CreateOrderDto,
  ) {
    console.log('üéØ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', JSON.stringify(user, null, 2));
    
    // –ü–æ–ª—É—á–∞–µ–º clientId –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clientId = user.client?.id;
    console.log('üéØ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: –ò–∑–≤–ª–µ—á–µ–Ω clientId:', clientId);
    
    if (!clientId) {
      throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
    }
    return this.ordersService.createOrder(clientId, createOrderDto);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
   * –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
   */
  @Get()
  @HttpCode(HttpStatus.OK)
  async findAll(
    @Query('page') page: string = '1',
    @Query('limit') limit: string = '10',
    @Query('status') status?: string,
    @Query('clientId') clientId?: string,
    @Query('chefId') chefId?: string,
  ) {
    return this.ordersService.findAllOrders(
      parseInt(page, 10),
      parseInt(limit, 10),
      status as OrderStatus,
      clientId,
      chefId,
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
   * –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
   */
  @Get(':id')
  @HttpCode(HttpStatus.OK)
  async findOne(@Param('id') id: string) {
    return this.ordersService.findOrderById(id);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
   * –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  @Get('my/orders')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.CLIENT)
  @HttpCode(HttpStatus.OK)
  async findMyOrders(@CurrentUser() user: any) {
    const clientId = user.client?.id;
    if (!clientId) {
      throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
    }
    return this.ordersService.findMyOrders(clientId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–≤–∞—Ä–∞
   * –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤
   */
  @Get('chef/orders')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.CHEF)
  @HttpCode(HttpStatus.OK)
  async findChefOrders(@CurrentUser() user: any) {
    const chefId = user.chef?.id;
    if (!chefId) {
      throw new Error('–ü–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
    }
    return this.ordersService.findChefOrders(chefId);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
   * –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
   */
  @Patch(':id/status')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.CHEF, UserRole.ADMIN)
  @HttpCode(HttpStatus.OK)
  async updateStatus(
    @Param('id') id: string,
    @Body('status') status: OrderStatus,
    @CurrentUser() user: any,
  ) {
    const userId = user.id;
    const userRole = user.role;
    return this.ordersService.updateOrderStatus(id, status, userId, userRole);
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
   * –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  @Patch(':id/cancel')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(UserRole.CLIENT)
  @HttpCode(HttpStatus.OK)
  async cancel(
    @Param('id') id: string,
    @CurrentUser() user: any,
  ) {
    const clientId = user.client?.id;
    if (!clientId) {
      throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
    }
    return this.ordersService.cancelOrder(id, clientId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
   * –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
   */
  @Get('stats/overview')
  @HttpCode(HttpStatus.OK)
  async getStats() {
    return this.ordersService.getOrderStats();
  }
}

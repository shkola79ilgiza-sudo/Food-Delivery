name: CI/CD Pipeline

on:
  workflow_dispatch: # Только ручной запуск
  push:
    branches: [] # Disabled
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: "18.x"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # JOB 1: Lint and Security Check
  # ============================================
  lint:
    name: 🔍 Lint & Security
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: 🔒 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Check for vulnerabilities
        run: npm audit fix --dry-run

      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: eslint-report.json

  # ============================================
  # JOB 2: Unit Tests
  # ============================================
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage/

  # ============================================
  # JOB 3: Build
  # ============================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          REACT_APP_API_BASE_URL: ${{ secrets.API_BASE_URL || 'https://api.example.com' }}
          REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN || '' }}
          REACT_APP_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/
          retention-days: 7

  # ============================================
  # JOB 4: E2E Tests (Playwright)
  # ============================================
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🎭 Run E2E tests
        run: npx playwright test
        env:
          CI: true

      - name: 📊 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # ============================================
  # JOB 5: Deploy to Staging
  # ============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.fooddelivery.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/

      - name: 🚀 Deploy to staging
        if: ${{ secrets.STAGING_SSH_KEY != '' && secrets.STAGING_HOST != '' && secrets.STAGING_USER != '' }}
        uses: easingthemes/ssh-deploy@v2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.STAGING_HOST }}
          REMOTE_USER: ${{ secrets.STAGING_USER }}
          SOURCE: "build/"
          TARGET: "/var/www/staging"

      - name: 🔄 Restart Nginx
        if: ${{ secrets.STAGING_SSH_KEY != '' && secrets.STAGING_HOST != '' && secrets.STAGING_USER != '' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            sudo systemctl reload nginx
            echo "✅ Staging deployed successfully"

      - name: 💬 Notify Slack
        if: ${{ secrets.SLACK_WEBHOOK != '' }}
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK || '' }}
        with:
          status: ${{ job.status }}
          text: "Staging deployment completed"

  # ============================================
  # JOB 6: Deploy to Production
  # ============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://fooddelivery.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/

      - name: 🏗️ Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: 🚀 Deploy to production
        if: ${{ secrets.PRODUCTION_SSH_KEY != '' && secrets.PRODUCTION_HOST != '' && secrets.PRODUCTION_USER != '' }}
        uses: easingthemes/ssh-deploy@v2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.PRODUCTION_HOST }}
          REMOTE_USER: ${{ secrets.PRODUCTION_USER }}
          SOURCE: "build/"
          TARGET: "/var/www/production"

      - name: 🔄 Blue-Green Deployment
        if: ${{ secrets.PRODUCTION_SSH_KEY != '' && secrets.PRODUCTION_HOST != '' && secrets.PRODUCTION_USER != '' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Blue-green deployment script
            docker-compose -f /opt/app/docker-compose.yml pull
            docker-compose -f /opt/app/docker-compose.yml up -d --no-deps --build app
            docker-compose -f /opt/app/docker-compose.yml exec app npm run migrate

            # Health check
            sleep 10
            curl -f http://localhost:3000/health || exit 1

            # Switch traffic
            sudo systemctl reload nginx
            echo "✅ Production deployed successfully"

      - name: 📊 Create Sentry release
        if: ${{ secrets.SENTRY_AUTH_TOKEN != '' && secrets.SENTRY_ORG != '' && secrets.SENTRY_PROJECT != '' }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN || '' }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG || '' }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || '' }}
        with:
          environment: production
          version: ${{ github.sha }}

      - name: 💬 Notify Slack
        if: ${{ secrets.SLACK_WEBHOOK != '' }}
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK || '' }}
        with:
          status: ${{ job.status }}
          text: "🚀 Production deployment completed"

      - name: 📧 Notify PagerDuty on failure
        if: ${{ failure() && secrets.PAGERDUTY_KEY != '' }}
        uses: Entle/action-pagerduty-alert@v1
        with:
          pagerduty-integration-key: ${{ secrets.PAGERDUTY_KEY || '' }}
          pagerduty-dedup-key: deployment-${{ github.sha }}

  # ============================================
  # JOB 7: Performance Tests
  # ============================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://staging.fooddelivery.com
            https://staging.fooddelivery.com/menu
            https://staging.fooddelivery.com/chef
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # ============================================
  # JOB 8: Security Scan
  # ============================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Snyk Security Scan
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
        with:
          args: --severity-threshold=high

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

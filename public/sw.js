// Enhanced Service Worker –¥–ª—è PWA —Å –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–æ–º
const CACHE_NAME = 'food-delivery-v2';
const STATIC_CACHE = 'food-delivery-static-v2';
const DYNAMIC_CACHE = 'food-delivery-dynamic-v2';
const API_CACHE = 'food-delivery-api-v2';

const urlsToCache = [
  '/',
  '/static/js/bundle.js',
  '/static/css/main.css',
  '/manifest.json',
  '/favicon.ico',
  '/logo192.png',
  '/logo512.png'
];

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const staticAssets = [
  '/static/js/',
  '/static/css/',
  '/static/media/',
  '/manifest.json'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  event.waitUntil(
    Promise.all([
      // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      caches.open(STATIC_CACHE).then((cache) => {
        console.log('Caching static assets');
        return cache.addAll(urlsToCache);
      }),
      // –ö—ç—à–∏—Ä—É–µ–º API endpoints
      caches.open(API_CACHE).then((cache) => {
        console.log('API cache ready');
        return Promise.resolve();
      })
    ])
  );
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SW
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  event.waitUntil(
    Promise.all([
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (![STATIC_CACHE, DYNAMIC_CACHE, API_CACHE].includes(cacheName)) {
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      self.clients.claim()
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º non-HTTP –∑–∞–ø—Ä–æ—Å—ã
  if (!request.url.startsWith('http')) return;

  event.respondWith(
    handleRequest(request)
  );
});

async function handleRequest(request) {
  const url = new URL(request.url);
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã - Cache First —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
  if (isStaticAsset(url.pathname)) {
    return cacheFirst(request, STATIC_CACHE);
  }
  
  // API –∑–∞–ø—Ä–æ—Å—ã - Network First —Å fallback –Ω–∞ –∫—ç—à
  if (isApiRequest(url.pathname)) {
    return networkFirst(request, API_CACHE);
  }
  
  // HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã - Network First
  if (request.headers.get('accept')?.includes('text/html')) {
    return networkFirst(request, DYNAMIC_CACHE);
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - Stale While Revalidate
  return staleWhileRevalidate(request, DYNAMIC_CACHE);
}

// Cache First —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function cacheFirst(request, cacheName) {
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Network failed, serving from cache:', error);
    return new Response('Offline content', { status: 503 });
  }
}

// Network First —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function networkFirst(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Network failed, trying cache:', error);
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è HTML –∑–∞–ø—Ä–æ—Å–æ–≤
    if (request.headers.get('accept')?.includes('text/html')) {
      return new Response(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>–û—Ñ–ª–∞–π–Ω - Food Delivery</title>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
        </head>
        <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
          <h1>üîå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</h1>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</p>
          <button onclick="window.location.reload()">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
        </body>
        </html>
      `, {
        headers: { 'Content-Type': 'text/html' }
      });
    }
    
    return new Response('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ', { status: 503 });
  }
}

// Stale While Revalidate —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function staleWhileRevalidate(request, cacheName) {
  const cachedResponse = await caches.match(request);
  
  const fetchPromise = fetch(request).then(networkResponse => {
    if (networkResponse.ok) {
      const cache = caches.open(cacheName);
      cache.then(c => c.put(request, networkResponse.clone()));
    }
    return networkResponse;
  }).catch(() => cachedResponse);
  
  return cachedResponse || fetchPromise;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
function isStaticAsset(pathname) {
  return staticAssets.some(asset => pathname.startsWith(asset)) ||
         pathname.match(/\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2)$/);
}

function isApiRequest(pathname) {
  return pathname.startsWith('/api/') || pathname.includes('localhost:3001');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  console.log('Push event received:', event);

  let notificationData = {
    title: 'üçΩÔ∏è Food Delivery',
    body: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!',
    icon: '/logo192.png',
    badge: '/logo192.png',
    tag: 'food-delivery-notification',
    requireInteraction: true
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ push —Å–æ–±—ã—Ç–∏–∏
  if (event.data) {
    try {
      const data = event.data.json();
      notificationData = { ...notificationData, ...data };
    } catch (error) {
      console.error('Error parsing push data:', error);
    }
  }

  const promiseChain = self.registration.showNotification(
    notificationData.title,
    notificationData
  );

  event.waitUntil(promiseChain);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event);

  event.notification.close();

  if (event.action === 'view') {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    event.waitUntil(
      clients.openWindow('/')
    );
  } else if (event.action === 'dismiss') {
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    console.log('Notification dismissed');
  } else {
    // –ö–ª–∏–∫ –ø–æ —Å–∞–º–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('notificationclose', (event) => {
  console.log('Notification closed:', event);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SEND_NOTIFICATION') {
    const { title, body, icon, tag } = event.data;
    
    self.registration.showNotification(title, {
      body,
      icon: icon || '/logo192.png',
      badge: '/logo192.png',
      tag: tag || 'food-delivery-notification',
      requireInteraction: true,
      actions: [
        { action: 'view', title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å' },
        { action: 'dismiss', title: '–ó–∞–∫—Ä—ã—Ç—å' }
      ]
    });
  }
});
